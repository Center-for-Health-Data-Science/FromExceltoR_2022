[
  {
    "objectID": "about_heads.html",
    "href": "about_heads.html",
    "title": "About HeaDS",
    "section": "",
    "text": "In the Center for Health Data Science (HeaDS) we do both research and in the DataLab and Sandbox we develop and host course. Read more about all the cool stuff we do on our website.\n\n\nThe DataLab offers a range of services to support SUND employees in their data science analyses. Here’s an overview:\n\nCourses: We offer data science and bioinformatics courses for all SUND staff (researchers, administrative staff, technical staff, etc.). Our most popular courses include “From Excel to R,” “Python Tsunami,” and “Introduction to Bulk RNA-seq Analysis.”\nConsultations: We host drop-in sessions every Thursday from 13:00 to 15:00, where we assist with data science-related challenges and questions. Alternatively, you can reach out to arrange a one-on-one meeting on another day.\nCommissions: We conduct commissioned research, such as bioinformatics and data science analyses tailored to your needs. Additionally, we offer a commissioned supervision scheme if you would like to learn how to perform the analysis yourself.\nEvents: We host various data science events. Join us for our seminar series, “Talking HeaDS.” Our next session is in the spring (date and speeker TBA), and you can sign up here: https://eventsignup.ku.dk/talkingheadsspring2025."
  },
  {
    "objectID": "about_heads.html#center-for-health-data-science",
    "href": "about_heads.html#center-for-health-data-science",
    "title": "About HeaDS",
    "section": "",
    "text": "In the Center for Health Data Science (HeaDS) we do both research and in the DataLab and Sandbox we develop and host course. Read more about all the cool stuff we do on our website.\n\n\nThe DataLab offers a range of services to support SUND employees in their data science analyses. Here’s an overview:\n\nCourses: We offer data science and bioinformatics courses for all SUND staff (researchers, administrative staff, technical staff, etc.). Our most popular courses include “From Excel to R,” “Python Tsunami,” and “Introduction to Bulk RNA-seq Analysis.”\nConsultations: We host drop-in sessions every Thursday from 13:00 to 15:00, where we assist with data science-related challenges and questions. Alternatively, you can reach out to arrange a one-on-one meeting on another day.\nCommissions: We conduct commissioned research, such as bioinformatics and data science analyses tailored to your needs. Additionally, we offer a commissioned supervision scheme if you would like to learn how to perform the analysis yourself.\nEvents: We host various data science events. Join us for our seminar series, “Talking HeaDS.” Our next session is in the spring (date and speeker TBA), and you can sign up here: https://eventsignup.ku.dk/talkingheadsspring2025."
  },
  {
    "objectID": "Exercises/exercise1A.html",
    "href": "Exercises/exercise1A.html",
    "title": "Exercise 1A: Introduction to R",
    "section": "",
    "text": "Make a new directory for this course.\nGo to course website and to the Data tab. Press the Download Data button.\nMove the Data folder to your course directory.\nUnder your course directory, make a new folder for your scripts and another for the presentations you download.\n\nYour file tree should look something like this:",
    "crumbs": [
      "Course Material",
      "Exercises 🏋🏽",
      "Exercise 1A: Introduction to R"
    ]
  },
  {
    "objectID": "Exercises/exercise1A.html#file-tree",
    "href": "Exercises/exercise1A.html#file-tree",
    "title": "Exercise 1A: Introduction to R",
    "section": "",
    "text": "Make a new directory for this course.\nGo to course website and to the Data tab. Press the Download Data button.\nMove the Data folder to your course directory.\nUnder your course directory, make a new folder for your scripts and another for the presentations you download.\n\nYour file tree should look something like this:",
    "crumbs": [
      "Course Material",
      "Exercises 🏋🏽",
      "Exercise 1A: Introduction to R"
    ]
  },
  {
    "objectID": "Exercises/exercise1A.html#getting-started-with-rstudio",
    "href": "Exercises/exercise1A.html#getting-started-with-rstudio",
    "title": "Exercise 1A: Introduction to R",
    "section": "Getting started with Rstudio",
    "text": "Getting started with Rstudio\n\nStart RStudio.\nIn the tool bar, click on the file icon with the ‘+’ sign on the very left → R script. This is a ‘flat’ R script that we showed in the beginning. We will not be working in this format in the course, but it is important that you know what they are for you further R adventures.\nSave the file in your scripts directory.\nIn the bottom-right panel, navigate to the file you just saved.\n\nWhen doing data science, you often work with some kind of input files, like an Excel sheet from the lab. It is therefore important that you know how to navigate to files from your R script. The directories you need to go through to find your input file can either be absolute or relative:\n\nAbsolute path: The path from the root of your file system to the input file.\nRelative path: The path from the working directory to the input file.\n\nWe will try to find both paths to the climate.xlsx file in the Data directory.\n\nStep 1: Absolute Path\n\nCreate a character variable called absolute_path like the one below.\n\n\nabsolute_path &lt;- \"~/\"\n\n\nPut your cursor between the slash and the last quotation mark and press the tab key. Navigate to the directory containing your input file.\n\n\n\n\n\n\n\nAbsolute path example\n\n\n\n\n\n\nabsolute_path &lt;- \"~/Desktop/Stuff/Courses/GreatestCourse/FromExceltoR/Data/climate.xlsx\"\n\n\n\n\n\n\nStep 2: Relative Path\n\nChange your working directory to an arbitrary place using setwd()\nIn your script, create another character variable called relative_path in your R script.\nFollow these steps:\n\n\nPut your cursor between the two quotation marks.\nPress the tab key. What do you see?\nWrite two periods and a slash (../):\nNow place the cursor between the slash and the quotation mark and press the tab key again. What do you see?\nUse the tab key to navigate to the climate.xlsx file through the simplest path. NB This might include deleting the initial ../.\n\n\n\n\n\n\n\nRelative path examples\n\n\n\n\n\n\nsetwd(\"~/Desktop/Stuff/Courses/GreatestCourse/FromExceltoR\")\nrelative_path &lt;- \"/Data/climate.xlsx\"\n\n\nsetwd(\"~/Desktop/Stuff/Courses/GreatestCourse/FromExceltoR/Scripts\")\nrelative_path &lt;- \"../Data/climate.xlsx\"\n\n\nsetwd(\"~/Desktop/Stuff/Projects/RNAseq/TheGreatProject\")\nrelative_path &lt;- \"../../../Courses/GreatestCourse/FromExceltoR/Data/climate.xlsx\"",
    "crumbs": [
      "Course Material",
      "Exercises 🏋🏽",
      "Exercise 1A: Introduction to R"
    ]
  },
  {
    "objectID": "Exercises/exercise5.html",
    "href": "Exercises/exercise5.html",
    "title": "Exercise 5: Data Exercise in R",
    "section": "",
    "text": "In this exercise you will practice your newly acquired R skills on an example dataset.\nIf you have your own data to work on, you can still follow the steps in the exercise where they apply.",
    "crumbs": [
      "Course Material",
      "Exercises 🏋🏽",
      "Exercise 5: Data Exercise in R"
    ]
  },
  {
    "objectID": "Exercises/exercise5.html#introduction",
    "href": "Exercises/exercise5.html#introduction",
    "title": "Exercise 5: Data Exercise in R",
    "section": "",
    "text": "In this exercise you will practice your newly acquired R skills on an example dataset.\nIf you have your own data to work on, you can still follow the steps in the exercise where they apply.",
    "crumbs": [
      "Course Material",
      "Exercises 🏋🏽",
      "Exercise 5: Data Exercise in R"
    ]
  },
  {
    "objectID": "Exercises/exercise5.html#r-packages",
    "href": "Exercises/exercise5.html#r-packages",
    "title": "Exercise 5: Data Exercise in R",
    "section": "R-packages",
    "text": "R-packages\nFor the data wrangling and statistical modelling we will be doing in this exercise, you will need the following R-packages: tidyverse, ggplot2, emmeans, MASS.\n\nMake sure that these packages are installed and loaded into your R environment. You likely have the packages already installed and loaded (you used these in the previous exercises) try sessionInfo() and require() (look up what these function do). If the packages are not there install them and library them as in the previous exercises.",
    "crumbs": [
      "Course Material",
      "Exercises 🏋🏽",
      "Exercise 5: Data Exercise in R"
    ]
  },
  {
    "objectID": "Exercises/exercise5.html#getting-the-dataset",
    "href": "Exercises/exercise5.html#getting-the-dataset",
    "title": "Exercise 5: Data Exercise in R",
    "section": "Getting the Dataset",
    "text": "Getting the Dataset\nFor this exercise, we’ll use the birthweight dataset from the package MASS. It contains the birthweight of infants and some information about the mother.\nTo get it we have to load the package and then the data. We will also display the help so we can read some background info about the data and what the columns are:\n\ndata(birthwt)\n?birthwt #display help page\n\nN.B If it says &lt;Promise&gt; after birthwt in your global environment just click on it and the dataframe will be loaded properly.\nIf you have a dataset of your own you would like yo look at instead of the example data we provide here, you are very welcome to. You can again use read_excel() for excel sheets. For other formats, have a look at read.csv(), read.table(), read.delim(), etc. You can either google your way to an answer or ask one of the course instructors.\n\nNow, check the class of the dataset. We’ll be using tidyverse to do our anaylsis, so if it isn’t already a tibble, make it into one.",
    "crumbs": [
      "Course Material",
      "Exercises 🏋🏽",
      "Exercise 5: Data Exercise in R"
    ]
  },
  {
    "objectID": "Exercises/exercise5.html#exploratory-analysis",
    "href": "Exercises/exercise5.html#exploratory-analysis",
    "title": "Exercise 5: Data Exercise in R",
    "section": "Exploratory Analysis",
    "text": "Exploratory Analysis\n\nThe Basics\nBefore performing any statistical analysis (modelling), it is necessary to have a good understanding of the data. Start by looking at:\n\nHow many variables and observations are there in the data?\nWhat was measured, i.e. what do each of the variables describe? You can rename variables via the colnames() if you want to.\nWhich data types are the variables and does that make sense? Should you change the type of any variables? Hint: Think about types factor, numerical, integer, character, etc.\nWhat is our response/outcome variable(s)? There can be several.\nIs the (categorical) outcome variable balanced?\nAre there any missing values (NA), if yes and how many? Google how to check this if you don’t know.",
    "crumbs": [
      "Course Material",
      "Exercises 🏋🏽",
      "Exercise 5: Data Exercise in R"
    ]
  },
  {
    "objectID": "Exercises/exercise5.html#diving-into-the-data",
    "href": "Exercises/exercise5.html#diving-into-the-data",
    "title": "Exercise 5: Data Exercise in R",
    "section": "Diving into the data",
    "text": "Diving into the data\n\nNumeric variables\nSome of the measured variables in our data are numeric, i.e. continuous. For these do:\n\nCalculate summary statistics (mean, median, sd, min, max)\nCreate boxplots for each numeric variable using ggplot2, and apply scale_x_discrete() to prevent meaningless scaling of the boxplot widths.\nDo you see outliers in your dataset?\nNow remake the boxplot with two different colors, depending on the (categorical) outcome variable.\n\n\n\nCategorical variables\nOther columns describe variables that are categorical. Some of these may have been initially interpreted by R as numerical, especially if they are coded with 0/1.\n\nIf you haven’t changed their datatype to factor yet, do so now. You can see how in Presentation 5.\nWhen you are done, make barplots of each categorical variable.\nThen, split up the barplot for smoke so you have two different colors for the two different values of the outcome variable (the same way you did it above for the boxplots).\nNow, add the argument position ='dodge' to geom_bar and remake the plot. What has changed? Then remake it once again with position ='fill'. What information do the different barplots show? Compare to the counts you get from the smoke column when you group the dataframe by the outcome variable.\nLastly, make a density plot of the two continuous variables lwt and bwt, split it up by smoke.\n\nExtra: Pick custom colors for your plots (look into scale_fill_manual()).\n\n\nSubsetting the data\nBased on what you have observed in the last two sections, now choose two numeric variables and two categorical variables to move forward with. Create a subset of the dataframe with only these variables and the categorical and numeric outcome.",
    "crumbs": [
      "Course Material",
      "Exercises 🏋🏽",
      "Exercise 5: Data Exercise in R"
    ]
  },
  {
    "objectID": "Exercises/exercise5.html#modelling",
    "href": "Exercises/exercise5.html#modelling",
    "title": "Exercise 5: Data Exercise in R",
    "section": "Modelling",
    "text": "Modelling\nYou now have a prepared dataset on which we can do some modelling.\n\nRegression Model 1\nIn the Applied statistics session you’ve tried out an analysis with one way ANOVA, where you compared the effect of categorical variables (skin type) on the outcome (gene counts).\nWe’ll do something similar here but instead we will use the numerical variables as predictors and the measured birthweight as the (numerical) outcome. This is what is known as linear regression.\n\nWe can also do this with lm() and follow the same syntax as before:\n\nmodel1 &lt;- lm(resp ~ pred1, data=name_of_dataset)\n\nSimply, if the outcome variable we are interested in is continuous, then lm() will functionally be doing a linear regression. If the outcome is categorical, it will be performing ANOVA (which if you only have two groups is effectively a t-test). Have a look at this video if you want to understand why you can do a t-test / ANOVA with a linear model.\n\nNow, pick one of your numeric variables and use it to model the (numeric/continuous) outcome.\nInvestigate the model you have made by writing its name, i.e.\n\n\nmodel1\n\n\nWhat does this mean? Compare to the linear model illustration above.\nWe’ll now make a plot of your model to help us better visualize what has happened. Make a scatter plot with your predictor variable on the x-axis and the outcome variable on the y-axis.\nNow add the regression line to the plot by using the code below. For the slope and intercept, enter the values you found when you inspected the model. Does this look like a good fit?\n\n\n+ geom_abline(slope=???, intercept = ???, color = 'red')\n\n\nRepeat the process with the other numeric variable you picked.\n\nSometimes the variables we have measured are not good at explaining the outcome and we have to accept that.\n\nInstead of the geom_abline(), try geom_smooth() which provides you with a confidence interval in addition to the regression line. Look at the help for this geom (or google) to figure out what argument it needs to work!\nInspect your model in more detail with summary(). Look at the output, what additional information do you get about the model. Pay attention to the Residual standard error (RSE) and Adjusted R-squared (R2adj) at the bottom of the output. We would like RSE to be as small as possible (goes towards 0 when model improves) while we would like the R2adj to be large (goes towards 1 when model improves).\n\nN.B if you want to understand the output of a linear regression summary in greater detail have a look here.\n\nsummary(model1)\n\n\n\nRegression Model 2\n\nRemake your model (call it model2) but this time add an additional explanatory variable to the model in addition to lwt. This should be one of the categorical variable you selected to be in your subset. (smoke might be interesting, but you could also try either age and/or ht). Does adding this second exploratory variable improve the metrics RSE and/or R2adj?\n\n\nmodel2 &lt;- lm(resp ~ pred1 + pred2, data=name_of_dataset)\n\n\nFind the 95% confidence intervals for model2, by using the confint() function. If you are not familiar with confidence intervals, have a look here.\nTry the following commands (or a variation of it, depending on which variables you have included in model2), and see if you can figure out what the outcome means.\n\n\nnewData &lt;- data.frame(lwt=100, smoke=as.factor(1))\nnewData\npredict(model2, newData)\npredict(model2, newData, interval=\"prediction\")\n\n\n\n\nBonus Exercise - ANOVA\nNow, we will instead look at the two categorical variables you picked. Make a model of the outcome variable depending on one the categorical variable\n\nPick one of the two categorical variables and use it to model the (numeric) outcome, just as during the Applied Stats session:\n\n\nmodel3 &lt;- lm(resp ~ pred1, data=name_of_dataset)\n\n\ninspect the output by calling summary() on the model\n\n\nsummary(model3)\n\nYou can have a look at this website to help you understand the output of summary.\n\n\nShort detour: The meaning of the intercept in an ANOVA\nThe intercept is the estimate of the outcome variable that you would get when all explanatory variables are 0.\nSo if we have the model lm(bwt ~ smoke, data = birthData) and smoke is coded as 0 for non-smokers and 1 for smokers, the intercept is the estimate birthweight of a baby of a non-smoker. It will be significant because it is significantly different from 0, but that doesn’t mean much since we would usually expect babies to weight more than 0.\nYou can now make some other models, including several predictors and see what you get.",
    "crumbs": [
      "Course Material",
      "Exercises 🏋🏽",
      "Exercise 5: Data Exercise in R"
    ]
  },
  {
    "objectID": "Exercises/exercise3.html",
    "href": "Exercises/exercise3.html",
    "title": "Exercise 3: ggplot2",
    "section": "",
    "text": "Before you proceed with the exercises in this document, make sure to run the command library(tidyverse) in order to load the core tidyverse packages (including ggplot2).\nThe data set used in these exercises, climate.xlsx1, was compiled from data downloaded in 2017 from the website of the UK’s national weather service, the Met Office.\nThe spreadsheet contains data from five UK weather stations in 2016. The following variables are included in the data set:\n\n\n\nVariable name\nExplanation\n\n\n\n\nstation\nLocation of weather station\n\n\nyear\nYear\n\n\nmonth\nMonth\n\n\naf\nDays of air frost\n\n\nrain\nRainfall in mm\n\n\nsun\nSunshine duration in hours\n\n\ndevice\nBrand of sunshine recorder / sensor\n\n\n\nThe data set is the same as the one used for the Tidyverse exercise. If you have already imported the data, there is no need to import it again, unless you have made changes to the data assigned to climate since the original data set was imported.\nNeed a little help? Consult the ggplot2 cheatsheet here: https://rstudio.github.io/cheatsheets/data-visualization.pdf",
    "crumbs": [
      "Course Material",
      "Exercises 🏋🏽",
      "Exercise 3: ggplot2"
    ]
  },
  {
    "objectID": "Exercises/exercise3.html#getting-started",
    "href": "Exercises/exercise3.html#getting-started",
    "title": "Exercise 3: ggplot2",
    "section": "",
    "text": "Before you proceed with the exercises in this document, make sure to run the command library(tidyverse) in order to load the core tidyverse packages (including ggplot2).\nThe data set used in these exercises, climate.xlsx1, was compiled from data downloaded in 2017 from the website of the UK’s national weather service, the Met Office.\nThe spreadsheet contains data from five UK weather stations in 2016. The following variables are included in the data set:\n\n\n\nVariable name\nExplanation\n\n\n\n\nstation\nLocation of weather station\n\n\nyear\nYear\n\n\nmonth\nMonth\n\n\naf\nDays of air frost\n\n\nrain\nRainfall in mm\n\n\nsun\nSunshine duration in hours\n\n\ndevice\nBrand of sunshine recorder / sensor\n\n\n\nThe data set is the same as the one used for the Tidyverse exercise. If you have already imported the data, there is no need to import it again, unless you have made changes to the data assigned to climate since the original data set was imported.\nNeed a little help? Consult the ggplot2 cheatsheet here: https://rstudio.github.io/cheatsheets/data-visualization.pdf",
    "crumbs": [
      "Course Material",
      "Exercises 🏋🏽",
      "Exercise 3: ggplot2"
    ]
  },
  {
    "objectID": "Exercises/exercise3.html#scatter-plot-i",
    "href": "Exercises/exercise3.html#scatter-plot-i",
    "title": "Exercise 3: ggplot2",
    "section": "Scatter plot I",
    "text": "Scatter plot I\n\nMake a scatter (point) plot of rain against sun.\nColor the points in the scatter plot according to weather station. Save the plot in an object.\nAdd the segment + facet_wrap(vars(station)) to the saved plot object from above, and update the plot. What happens?\nIs it necessary to have a legend in the faceted plot? How can you remove this legend? Hint: try adding a theme() with legend.position = \"none\" inside it.",
    "crumbs": [
      "Course Material",
      "Exercises 🏋🏽",
      "Exercise 3: ggplot2"
    ]
  },
  {
    "objectID": "Exercises/exercise3.html#graphic-files",
    "href": "Exercises/exercise3.html#graphic-files",
    "title": "Exercise 3: ggplot2",
    "section": "Graphic files",
    "text": "Graphic files\n\nUse ggsave(file=\"weather.jpeg\") to remake the last ggplot as a jpeg-file and save it. The file will be saved on your working directory. Locate this file on your computer and open it.\nUse ggsave(file=\"weather.png\", width=10, height=8, units=\"cm\") to remake the last ggplot as a png-file and save it. What do the three other options do? Look at the help page ?ggsave to get an overview of the possible options.",
    "crumbs": [
      "Course Material",
      "Exercises 🏋🏽",
      "Exercise 3: ggplot2"
    ]
  },
  {
    "objectID": "Exercises/exercise3.html#scatter-plot-ii-error-bars",
    "href": "Exercises/exercise3.html#scatter-plot-ii-error-bars",
    "title": "Exercise 3: ggplot2",
    "section": "Scatter plot II: error bars",
    "text": "Scatter plot II: error bars\n\nCalculate the average and standard deviation for sunshine in each month and save it to a table called summary_stats. You will need group_by and summarize. Recall how to do this from the tidyverse exercise.\nMake a scatter plot of the summary_stats with month on the x-axis, and the average number of sunshine hours on the y-axis.\nAdd error bars to the plot, which represent the average number of sunshine hours plus/minus the standard deviation of the observations. The relevant geom is called geom_errorbar.\n\nHint:\n\ngeom_errorbar(aes(ymin = sun_avg - sun_sd, ymax = sun_avg + sun_sd), width = 0.2)\n\n\nHow could make the plot with horizontal error bars instead? Tip: Think about which of the two variables, month and average sunshine hours, can meaningfully have an error.",
    "crumbs": [
      "Course Material",
      "Exercises 🏋🏽",
      "Exercise 3: ggplot2"
    ]
  },
  {
    "objectID": "Exercises/exercise3.html#line-plot-also-known-as-a-spaghetti-plot",
    "href": "Exercises/exercise3.html#line-plot-also-known-as-a-spaghetti-plot",
    "title": "Exercise 3: ggplot2",
    "section": "Line plot (also known as a spaghetti plot)",
    "text": "Line plot (also known as a spaghetti plot)\n\nMake a line plot (find the correct geom_ for this) of the rainfall observations over time (month), such that observations from the same station are connected in one line. Put month on the x-axis. Color the lines according to weather station as well.\nThe month variable was read into R as a numerical variable. Convert this variable to a factor and make the line plot again. What has changed?\nUse theme(legend.position = ???) to move the color legend to the top of the plot.",
    "crumbs": [
      "Course Material",
      "Exercises 🏋🏽",
      "Exercise 3: ggplot2"
    ]
  },
  {
    "objectID": "Exercises/exercise3.html#layering",
    "href": "Exercises/exercise3.html#layering",
    "title": "Exercise 3: ggplot2",
    "section": "Layering",
    "text": "Layering\nWe can add several geoms to the same plot to show several things at once.\n\n(Re)Make the line plot of monthly rainfall and add geom_point() to it.\nNow, add geom_hline(yintercept = mean(climate$rain), linetype = \"dashed\") at the end of your code for the line plot, and update the plot again. Have a look at the code again and understand what it does and how. What do you think ‘h’ in hline stands for?\nFinally, try adding the following code and update the plot. What changed? Replace X, Y, COL, and TITLE with some more suitable (informative) text.\n\n\nlabs(x = \"X\", y = \"Y\", color = \"COL\", title = \"TITLE\")",
    "crumbs": [
      "Course Material",
      "Exercises 🏋🏽",
      "Exercise 3: ggplot2"
    ]
  },
  {
    "objectID": "Exercises/exercise3.html#box-plot-i",
    "href": "Exercises/exercise3.html#box-plot-i",
    "title": "Exercise 3: ggplot2",
    "section": "Box plot I",
    "text": "Box plot I\n\nMake a box plot of sunshine per weather station.\nColor the boxes according to weather station.",
    "crumbs": [
      "Course Material",
      "Exercises 🏋🏽",
      "Exercise 3: ggplot2"
    ]
  },
  {
    "objectID": "Exercises/exercise3.html#box-plot-ii---aesthetics",
    "href": "Exercises/exercise3.html#box-plot-ii---aesthetics",
    "title": "Exercise 3: ggplot2",
    "section": "Box plot II - Aesthetics",
    "text": "Box plot II - Aesthetics\nThere are many ways in which you can manipulate the look of your plot. For this we will use the boxplot you made in the exercise above.\n\nAdd a different legend title with labs(fill = \"Custom Title\").\nChange the theme of the ggplot grid. Suggestions: theme_minimal(), theme_bw(), theme_dark(), theme_void().\nInstead of automatically chosen colors, pick your own colors for fill = station by adding the scale_fill_manual() command. You will need five colors, one for each station. What happens if you choose too few colors?\nChange the boxplot to a violin plot. Add the sunshine observations as scatter points to the plot. Include a boxplot inside the violin plot with geom_boxplot(width=.1).",
    "crumbs": [
      "Course Material",
      "Exercises 🏋🏽",
      "Exercise 3: ggplot2"
    ]
  },
  {
    "objectID": "Exercises/exercise3.html#histogram",
    "href": "Exercises/exercise3.html#histogram",
    "title": "Exercise 3: ggplot2",
    "section": "Histogram",
    "text": "Histogram\n\nMake a histogram (find the correct geom_ for this) of rain from the climate dataset. Interpret the plot, what does it show?\nR suggests that you choose a different number of bins/bin width for the histogram. Use binwidth = inside the histogram geom to experiment with different values of bin width. Look at how the histogram changes.\nColor the entire histogram. Here we are not coloring/filling according to any attribute, just the entire thing so the argument needs to be outside aes().",
    "crumbs": [
      "Course Material",
      "Exercises 🏋🏽",
      "Exercise 3: ggplot2"
    ]
  },
  {
    "objectID": "Exercises/exercise3.html#bar-chart-i",
    "href": "Exercises/exercise3.html#bar-chart-i",
    "title": "Exercise 3: ggplot2",
    "section": "Bar chart I",
    "text": "Bar chart I\n\nMake a bar chart (geom_col()) which visualizes the sunshine hours per month. If you have not done so in question 13, convert month to a factor now and remake the plot.\nColor, i.e. divide the bars according to weather station.\nFor better comparison, place the bars for each station next to each other instead of stacking them.\nMake the axis labels, legend title, and title of the plot more informative by customizing them like you did for the line plot above.",
    "crumbs": [
      "Course Material",
      "Exercises 🏋🏽",
      "Exercise 3: ggplot2"
    ]
  },
  {
    "objectID": "Exercises/exercise3.html#bar-chart-ii-sorting-bars",
    "href": "Exercises/exercise3.html#bar-chart-ii-sorting-bars",
    "title": "Exercise 3: ggplot2",
    "section": "Bar chart II: Sorting bars",
    "text": "Bar chart II: Sorting bars\n\nMake a new bar chart showing the (total) annual rainfall recorded at each weather station. You will need to calculate this first. The format we need is a dataframe with summed up rain data per station.\nSort the stations in accordance to rainfall, either ascending or descending. This was shown in the ggplot lecture. Sort your rain dataframe from the question above by sum, then re-arrange the factor-levels of the ‘station’ as shown in the lecture.\nAdd labels to each bar that state the sum of the rainfall. You can do this by adding the label keyword to the aes() and adding geom_label() to the plot. Just like geoms like geom_scatter look at the aes() for knowing what to plot on the x and y axis, geom_label looks at it to know what to use for labels.\nAdjust the label positions so that the labels are positioned above the bars instead of inside them.",
    "crumbs": [
      "Course Material",
      "Exercises 🏋🏽",
      "Exercise 3: ggplot2"
    ]
  },
  {
    "objectID": "Exercises/exercise3.html#wrapping-up",
    "href": "Exercises/exercise3.html#wrapping-up",
    "title": "Exercise 3: ggplot2",
    "section": "Wrapping up",
    "text": "Wrapping up\n\nLike in the last exercise; imagine you need to send your code to a collaborator. Review your code to ensure it is clear and well-structured, so your collaborator can easily understand and follow your work. Render your Quarto document and look at the result. Try to change the size of a figure by modifying the chunk header.",
    "crumbs": [
      "Course Material",
      "Exercises 🏋🏽",
      "Exercise 3: ggplot2"
    ]
  },
  {
    "objectID": "Exercises/exercise3.html#optional-section",
    "href": "Exercises/exercise3.html#optional-section",
    "title": "Exercise 3: ggplot2",
    "section": "Optional section",
    "text": "Optional section\n\nLoad in the climate_change data set generated in the last optional exercises.\nUse group_by, summarize, and facet_wrap to recreate this plot. Consider if some of the variables should change class prior to plotting. \nYour supervisor does not like colors. Change the stratification to not include any colors and add white background. Also, update the labels to start with capital letters and give the plot a meaningful title.\nRecreate this plot. Use whatever colors you like (but change them from the default coloring) and give the plot at meaningful title. \nRecreate this plot using geom_tile() to make a heatmap, and scale_fill_gradient2() to select custom colors. \nMake the same plot as above for year 2056. Compare the two plots. How will the sunlight change across stations and months?",
    "crumbs": [
      "Course Material",
      "Exercises 🏋🏽",
      "Exercise 3: ggplot2"
    ]
  },
  {
    "objectID": "Exercises/exercise3.html#footnotes",
    "href": "Exercises/exercise3.html#footnotes",
    "title": "Exercise 3: ggplot2",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nContains public sector information licensed under the Open Government Licence v3.0.↩︎",
    "crumbs": [
      "Course Material",
      "Exercises 🏋🏽",
      "Exercise 3: ggplot2"
    ]
  },
  {
    "objectID": "Exercises/exercise4_PART2.html",
    "href": "Exercises/exercise4_PART2.html",
    "title": "Exercise 4, part 2: Applied Statistics in R",
    "section": "",
    "text": "This part might be easier to follow from the Quarto document. You will use the following exercise4_PART2.qmd file. Please clink on the link, download and open the file in your RStudio.\nExcept for the last two parts, this exercise is about analysis with so-called Gaussian linear models. This is the class of models where data points are assumed to be independent, Gaussian (i.e. with a normal distribution) and with the same variance. All such models are fitted with the lm function in R, like so:\nlm(y~x, data = my.data)\nThe term regression is usually used for models where all explanatory variables are numerical, whereas the term analysis of variance (ANOVA) is usually used for models where all explanatory variables are categorical (i.e. factors). However, predictors of both types can be included in the same Gaussian linear model. In the end, we are also concerned with logistic regression models (for binary outcomes e.g. cases vs. controls) and linear mixed models (for data with a block structure).\nThe purpose of this exercise is to show how to fit and work with statistical models in R. This means that the analyses are not necessarily those that should be used in a real-life analysis of the data.\nStart with the Data part. The later parts are almost independent of each other, so you can choose the parts that are most appropriate for you. However, not all statistical concepts are studied in all the parts present.\n\nData\nThe dataset to be used is about risk factors associated with low infant birth weight. The data are available in the R-package MASS (part of base R, so it is installed automatically) as a data frame called birthwt. If nothing else is mentioned, then use the infants’s birth weight, bwt, as outcome (response).\n\nUse the commands below to load the MASS package and get the help page for the data frame. The help page will appear in the lower right window of RStudio. Read about the data; in particular about the variables age, lwt, ftv, smoke, and bwt.\n\n\nlibrary(MASS)\n?birthwt\n\n\nbirthwt is not a tibble (the modern way to organize data), but we can make it one:\n\n\nlibrary(tidyverse)    \nbirthData &lt;- as_tibble(birthwt)\nbirthData\n\n\nMother’s smoking habits (smoke) is coded as numerical variable. Make it a factor (categorical variable).\nThe ftv is a numerical variable, but we would also like a categorical version of it, with groups corresponding to zero visits, one visit, and two or more visits, respectively. Try the following commands, and check the results:\n\n\ntable(birthData$ftv)\nbirthData &lt;- mutate(birthData, ftvFac = factor(ftv))\nbirthData &lt;- mutate(birthData, visits = fct_collapse(ftvFac, Never=\"0\", Once=\"1\", other_level=\"MoreThanOnce\"))\nsummary(birthData)\n\n\nMake groupwise boxplots of bwt by visits, i.e., boxplots of birth weight for those women who did not see their doctor, those who saw their doctor once, and those who saw their doctor more than once during the first trimester - all boxplots in one graph. Do the same thing for smoke (instead of visits).\nYou may also make groupwise boxplots for each combination of smoke and visits. You add a combination term with a :, e.g. smoke:visits. What is your initial impression about potential associations?\nMake a scatterplot with lwt on the \\(x\\)-axis and bwt on the \\(y\\)-axis. Modify the plot such that points are coloured according to visits.\nModify it further such that the symbol types are different for smokers and non-smokers. This is done by adding pch=smoke.\n\n\n\nRegression\nThe term regression is usually used for models where all explanatory variables are numerical.\nIf you are not too familiar with linear regression, you can have a look at what the summary() output means here and for understanding regression plot(), have a look here.\n\nFit a linear regression model with bwt as response and lwt as covariate, and identify the estimates for the intercept and for the slope. Find the 95% confidence interval for the slope parameter by using the confint() function.\nJust by calling plot() on your regression model you made you can carry out model validation. Does the model seem appropriate for the data?\nFit the multiple linear regression model where you include lwt as well as age and ftv (numerical variables) as covariates. Identify the parameter estimates, and consider what their interpretation is.\nTry the following commands, and see if you can figure out what the outcome means. You should replace reg2 with the name of the model object from the previous question.\n\n\n\nnewData &lt;- data.frame(lwt=100, age=25, ftv=0)\nnewData\npredict(reg2, newData)\npredict(reg2, newData, interval=\"prediction\")\n\n\nFit the multiple linear regression model again, but now only using data from mothers with a weight less than 160 pounds (lwt &lt; 160). Hint: Use the filter function and change the data argument in the lm command.\n\n\n\nANOVA\nThe term analysis of variance (ANOVA) is usually used for models where all explanatory variables are categorical (factors). It is important that you have coded smoke as a factor, cf. Question 3.\nFirst, install and load the R-package emmeans.\n\nlibrary(emmeans)    \n\nWelcome to emmeans.\nCaution: You lose important information if you filter this package's results.\nSee '? untidy'\n\n\n\nFit the oneway ANOVA (with lm) where the expected value of bwt is allowed to differ between smokers and non-smokers. Find the estimated birth weight for infants from smokers as well as non-smokers. Is there significant difference between smokers and non-smokers when it comes to infant’s birth weight? Hints: Use summary() and the emmeans() function from the emmeans R-package. N.B make sure you know what needs to go into the function, use ?.\nFit the oneway ANOVA where you use visits as the explanatory variable. Find the estimated birth weight for each group, and make the pairwise comparisons between the groups. Furthermore, carry out the \\(F\\)-test for the overall comparison of the three levels.\nHint drop1(, test=\"F\"). What is the conclusion?\nNow, consider both visits and smoke as explanatory variables. Since they are both categorical variables (factors), the relevant model is a twoway ANOVA. Fit the twoway ANOVA model without interaction, and make sure you understand the estimates:\n\n\ntwoway1 &lt;- lm(bwt ~ visits + smoke, data=birthData)\nsummary(twoway1)\n\n\nFit the twoway ANOVA model with interaction (use the command below). Then use anova and/or drop1 to test if the interaction between visits and smoking habits is statistically significant.\n\n\ntwoway2 &lt;- lm(bwt ~ visits * smoke, data=birthData)\n\n\nYou should still use twoway2 in for this question. Use emmeans to compute the expected birth weight of infants for smokers and non-smokers, respectively, on average over the three levels of visits.\n\n\n\nModels with numerical as well as categorical predictors\nPredictors of any type can be included in Gaussian linear models, still using lm.\n\nFit a model where lwt (numeric) and smoke (factor) are included as predictors in an additive way:\n\n\nmodel1 &lt;- lm(bwt ~ lwt + smoke, data=birthData)\nsummary(model1)\n\nWhat is the interpretation of the estimates?\n\nFit a model with interaction between the two predictors, replacing + by a *:\n\n\nmodel2 &lt;- lm(bwt ~ lwt * smoke, data=birthData)\nsummary(model2)\n\nWhat is the interpretation of the estimates? Is there evidence in the data that the effect of mother’s weight on infant’s weight differs between smokers and non-smokers? Hint: What does the last question have to do with interaction? Use anova on appropriate models.\n\nFit the model with additive effects of mothers’s weight, smoking status, age, and visit status, and carry out model validation. Give an interpretation of the estimate associated to smoke. Does smoking affect the weight of infants?\n\n\n\nLogistic regression\nThe variable low is 1 if birth weight is less than 2500 g, and 0 if birth weight is larger than 2500g, see the plot\n\nggplot(birthData, aes(x=bwt, y=low)) + geom_point()\n\nConsider for a moment the situation where the actual birth weight (bwt) was not registered, such that low was the only information on the child. Hence, the outcome is binary (low has two values), and the relevant analysis would be a logistic regression where the probablity \\(Pr(low=1)\\) is described in terms of predictors. For example, we may consider a model with mothers’s weight, smoking status, age, and visit status as predictors, just like in the previous question.\n\nFit the model, and consider the estimates:\n\n\nlogreg1 &lt;- glm(low ~ lwt + smoke + age + visits, data=birthData, family=\"binomial\")\nsummary(logreg1)\n\nDoes this model give evidence for an effect of smoking on the weight of infants? Compare the signs of the estimates from model3 (Gaussian model in the solution for Question 18) and logreg1 (logistic regression model). Can you explain ‘what happens’?\n\n\nLinear mixed models\n\nAssume for a moment that the 189 births took place at 19 different medical centers with 10 births at each center, except for one center with only nine births. This is not the case, so we have to generate a center variable artificially. You should of course never invent such an artificial structure for a real dataset! Anyway, let’s do it like this:\n\n\nset.seed(123)\ncenter &lt;- sample(rep(1:19, each=10)[1:189])\ncenter\nbirthData &lt;- mutate(birthData,center=factor(center))\n\nThe rep command repeats the number from 1 to 19, 10 times each. We only need the first 189 numbers. The sample changes the order of the 189 numbers at random. The set.seed command has the effect that you get the same sample each time you run the commands. The last line includes the new variable in the original dataset as a categorical variable.\n\nThe center variable would typically be included in the model as a random effect. Gaussian models with both fixed and random effects are called linear mixed models, and are fitted with the lmer function from the lme4 package. Run the code below and identify relevant estimates. Remember that lme4 must be installed before the commands below can be used.\n\n\nlibrary(lme4)\nlmm1 &lt;- lmer(bwt ~ lwt + smoke + age + visits + (1|center), data=birthData)\nsummary(lmm1)",
    "crumbs": [
      "Course Material",
      "Exercises 🏋🏽",
      "Exercise 4, Part 2: Applied Statistics"
    ]
  },
  {
    "objectID": "Presentations/data.html",
    "href": "Presentations/data.html",
    "title": "Data",
    "section": "",
    "text": "DOWNLOAD DATA  \n\nAfter download, unzip the data folder and place it somewhere you can find it again.",
    "crumbs": [
      "Course Material",
      "Data 🗂️"
    ]
  },
  {
    "objectID": "Presentations/data.html#download-data",
    "href": "Presentations/data.html#download-data",
    "title": "Data",
    "section": "",
    "text": "DOWNLOAD DATA  \n\nAfter download, unzip the data folder and place it somewhere you can find it again.",
    "crumbs": [
      "Course Material",
      "Data 🗂️"
    ]
  },
  {
    "objectID": "Presentations/data.html#download-presentations",
    "href": "Presentations/data.html#download-presentations",
    "title": "Data",
    "section": "Download presentations",
    "text": "Download presentations\nIt can be nice to follow along the presentation scripts as we go through them.\n\n  DOWNLOAD PRESENTATIONS",
    "crumbs": [
      "Course Material",
      "Data 🗂️"
    ]
  },
  {
    "objectID": "Presentations/presentation3.html",
    "href": "Presentations/presentation3.html",
    "title": "Presentation 3: ggplot2",
    "section": "",
    "text": "library(readxl)\nlibrary(writexl)\nlibrary(tidyverse)",
    "crumbs": [
      "Course Material",
      "Presentations 👩🏽‍🏫",
      "Presentation 3: ggplot2"
    ]
  },
  {
    "objectID": "Presentations/presentation3.html#importing-libraries-and-data",
    "href": "Presentations/presentation3.html#importing-libraries-and-data",
    "title": "Presentation 3: ggplot2",
    "section": "",
    "text": "library(readxl)\nlibrary(writexl)\nlibrary(tidyverse)",
    "crumbs": [
      "Course Material",
      "Presentations 👩🏽‍🏫",
      "Presentation 3: ggplot2"
    ]
  },
  {
    "objectID": "Presentations/presentation3.html#load-data",
    "href": "Presentations/presentation3.html#load-data",
    "title": "Presentation 3: ggplot2",
    "section": "Load data",
    "text": "Load data\nThe iris dataset is a widely-used dataset in data science, containing 150 observations of iris flowers with features like sepal length, sepal width, petal length, and petal width. It includes three species: Setosa, Versicolor, and Virginica, making it ideal for classification tasks and data visualization.\n\ndata('iris')\nhead(iris)\n\n  Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n1          5.1         3.5          1.4         0.2  setosa\n2          4.9         3.0          1.4         0.2  setosa\n3          4.7         3.2          1.3         0.2  setosa\n4          4.6         3.1          1.5         0.2  setosa\n5          5.0         3.6          1.4         0.2  setosa\n6          5.4         3.9          1.7         0.4  setosa",
    "crumbs": [
      "Course Material",
      "Presentations 👩🏽‍🏫",
      "Presentation 3: ggplot2"
    ]
  },
  {
    "objectID": "Presentations/presentation3.html#data-wrangling",
    "href": "Presentations/presentation3.html#data-wrangling",
    "title": "Presentation 3: ggplot2",
    "section": "Data wrangling",
    "text": "Data wrangling\nMaking the data more fun to plot.\n\n# Define 5 colors and their respective ratios\ncolors &lt;- c(rep(\"Red\", 40), \n            rep(\"Blue\", 20), \n            rep(\"Yellow\",30), \n            rep(\"Green\", 20),\n            rep(\"Purple\",40))\n\nset.seed(123)  # For reproducibility\n\n# Shuffle the colors to mix them randomly\ncolors &lt;- sample(colors, replace = TRUE)\n\n# Add the 'Flower.Color' column to the iris dataset\niris$Flower.Color &lt;- colors\n\n\nHave a look at the dataset\n\nhead(iris)\n\n  Sepal.Length Sepal.Width Petal.Length Petal.Width Species Flower.Color\n1          5.1         3.5          1.4         0.2  setosa          Red\n2          4.9         3.0          1.4         0.2  setosa         Blue\n3          4.7         3.2          1.3         0.2  setosa       Purple\n4          4.6         3.1          1.5         0.2  setosa         Blue\n5          5.0         3.6          1.4         0.2  setosa          Red\n6          5.4         3.9          1.7         0.4  setosa       Purple\n\ncolnames(iris)\n\n[1] \"Sepal.Length\" \"Sepal.Width\"  \"Petal.Length\" \"Petal.Width\"  \"Species\"     \n[6] \"Flower.Color\"",
    "crumbs": [
      "Course Material",
      "Presentations 👩🏽‍🏫",
      "Presentation 3: ggplot2"
    ]
  },
  {
    "objectID": "Presentations/presentation3.html#ggplot2-the-basic-concepts",
    "href": "Presentations/presentation3.html#ggplot2-the-basic-concepts",
    "title": "Presentation 3: ggplot2",
    "section": "ggplot2: The basic concepts",
    "text": "ggplot2: The basic concepts\nThis is the starting point of a ggplot. The dataframe and the columns we wish to plot are defined. We have not specified what type of plot we want, hence an empty plot is produced.\n\nggplot(iris,                    # dataframe \n       aes(x = Sepal.Length,    # x-value\n           y = Petal.Length))   # y-value\n\n\n\n\n\n\n\n                                # missing type of plot",
    "crumbs": [
      "Course Material",
      "Presentations 👩🏽‍🏫",
      "Presentation 3: ggplot2"
    ]
  },
  {
    "objectID": "Presentations/presentation3.html#scatter-plot-with-geom_point",
    "href": "Presentations/presentation3.html#scatter-plot-with-geom_point",
    "title": "Presentation 3: ggplot2",
    "section": "Scatter plot with geom_point",
    "text": "Scatter plot with geom_point\nA scatter plot is made with the geom_point function and is used to get an overview over the relationship between two numeric variables. Here we see the relationship between sepal length and width.\n\nggplot(iris,                    # dataframe \n       aes(x = Sepal.Length,    # x-value\n           y = Petal.Length)) + # y-value\n  geom_point()                  # type of plot\n\n\n\n\n\n\n\n\nChange color of entire plot by setting it outside aes().\n\nggplot(iris,                    \n       aes(x = Sepal.Length,    \n           y = Petal.Length)) + \n  geom_point(color = 'hotpink')",
    "crumbs": [
      "Course Material",
      "Presentations 👩🏽‍🏫",
      "Presentation 3: ggplot2"
    ]
  },
  {
    "objectID": "Presentations/presentation3.html#scatter-plot-with-geom_point-with-color-stratification",
    "href": "Presentations/presentation3.html#scatter-plot-with-geom_point-with-color-stratification",
    "title": "Presentation 3: ggplot2",
    "section": "Scatter plot with geom_point with color stratification",
    "text": "Scatter plot with geom_point with color stratification\nTo change colors based on a feature, you need to set it inside aes(). Here we see the relationship between sepal length and width colored by species.\n\nggplot(iris,                   \n       aes(x = Sepal.Length,   \n           y = Petal.Length,     \n           color = Species)) +  \n  geom_point()",
    "crumbs": [
      "Course Material",
      "Presentations 👩🏽‍🏫",
      "Presentation 3: ggplot2"
    ]
  },
  {
    "objectID": "Presentations/presentation3.html#boxplot-with-geom_boxplot",
    "href": "Presentations/presentation3.html#boxplot-with-geom_boxplot",
    "title": "Presentation 3: ggplot2",
    "section": "Boxplot with geom_boxplot",
    "text": "Boxplot with geom_boxplot\nBoxplots are great to get an overview of continues variables and spot outliers. Can be shown on either axis (x and y).\n\nggplot(iris,                    \n       aes(y = Sepal.Length)) + \n  geom_boxplot() \n\n\n\n\n\n\n\n\nSplit up by categorical variable like Species:\n\nggplot(iris,                    \n       aes(y = Sepal.Length,    \n           x = Species)) +      \n  geom_boxplot()              \n\n\n\n\n\n\n\n\n… or color.\n\nggplot(iris,                    \n       aes(y = Sepal.Length,    \n           fill = Species)) +  \n  geom_boxplot()",
    "crumbs": [
      "Course Material",
      "Presentations 👩🏽‍🏫",
      "Presentation 3: ggplot2"
    ]
  },
  {
    "objectID": "Presentations/presentation3.html#violin-plot-with-geom_violin",
    "href": "Presentations/presentation3.html#violin-plot-with-geom_violin",
    "title": "Presentation 3: ggplot2",
    "section": "Violin plot with geom_violin",
    "text": "Violin plot with geom_violin\nA violin plot shows the distribution of a continuous variable across different categories, combining the features of a box plot and a density plot. Also, the labels can be edited.\n\nggplot(iris,                    \n       aes(y = Sepal.Length,    \n           x = Species)) +      \n  geom_violin() + \n  labs(y = 'Sepal Length', \n       x = 'Flower Species', \n       title = 'Violin plot of sepal length stratisfied by flower species')",
    "crumbs": [
      "Course Material",
      "Presentations 👩🏽‍🏫",
      "Presentation 3: ggplot2"
    ]
  },
  {
    "objectID": "Presentations/presentation3.html#histogram-with-geom_histogram",
    "href": "Presentations/presentation3.html#histogram-with-geom_histogram",
    "title": "Presentation 3: ggplot2",
    "section": "Histogram with geom_histogram",
    "text": "Histogram with geom_histogram\nHistogram shows the distribution of a continuous variable.\n\nggplot(iris,                    \n       aes(x = Sepal.Length)) +     \n  geom_histogram()\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n\n\nYou will sometimes get a message that suggests to select another binwidth. Do what is says and you will often get nicer plot (something nothing changes).\n\nggplot(iris,                    \n       aes(x = Sepal.Length)) +     \n  geom_histogram(binwidth = 0.5)",
    "crumbs": [
      "Course Material",
      "Presentations 👩🏽‍🏫",
      "Presentation 3: ggplot2"
    ]
  },
  {
    "objectID": "Presentations/presentation3.html#bar-chart-with-geom_bar",
    "href": "Presentations/presentation3.html#bar-chart-with-geom_bar",
    "title": "Presentation 3: ggplot2",
    "section": "Bar chart with geom_bar",
    "text": "Bar chart with geom_bar\nA bar chart is made with the geom_bar function and is used to get an overview over the distribution of a single categorical variable, e.g. Flower.Color in this instance. The function treats the x-axis as categorical and calculates the bar heights based on the number of occurrences in each category. Here we see the number of flowers of each Flower.Color. Notice that the Flower.Colors are sorted alphabetically.\n\n# Save plot in p\np &lt;- ggplot(iris,                    \n            aes(x = Flower.Color)) + \n  geom_bar()                         \n\n# Show p\np\n\n\n\n\n\n\n\n# Show p with new labels \np + labs(x = 'Awesome Flower Colors', y = 'Awesome Count')\n\n\n\n\n\n\n\n# Show p again\np\n\n\n\n\n\n\n\n# Save p with new lables in p (overwrite / reassign)\np2 &lt;- p + labs(x = 'Awesome Flower Colors', y = 'Awesome Count')\n\n# Show p2\np2\n\n\n\n\n\n\n\n\nColor by species. The bars are stacked by default.\n\nggplot(iris,                    \n       aes(x = Flower.Color,   \n           fill = Species)) +   \n  geom_bar()                   \n\n\n\n\n\n\n\n\nAdd position = \"dodge\" for bars to be placed next to each other.\n\nggplot(iris,                   \n      aes(x = Flower.Color,    \n          fill = Species)) +   \n  geom_bar(position = \"dodge\") \n\n\n\n\n\n\n\n\nAdd position = \"fill\" for bars to be normalized such that heights of the bars to represent percentages rather than counts.\nAdditionally, themes can be added as a layer to any ggplot if you prefer a theme other than the default grey background.\n\nggplot(iris,                   \n      aes(x = Flower.Color,   \n          fill = Species)) +   \n  geom_bar(position = \"fill\") + \n  theme_bw()\n\n\n\n\n\n\n\n  # theme_classic()  \n  # theme_minimal()\n  # theme_dark()\n\nUsing facet_wrap if you want a plot to be split up according to a categorical variable.\n\nggplot(iris,                   \n      aes(x = Flower.Color)) +\n  geom_bar()  + \n  facet_wrap(vars(Species))",
    "crumbs": [
      "Course Material",
      "Presentations 👩🏽‍🏫",
      "Presentation 3: ggplot2"
    ]
  },
  {
    "objectID": "Presentations/presentation3.html#ordering-columns",
    "href": "Presentations/presentation3.html#ordering-columns",
    "title": "Presentation 3: ggplot2",
    "section": "Ordering columns",
    "text": "Ordering columns\nWe can order the columns such that the count goes from lowest to highest. This is actually not that easy in R.\nFirst, we see that the class of the Flower.Color is character. Characters are always sorted alphabetically like we saw above.\n\nclass(iris$Flower.Color)\n\n[1] \"character\"\n\n\nExtract the number of flowers for each Flower.Color.\n\ndl_Flower.Color &lt;- iris %&gt;%\n  group_by(Flower.Color) %&gt;%\n  summarise(n = n()) %&gt;% \n  arrange(desc(n))\n\ndl_Flower.Color\n\n# A tibble: 5 × 2\n  Flower.Color     n\n  &lt;chr&gt;        &lt;int&gt;\n1 Red             44\n2 Yellow          33\n3 Purple          30\n4 Green           22\n5 Blue            21\n\ndl_Flower.Color$Flower.Color\n\n[1] \"Red\"    \"Yellow\" \"Purple\" \"Green\"  \"Blue\"  \n\n\nChange the class of the Flower.Color feature to factor and add levels according to the number of flowers with each color.\n\niris$Flower.Color &lt;- factor(iris$Flower.Color,\n                            levels = dl_Flower.Color$Flower.Color)\n\nCheck class now\n\nclass(iris$Flower.Color)\n\n[1] \"factor\"\n\n\nNow we do the same plot as before and we see that the order has changed to range from largest to smallest Flower.Colors group. The plot is saved in the variable p.\n\np &lt;- ggplot(iris,                # dataframe \n       aes(x = Flower.Color)) +  # x-value\n  geom_bar()                     # type of plot \n\np\n\n\n\n\n\n\n\n\nWe can also flip the chart. We update the plot, p, be reassignment.\n\np &lt;- p + coord_flip()\n\np\n\n\n\n\n\n\n\n\nSince we are working with colors, we can change the colors of the bars to match the groups.\nR color chart here\n\n# Define color palette\ncolor_palette &lt;- c(\"Red\" = \"red3\", \n                   \"Blue\" = \"cornflowerblue\", \n                   \"Yellow\" = \"lightgoldenrod1\", \n                   \"Green\" = \"darkolivegreen2\", \n                   \"Purple\" = \"darkorchid3\")\n\np &lt;- p + \n  aes(fill = Flower.Color) +                # add the fill ascetics \n  scale_fill_manual(values = color_palette) # set the fill color according to the color palette\n\nprint(p)",
    "crumbs": [
      "Course Material",
      "Presentations 👩🏽‍🏫",
      "Presentation 3: ggplot2"
    ]
  },
  {
    "objectID": "Presentations/presentation3.html#bar-chart-with-geom_col",
    "href": "Presentations/presentation3.html#bar-chart-with-geom_col",
    "title": "Presentation 3: ggplot2",
    "section": "Bar chart with geom_col",
    "text": "Bar chart with geom_col\nAnother way to make a bar chart is by using geom_col. Unlike geom_bar, which only requires an x-value and automatically counts occurrences, geom_col requires both x- and y-values. This makes geom_col ideal for cases where you already have pre-calculated values that you want to use as the bar heights.\nThe mean of the sepal length within each color is calcualted using the summarize function.\n\nmean_sepal_length_pr_color &lt;- iris %&gt;%\n  group_by(Flower.Color) %&gt;%\n  summarize(mean_Sepal.Length = mean(Sepal.Length))\n\nhead(mean_sepal_length_pr_color)\n\n# A tibble: 5 × 2\n  Flower.Color mean_Sepal.Length\n  &lt;fct&gt;                    &lt;dbl&gt;\n1 Red                       5.88\n2 Yellow                    5.89\n3 Purple                    5.91\n4 Green                     5.65\n5 Blue                      5.79\n\n\n\nggplot(mean_sepal_length_pr_color,   # dataframe \n       aes(x = Flower.Color,         # x-value\n           y = mean_Sepal.Length)) + # y-value\n  geom_col()                         # type of plot",
    "crumbs": [
      "Course Material",
      "Presentations 👩🏽‍🏫",
      "Presentation 3: ggplot2"
    ]
  },
  {
    "objectID": "Presentations/presentation1B.html",
    "href": "Presentations/presentation1B.html",
    "title": "Presentation 1B: Introduction to R",
    "section": "",
    "text": "Quarto is an open-source publishing suite - a tool-suite that supports workflows for reproducible scholarly writing and publishing.\nQuarto documents often begin with a YAML header demarcated by three dashes (---) which specifies things about the document. This includes what type of documents to render (compile) to e.g. HTML, PDF, WORD and whether it should be published to a website project. You can also add information on project title, author, default editor, etc.",
    "crumbs": [
      "Course Material",
      "Presentations 👩🏽‍🏫",
      "Presentation 1B: Introduction to R"
    ]
  },
  {
    "objectID": "Presentations/presentation1B.html#modes-of-quarto-document",
    "href": "Presentations/presentation1B.html#modes-of-quarto-document",
    "title": "Presentation 1B: Introduction to R",
    "section": "Modes of Quarto Document",
    "text": "Modes of Quarto Document\nThere are two modes of Quarto: Source and Visual. In the left part of the panel you can change between the two modes.\nSome features can only be added when you are in Source mode. E.g write blue text is coded like this in the source code [write blue text]{style=\"color:blue\"}.",
    "crumbs": [
      "Course Material",
      "Presentations 👩🏽‍🏫",
      "Presentation 1B: Introduction to R"
    ]
  },
  {
    "objectID": "Presentations/presentation1B.html#code-chunks-and-structure",
    "href": "Presentations/presentation1B.html#code-chunks-and-structure",
    "title": "Presentation 1B: Introduction to R",
    "section": "Code chunks and structure",
    "text": "Code chunks and structure\nCode chunks are where the code is added to the document.\nClick the green button +c and a grey code chunk will appear with '{r}' in the beginning. This means that it is an R code chunk. It is also possible to insert code chunks of other coding language.\n\nFor executing the code, press the Run button in the top right of the chunk to evaluate the code.\nsome executable code in an R code chunk.\n\n1+3\n\n[1] 4\n\n\nBelow is a code chunk with a comment. A comment is a line that starts with a hashtag. Comments can be useful in longer code chunks and will often describe the code.\n\n# This is a comment. Here I can write whatever I want because it is in hashtags. \n\nYou can add comments above or to the right of the code. This will not influence the executing of the code.\n\n# Place a comment here \n1+3 # or place a comment here\n\n[1] 4",
    "crumbs": [
      "Course Material",
      "Presentations 👩🏽‍🏫",
      "Presentation 1B: Introduction to R"
    ]
  },
  {
    "objectID": "Presentations/presentation1B.html#output-of-code-chunks",
    "href": "Presentations/presentation1B.html#output-of-code-chunks",
    "title": "Presentation 1B: Introduction to R",
    "section": "Output of code chunks",
    "text": "Output of code chunks\nControl whether code is executed.\neval=FALSE not execute the code and eval=TRUE will execute the code.\nThe code is shown, but the result is not shown ({r, echo=TRUE, eval=FALSE}):\n\n1+3\n\nShow or hide code. echo=FALSE will hide the code and echo=TRUE will show the code. Default is TRUE.\nThe code is not shown, but the result is shown ({r, echo=FALSE, eval=TRUE}):\n\n\n[1] 4\n\n\nControl messages, warnings and errors. Maybe you have a code chunk that you know will produce one of the three and you often don’t want to see it in the compiled document. N.B! It is not a good idea to hide these statements (especially the errors) before you know what they are.\nWarning is not printed ({r, message=FALSE, warning=FALSE, error=TRUE}):\n\nlog(-1)\n\n[1] NaN\n\n\nWarning is printed ({r message=TRUE, warning=TRUE, error=TRUE}):\n\nlog(-1)\n\nWarning in log(-1): NaNs produced\n\n\n[1] NaN",
    "crumbs": [
      "Course Material",
      "Presentations 👩🏽‍🏫",
      "Presentation 1B: Introduction to R"
    ]
  },
  {
    "objectID": "Presentations/presentation1B.html#render-making-the-report",
    "href": "Presentations/presentation1B.html#render-making-the-report",
    "title": "Presentation 1B: Introduction to R",
    "section": "Render: Making the report",
    "text": "Render: Making the report\nIn the panel there is a blue arrow and the word Render. Open the rendered html file in your browser and admire your work.\nLet’s get to coding!",
    "crumbs": [
      "Course Material",
      "Presentations 👩🏽‍🏫",
      "Presentation 1B: Introduction to R"
    ]
  },
  {
    "objectID": "Presentations/presentation1B.html#r-packages",
    "href": "Presentations/presentation1B.html#r-packages",
    "title": "Presentation 1B: Introduction to R",
    "section": "R packages",
    "text": "R packages\nR packages are collections of functions written by R developers and super users and they make our lives much easier. Functions used in the same type of R analysis/pipeline are bundled and organized in packages. There is a help page for each package to tell us which functions it contains and which arguments go into these. In order to use a package we need to download and install it on our computer. Most R packages are stored and maintained on the CRAN[https://cran.r-project.org/mirrors.html%5D repository.\nInstall a package\n\n# install.packages('tidyverse')\n\nLoad packages\n\nlibrary(tidyverse)\n\nQuery package\n\n?tidyverse\n\nQuery function from package\n\n?dplyr::select",
    "crumbs": [
      "Course Material",
      "Presentations 👩🏽‍🏫",
      "Presentation 1B: Introduction to R"
    ]
  },
  {
    "objectID": "Presentations/presentation1B.html#slideshow-intermezzo",
    "href": "Presentations/presentation1B.html#slideshow-intermezzo",
    "title": "Presentation 1B: Introduction to R",
    "section": "Slideshow Intermezzo",
    "text": "Slideshow Intermezzo",
    "crumbs": [
      "Course Material",
      "Presentations 👩🏽‍🏫",
      "Presentation 1B: Introduction to R"
    ]
  },
  {
    "objectID": "Presentations/presentation1B.html#data-structures",
    "href": "Presentations/presentation1B.html#data-structures",
    "title": "Presentation 1B: Introduction to R",
    "section": "Data structures",
    "text": "Data structures\nIn the example below we will make two vectors into a tibble. Tibbles are the R object types you will mainly be working with in this course. We will try to convert between data types and structures using the collection of ‘as.’ functions.\nA vector of characters\n\npeople &lt;- c(\"Anders\", \"Diana\", \"Tugce\", \"Henrike\", \"Chelsea\", \"Valentina\", \"Thilde\", \"Helene\")\npeople\n\n[1] \"Anders\"    \"Diana\"     \"Tugce\"     \"Henrike\"   \"Chelsea\"   \"Valentina\"\n[7] \"Thilde\"    \"Helene\"   \n\n\nA vector of numeric values\n\njoined_year &lt;- c(2019, 2020, 2020, 2021, 2023, 2022, 2020, 2024)\njoined_year\n\n[1] 2019 2020 2020 2021 2023 2022 2020 2024\n\n\nAccess data type or structure with the class() function\n\nclass(people)\n\n[1] \"character\"\n\nclass(joined_year)\n\n[1] \"numeric\"\n\n\nConvert joined_year to character values\n\njoined_year &lt;- as.character(joined_year)\njoined_year\n\n[1] \"2019\" \"2020\" \"2020\" \"2021\" \"2023\" \"2022\" \"2020\" \"2024\"\n\nclass(joined_year)\n\n[1] \"character\"\n\n\nConvert joined_year back to numeric values\n\njoined_year &lt;- as.numeric(joined_year)\njoined_year\n\n[1] 2019 2020 2020 2021 2023 2022 2020 2024\n\n\nConvert classes with the ‘as.’ functions\n\n# as.numeric()\n# as.integer()\n# as.character()\n# as.factor()\n# ...\n\nLet’s make a tibble from two vectors\n\nmy_data &lt;- tibble(name = people, \n                  joined_year = joined_year)\n\nmy_data\n\n# A tibble: 8 × 2\n  name      joined_year\n  &lt;chr&gt;           &lt;dbl&gt;\n1 Anders           2019\n2 Diana            2020\n3 Tugce            2020\n4 Henrike          2021\n5 Chelsea          2023\n6 Valentina        2022\n7 Thilde           2020\n8 Helene           2024\n\nclass(my_data)\n\n[1] \"tbl_df\"     \"tbl\"        \"data.frame\"\n\n\nJust like you can convert between different data types, you can convert between data structures/objects.\nConvert tibble to dataframe\n\nmy_data2 &lt;- as.data.frame(my_data)\nclass(my_data2)\n\n[1] \"data.frame\"\n\n\nConvert classes with the ‘as.’ functions\n\n# as.data.frame()\n# as.matrix()\n# as.list()\n# as.table()\n# ...\n# as_tibble()",
    "crumbs": [
      "Course Material",
      "Presentations 👩🏽‍🏫",
      "Presentation 1B: Introduction to R"
    ]
  },
  {
    "objectID": "Presentations/presentation1B.html#fundamental-operations",
    "href": "Presentations/presentation1B.html#fundamental-operations",
    "title": "Presentation 1B: Introduction to R",
    "section": "Fundamental operations",
    "text": "Fundamental operations\nYou can inspect an R objects in different ways:\n1. Simply call it and it will be printed to the console. 2. With large object it is preferable to use `head()` or `tail()` to only see the first or last part. 3. To see the data in a tabular excel style format you can use `view()`\nRemove something:\n\nrm(a)\n\nWarning in rm(a): objekt 'a' blev ikke fundet\n\n\nLook at the “head” of an object:\n\nhead(my_data, n = 4)\n\n# A tibble: 4 × 2\n  name    joined_year\n  &lt;chr&gt;         &lt;dbl&gt;\n1 Anders         2019\n2 Diana          2020\n3 Tugce          2020\n4 Henrike        2021\n\n\nOpen up tibble as a table (Excel style):\n\nview(my_data)\n\ndim(), short for dimensions, which returns the number of rows and columns of an R object:\n\ndim(my_data)\n\n[1] 8 2\n\n\nLook at a single column from a tibble using the ‘$’ symbol:\n\nmy_data$joined_year\n\n[1] 2019 2020 2020 2021 2023 2022 2020 2024",
    "crumbs": [
      "Course Material",
      "Presentations 👩🏽‍🏫",
      "Presentation 1B: Introduction to R"
    ]
  },
  {
    "objectID": "Solutions/exercise2_SOLUTIONS.html",
    "href": "Solutions/exercise2_SOLUTIONS.html",
    "title": "Exercise 2: Tidyverse - Solutions",
    "section": "",
    "text": "Create new Quarto document. For working on the exercise, create a new Quarto document with a descriptive name and save it where you can find it again, i.e. in the folder where you downloaded the teaching material. You can use the commands shown in presentation2.qmd to solve this exercise. There is no shame in outright copying from the presentation2.qmd script, provided you understand what the command is doing.\nLoad packages. You will need to load the packages tidyverse and readxl for this exercise.\n\n\nlibrary(tidyverse)\nlibrary(readxl)",
    "crumbs": [
      "Course Material",
      "Solutions 💃🏻",
      "Exercise 2 - Solution"
    ]
  },
  {
    "objectID": "Solutions/exercise2_SOLUTIONS.html#optional-section",
    "href": "Solutions/exercise2_SOLUTIONS.html#optional-section",
    "title": "Exercise 2: Tidyverse - Solutions",
    "section": "Optional section",
    "text": "Optional section\nIf you went through the exercises above and are ready for more challenges - you have come to the right place. You have not learn all the operations you are asked to do, so feel free to search for help online. If you are a bit overwhelmed and need a break, by all means chill!\nLet’s simulate some climate data for year 2056 and merge it with the original climate data set from 2016.\n\nclimate_fake &lt;- climate\n\nclimate_fake$year &lt;- 2056\nset.seed(101)\nclimate_fake$af &lt;- sample(0:11, nrow(climate_fake), replace = TRUE)\nclimate_fake$rain &lt;- rnorm(nrow(climate_fake), mean = mean(climate$rain)+150, sd = sd(climate$rain)+50)\nclimate_fake$sun &lt;- rnorm(nrow(climate_fake), mean = mean(climate$sun), sd = sd(climate$sun))\nclimate_fake$device &lt;- paste(climate_fake$device, ', New and Improved')\n\nclimate_change &lt;- rbind(climate, climate_fake)\nhead(climate_change)\n\n# A tibble: 6 × 7\n  station  year month    af  rain   sun device         \n  &lt;chr&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;          \n1 armagh   2016     1     5 132.   44.5 Campbell Stokes\n2 armagh   2016     2    10  62.6  71.3 Campbell Stokes\n3 armagh   2016     3     4  43.8 117.  Campbell Stokes\n4 armagh   2016     4     5  54   140.  Campbell Stokes\n5 armagh   2016     5     0  41.4 210.  Campbell Stokes\n6 armagh   2016     6     0  75.1 114.  Campbell Stokes\n\n\n\nChange the station names to begin with capital letters.\n\n\nclimate_change &lt;- climate_change %&gt;% \n  mutate(station = str_to_title(station))\n\nhead(climate_change)\n\n# A tibble: 6 × 7\n  station  year month    af  rain   sun device         \n  &lt;chr&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;          \n1 Armagh   2016     1     5 132.   44.5 Campbell Stokes\n2 Armagh   2016     2    10  62.6  71.3 Campbell Stokes\n3 Armagh   2016     3     4  43.8 117.  Campbell Stokes\n4 Armagh   2016     4     5  54   140.  Campbell Stokes\n5 Armagh   2016     5     0  41.4 210.  Campbell Stokes\n6 Armagh   2016     6     0  75.1 114.  Campbell Stokes\n\n\n\nCreate a new column that contain the months in names. Could someone using R have needed the month names before you?\n\n\nclimate_change &lt;- climate_change %&gt;% \n  mutate(month_names = month.name[month])\n\nhead(climate_change)\n\n# A tibble: 6 × 8\n  station  year month    af  rain   sun device          month_names\n  &lt;chr&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;           &lt;chr&gt;      \n1 Armagh   2016     1     5 132.   44.5 Campbell Stokes January    \n2 Armagh   2016     2    10  62.6  71.3 Campbell Stokes February   \n3 Armagh   2016     3     4  43.8 117.  Campbell Stokes March      \n4 Armagh   2016     4     5  54   140.  Campbell Stokes April      \n5 Armagh   2016     5     0  41.4 210.  Campbell Stokes May        \n6 Armagh   2016     6     0  75.1 114.  Campbell Stokes June       \n\n\n\nAdd a column that tells the season of the month (Winter, Spring, Summer, Fall). Have a look at the case_when function.\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nHave a look at the case_when function.\n\n\n\n\nclimate_change &lt;- climate_change %&gt;% \n  mutate(season = case_when(month %in% c(12, 1, 2) ~ 'Winter',\n                            month %in% c(3, 4, 5) ~ 'Spring',\n                            month %in% c(6, 7, 8) ~ 'Summer',\n                            month %in% c(9, 10, 11) ~ 'Fall'\n                            )\n         )\n\nhead(climate_change)\n\n# A tibble: 6 × 9\n  station  year month    af  rain   sun device          month_names season\n  &lt;chr&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;           &lt;chr&gt;       &lt;chr&gt; \n1 Armagh   2016     1     5 132.   44.5 Campbell Stokes January     Winter\n2 Armagh   2016     2    10  62.6  71.3 Campbell Stokes February    Winter\n3 Armagh   2016     3     4  43.8 117.  Campbell Stokes March       Spring\n4 Armagh   2016     4     5  54   140.  Campbell Stokes April       Spring\n5 Armagh   2016     5     0  41.4 210.  Campbell Stokes May         Spring\n6 Armagh   2016     6     0  75.1 114.  Campbell Stokes June        Summer\n\n\n\nSummarize the mean rain fall, air frost, and sun for each year. Evaluate the results.\n\n\nclimate_change %&gt;% \n  group_by(year) %&gt;% \n  summarize(mean_rain = mean(rain), \n            mean_af = mean(af), \n            mean_sun = mean(sun)\n            )\n\n# A tibble: 2 × 4\n   year mean_rain mean_af mean_sun\n  &lt;dbl&gt;     &lt;dbl&gt;   &lt;dbl&gt;    &lt;dbl&gt;\n1  2016      75.8    1.68     114.\n2  2056     230.     6.17     111.\n\n\n\nSummarize the mean rain fall, air frost, and sun for each season and year. Compare the seasons across the years. How will the seasons be different in year 2056?\n\n\nclimate_change %&gt;% \n  group_by(season, year) %&gt;% \n  summarize(mean_rain = mean(rain), \n            mean_af = mean(af), \n            mean_sun = mean(sun)\n            )\n\n`summarise()` has grouped output by 'season'. You can override using the\n`.groups` argument.\n\n\n# A tibble: 8 × 5\n# Groups:   season [4]\n  season  year mean_rain mean_af mean_sun\n  &lt;chr&gt;  &lt;dbl&gt;     &lt;dbl&gt;   &lt;dbl&gt;    &lt;dbl&gt;\n1 Fall    2016      73.5   0.933     93.7\n2 Fall    2056     232.    5.6      102. \n3 Spring  2016      64.0   1.47     155. \n4 Spring  2056     249.    6.33     109. \n5 Summer  2016      66.0   0        147. \n6 Summer  2056     216.    6.67     122. \n7 Winter  2016      99.7   4.33      59.1\n8 Winter  2056     223.    6.07     110. \n\n\n\nSummarize the mean rain fall, air frost, and sun for each station, season and year. Is this a good way to get an overview of the weather changes?\n\n\nclimate_change %&gt;% \n  group_by(station, season, year) %&gt;% \n  summarize(mean_rain = mean(rain)) \n\n`summarise()` has grouped output by 'station', 'season'. You can override using\nthe `.groups` argument.\n\n\n# A tibble: 40 × 4\n# Groups:   station, season [20]\n   station  season  year mean_rain\n   &lt;chr&gt;    &lt;chr&gt;  &lt;dbl&gt;     &lt;dbl&gt;\n 1 Armagh   Fall    2016      47.8\n 2 Armagh   Fall    2056     191. \n 3 Armagh   Spring  2016      46.4\n 4 Armagh   Spring  2056     271. \n 5 Armagh   Summer  2016      69.4\n 6 Armagh   Summer  2056      93.6\n 7 Armagh   Winter  2016      82.0\n 8 Armagh   Winter  2056     235. \n 9 Camborne Fall    2016     115. \n10 Camborne Fall    2056     172. \n# ℹ 30 more rows\n\n\nWe can get a better overview of the weather changes from three plots. We are learning the ggplot method in the next presentation.\n\nExport your data\n\n\n# writexl::write_xlsx(DATASET, 'PATH/TO/DATASET')\nwritexl::write_xlsx(climate_change, '../../Data/climate_change.xlsx')\n\nIf you’re up for more, we can try some things that might not totally fit this dataset but will take you through some useful tidyverse operations\n\nExtract the unique stations and save it as a vector.\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nThe unlist function will convert a one-column dataframe to a vector.\n\n\n\n\nstation_unique &lt;- climate_change %&gt;% \n  select(station) %&gt;% \n  distinct() %&gt;% \n  unlist()\n\nstation_unique\n\n   station1    station2    station3    station4    station5 \n   \"Armagh\"  \"Camborne\"   \"Lerwick\"    \"Oxford\" \"Sheffield\" \n\n\n\nCount the number of A’s in each station.\n\n\nstation_unique %&gt;% str_count('A')\n\n[1] 1 0 0 0 0\n\n\n\nCount the number of A’s and a’s in each station.\n\n\nstation_unique %&gt;% str_count('A|a')\n\n[1] 2 1 0 0 0\n\n\n\nIn the climate change dataframe, add a column for each word in the device column.\n\n\nclimate_change &lt;- climate_change %&gt;% \n  mutate(device_1 = str_split_i(device, pattern = ' ', i = 1),\n         device_2 = str_split_i(device, pattern = ' ', i = 2))\n\n\nChange one of the new columns to only include lower case letter and the other to only include upper case.\n\n\nclimate_change &lt;- climate_change %&gt;% \n  mutate(device_1 = tolower(device_1),\n         device_2 = toupper(device_1))\n\n\nAdd a new columns that contains the first three letters of each month in upper case.\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nHave a look at the str_sub function.\n\n\n\n\nclimate_change &lt;- climate_change %&gt;% \n  mutate(month_names_short = str_sub(month_names, start = 1, end = 3) %&gt;% toupper())",
    "crumbs": [
      "Course Material",
      "Solutions 💃🏻",
      "Exercise 2 - Solution"
    ]
  },
  {
    "objectID": "Solutions/exercise2_SOLUTIONS.html#footnotes",
    "href": "Solutions/exercise2_SOLUTIONS.html#footnotes",
    "title": "Exercise 2: Tidyverse - Solutions",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nContains public sector information licensed under the Open Government Licence v3.0.↩︎",
    "crumbs": [
      "Course Material",
      "Solutions 💃🏻",
      "Exercise 2 - Solution"
    ]
  },
  {
    "objectID": "Solutions/solution_not_up.html",
    "href": "Solutions/solution_not_up.html",
    "title": "Solution not up yet!",
    "section": "",
    "text": "Solutions will be available only after you’ve had a chance to work through the exercises on your own. If you’re unsure how to proceed, check the slides, cheat sheets, ask a peer, or reach out to a TA.\n\nEnjoy!"
  },
  {
    "objectID": "Solutions/exercise4_PART1_solutions.html",
    "href": "Solutions/exercise4_PART1_solutions.html",
    "title": "Exercise 4, Part 1: Applied Statistics in R - Solutions",
    "section": "",
    "text": "You can download the exercise4_PART1_solutions.qmd file and explore it in your RStudio. Just clink on the file link, download from GitHub and open the file in your local RStudio.",
    "crumbs": [
      "Course Material",
      "Solutions 💃🏻",
      "Exercise 4, Part 1 - Solutions"
    ]
  },
  {
    "objectID": "Solutions/exercise4_PART1_solutions.html#structure-of-a-biostatistical-analysis-in-r",
    "href": "Solutions/exercise4_PART1_solutions.html#structure-of-a-biostatistical-analysis-in-r",
    "title": "Exercise 4, Part 1: Applied Statistics in R - Solutions",
    "section": "Structure of a biostatistical analysis in R",
    "text": "Structure of a biostatistical analysis in R\nThe very basic structure of an R script doing a classical statistical analysis is as follows:\n\nLoad packages that you will be using.\n\nRead the dataset to be analyzed. Possibly also do some data cleaning and manipulation.\n\nVisualize the dataset by graphics and other descriptive statistics.\n\nFit and validate a statistical model.\n\nHypothesis testing. Possibly also post hoc testing.\n\nOf course there are variants of this set-up, and in practice there will often be some iterations of the steps.\nIn this manuscript we will exemplify the proposed steps in the analysis of a simple dataset:\n\nIn our current scenario, you are a researcher investigating psoriasis, an inflammatory skin disease. You have data on the expression of a number genes that are suspected to have something to do with the disease, but you cannot be sure until you perform some formal statistical analysis.\nThis is a great example where R skills would come very handy!\nYou will investigate your gene of special interest GeneD (a hypothetical gene in this case).\nYou decide that your analysis approach will be one-way ANOVA of the expression of GeneD against the skin type in psoriasis patients.\n\n\nLoad packages\nWe will use ggplot2 to make plots, and to be prepared for data manipulations, we simply load this together with the rest of the tidyverse.\nThe psoriasis data are provided in an Excel sheet, so we also load readxl. Finally, we will use the package emmeans to make post hoc tests.\nRemember that you should install the wanted packages before they can be used (but you only need to install the packages once!).\nThus,\n\n#install.packages(\"tidyverse\")\n#install.packages(\"readxl\")\n#install.packages(\"emmeans\")\nlibrary(tidyverse)\nlibrary(readxl)\nlibrary(emmeans)\n\nNow, we are done preparing for our analyses. Next, we will look specifically at the possible association between GeneD expression and psoriasis. Finally, we conclude with a brief outlook on other statistical models in R.\nPlease refer to the ‘STATS CHEAT SHEET’ provided in the slides for hints as well as other cheat sheets provided in other sessions where necessary.",
    "crumbs": [
      "Course Material",
      "Solutions 💃🏻",
      "Exercise 4, Part 1 - Solutions"
    ]
  },
  {
    "objectID": "Solutions/exercise4_PART1_solutions.html#example-analysis-of-variance",
    "href": "Solutions/exercise4_PART1_solutions.html#example-analysis-of-variance",
    "title": "Exercise 4, Part 1: Applied Statistics in R - Solutions",
    "section": "Example: Analysis of variance",
    "text": "Example: Analysis of variance\n\nStep 1: Data\nPsoriasis is an immune-mediated disease that affects the skin. You, as a researcher, carried out a micro-array experiment with skin from 37 people in order to examine a potential association between the disease and a certain gene (GeneD). For each of the 37 samples the gene expression was measured. Fifteen skin samples were from psoriasis patients and from a part of the body affected by the disease (psor); 15 samples were from psoriasis patients but from a part of the body not affected by the disease (psne); and 7 skin samples were from healthy people (control).\nThe data are saved in the file psoriasis.xlsx. At first the variable type is stored as a character variable, we change it to a factor (and check that indeed there are 15, 15 and 7 patients in the three groups).\n\npsoriasisData &lt;- read_excel(\"../../Data/psoriasis.xlsx\")\n\n# Dataset1\npsorData  &lt;- select(psoriasisData, type, GeneD)\n\n# Dataset2\npsorDataG &lt;- select(psoriasisData, -GeneD)\n\n\npsorData &lt;- mutate(psorData, type = factor(type))\ncount(psorData, type)\n\n# A tibble: 3 × 2\n  type        n\n  &lt;fct&gt;   &lt;int&gt;\n1 healthy     7\n2 psne       15\n3 psor       15\n\n\n\n\nStep 2: Descriptive plots and statistics\nTo get an impression of the data, we make two plots and compute group-wise means and standard deviations.\n\nggplot(psorData, aes(x=type, y=GeneD)) +\n  geom_point() + \n  labs(x=\"Skin type\", y=\"GeneD\")\n\nggplot(psorData, aes(x=type, y=GeneD)) +\n  geom_boxplot() + \n  labs(x=\"Skin type\", y=\"GeneD\")\n\npsorData %&gt;% \n  group_by(type) %&gt;% \n  summarise(avg=mean(GeneD), median=median(GeneD), sd=sd(GeneD))\n\n# A tibble: 3 × 4\n  type        avg  median    sd\n  &lt;fct&gt;     &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;\n1 healthy  0.557   0.590  0.121\n2 psne    -0.0292 -0.0331 0.197\n3 psor     1.03    1.04   0.171\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nStep 3: Fit of oneway ANOVA, model validation\nThe scientific question is whether the gene expression level of GeneD differs between the three types/groups. Thus, the natural type of analysis is a oneway analysis of variance (ANOVA). The oneway ANOVA is fitted with a function in R. It is a good approach to assign a name (below oneway) to the object with the fitted model. This object contains all relevant information and may be used for subsequent analysis. Note that we need to logarithmic transform the response as intensities are often on a multiplicative scale.\n\noneway &lt;- lm(log(GeneD) ~ type, data=psorData)\noneway\n\n\nCall:\nlm(formula = log(GeneD) ~ type, data = psorData)\n\nCoefficients:\n(Intercept)     typepsne     typepsor  \n    -0.6079      -1.4693       0.6198  \n\n\n\n\nStep 4: Hypothesis test + Post hoc tests\nIt is standard to carry out an \\(F\\)-test for the overall effect of the explanatory (i.e. independent) variable. To be precise, the hypothesis is that the expected values are the same in all groups. The most easy way to do this test is to use ???. Hint: The option test=\"F\" is needed to get the \\(F\\)-test using that function:\n\ndrop1(oneway,test=\"F\")\n\nSingle term deletions\n\nModel:\nlog(GeneD) ~ type\n       Df Sum of Sq    RSS     AIC F value    Pr(&gt;F)    \n&lt;none&gt;               3.345 -53.492                      \ntype    2    18.707 22.052  -4.686  69.907 5.779e-11 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n\nThus, the overall test for homogeneity between the groups show that the groups are not all the same. But it might be that the gene expression in two of the three groups, say, are not significantly different. To investigate that we do post hoc testing. This is nicely done within the framework of estimated marginal means using the emmeans package. Here emmeans makes the estimated marginal means (that is the predicted gene expression of GeneD on the log scale), and the pairs() command provide post hoc pairwise comparisons (package automatically adjusts for multiple comparisons using the default tukey method):\n\nemmeans(oneway,~type)\n\n type     emmean     SE df lower.CL upper.CL\n healthy -0.6079 0.1383 25   -0.893   -0.323\n psne    -2.0772 0.1493 25   -2.385   -1.770\n psor     0.0119 0.0944 25   -0.183    0.206\n\nResults are given on the log (not the response) scale. \nConfidence level used: 0.95 \n\npairs(emmeans(oneway,~type))\n\n contrast       estimate    SE df t.ratio p.value\n healthy - psne     1.47 0.204 25   7.220  &lt;.0001\n healthy - psor    -0.62 0.167 25  -3.702  0.0029\n psne - psor       -2.09 0.177 25 -11.823  &lt;.0001\n\nResults are given on the log (not the response) scale. \nP value adjustment: tukey method for comparing a family of 3 estimates \n\n\nGeneD expression levels are significantly different between all three groups of skin samples when we perform pairwise comparisons across the three groups ([1]healthy - psne, [2]healthy - psor and [3]psne - psor; all p-values &lt; 0.05).",
    "crumbs": [
      "Course Material",
      "Solutions 💃🏻",
      "Exercise 4, Part 1 - Solutions"
    ]
  },
  {
    "objectID": "Solutions/exercise4_PART1_solutions.html#outlook-other-analyses",
    "href": "Solutions/exercise4_PART1_solutions.html#outlook-other-analyses",
    "title": "Exercise 4, Part 1: Applied Statistics in R - Solutions",
    "section": "Outlook: Other analyses",
    "text": "Outlook: Other analyses\nThe lm function is used for linear models, that is, models where data points are assumed to be independent with a Gaussian (i.e. normal) distribution (and typically also with the same variance). Obviously, these models are not always appropriate, and there exists functions for many, many more situations and data types. Here, we just mention a few functions corresponding to common data types and statistical problems.\n\nglm: For independent, but non-Gaussian data. Examples are binary outcomes (logistic regression) and outcomes that are counts (Poisson regression). glm is short for generalized linear models, and the glm function is part of the base installation of R.\nlmer and glmer: For data with dependence structures that can be described by random effects, e.g., block designs. lme is short for linear mixed effects (Gaussian data), glmer is short for generalized linear mixed effects (binary or count data). Both functions are part of the lme4 package.\nnls: For non-linear regression, e.g., dose-response analysis. nls is short for non-linear least squares. The function is included in the base installation of R.\n\nThe functions mentioned above are used in a similar way as lm: a model is fitted with the function in question, and the model object subsequently examined with respect to model validation, estimation, computation of confidence limits, hypothesis tests, prediction, etc. with functions summary, confint, drop1, emmeans, pairs as mostly indicated above.",
    "crumbs": [
      "Course Material",
      "Solutions 💃🏻",
      "Exercise 4, Part 1 - Solutions"
    ]
  },
  {
    "objectID": "Solutions/exercise4_PART2_solutions.html",
    "href": "Solutions/exercise4_PART2_solutions.html",
    "title": "Exercise 4, Part 2: Applied Statistics in R - Solutions",
    "section": "",
    "text": "You can download the exercise4_PART2_solutions.qmd file and explore it in your RStudio. Just clink on the file link, download from GitHub and open the file in your local RStudio.",
    "crumbs": [
      "Course Material",
      "Solutions 💃🏻",
      "Exercise 4, Part 2 - Solutions"
    ]
  },
  {
    "objectID": "Solutions/exercise4_PART2_solutions.html#data",
    "href": "Solutions/exercise4_PART2_solutions.html#data",
    "title": "Exercise 4, Part 2: Applied Statistics in R - Solutions",
    "section": "Data",
    "text": "Data\n\n### Open help page for birthwt\n?birthwt\n\n### Make a tibble with the data\nbirthData &lt;- as_tibble(birthwt)\nbirthData\n\n# A tibble: 189 × 10\n     low   age   lwt  race smoke   ptl    ht    ui   ftv   bwt\n   &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt;\n 1     0    19   182     2     0     0     0     1     0  2523\n 2     0    33   155     3     0     0     0     0     3  2551\n 3     0    20   105     1     1     0     0     0     1  2557\n 4     0    21   108     1     1     0     0     1     2  2594\n 5     0    18   107     1     1     0     0     1     0  2600\n 6     0    21   124     3     0     0     0     0     0  2622\n 7     0    22   118     1     0     0     0     0     1  2637\n 8     0    17   103     3     0     0     0     0     1  2637\n 9     0    29   123     1     1     0     0     0     1  2663\n10     0    26   113     1     1     0     0     0     0  2665\n# ℹ 179 more rows\n\n### Make smoke into a factor\n# Check if `smoke` is numerical\nis.numeric(birthData$smoke)\n\n[1] TRUE\n\n# Alternatively, review the summary of the whole dataset\nsummary(birthData)\n\n      low              age             lwt             race      \n Min.   :0.0000   Min.   :14.00   Min.   : 80.0   Min.   :1.000  \n 1st Qu.:0.0000   1st Qu.:19.00   1st Qu.:110.0   1st Qu.:1.000  \n Median :0.0000   Median :23.00   Median :121.0   Median :1.000  \n Mean   :0.3122   Mean   :23.24   Mean   :129.8   Mean   :1.847  \n 3rd Qu.:1.0000   3rd Qu.:26.00   3rd Qu.:140.0   3rd Qu.:3.000  \n Max.   :1.0000   Max.   :45.00   Max.   :250.0   Max.   :3.000  \n     smoke             ptl               ht                ui        \n Min.   :0.0000   Min.   :0.0000   Min.   :0.00000   Min.   :0.0000  \n 1st Qu.:0.0000   1st Qu.:0.0000   1st Qu.:0.00000   1st Qu.:0.0000  \n Median :0.0000   Median :0.0000   Median :0.00000   Median :0.0000  \n Mean   :0.3915   Mean   :0.1958   Mean   :0.06349   Mean   :0.1481  \n 3rd Qu.:1.0000   3rd Qu.:0.0000   3rd Qu.:0.00000   3rd Qu.:0.0000  \n Max.   :1.0000   Max.   :3.0000   Max.   :1.00000   Max.   :1.0000  \n      ftv              bwt      \n Min.   :0.0000   Min.   : 709  \n 1st Qu.:0.0000   1st Qu.:2414  \n Median :0.0000   Median :2977  \n Mean   :0.7937   Mean   :2945  \n 3rd Qu.:1.0000   3rd Qu.:3487  \n Max.   :6.0000   Max.   :4990  \n\n# Finally, make smoke into a factor\nbirthData &lt;- mutate(birthData, smoke = factor(smoke))\n\n# Check the ftv variable, make it a factor and collapse some of the levels\ntable(birthData$ftv)\n\n\n  0   1   2   3   4   6 \n100  47  30   7   4   1 \n\nbirthData &lt;- mutate(birthData, ftvFac = factor(ftv))\nbirthData &lt;- mutate(birthData, visits = fct_collapse(ftvFac, Never=\"0\", Once=\"1\", other_level=\"MoreThanOnce\"))\nsummary(birthData)\n\n      low              age             lwt             race       smoke  \n Min.   :0.0000   Min.   :14.00   Min.   : 80.0   Min.   :1.000   0:115  \n 1st Qu.:0.0000   1st Qu.:19.00   1st Qu.:110.0   1st Qu.:1.000   1: 74  \n Median :0.0000   Median :23.00   Median :121.0   Median :1.000          \n Mean   :0.3122   Mean   :23.24   Mean   :129.8   Mean   :1.847          \n 3rd Qu.:1.0000   3rd Qu.:26.00   3rd Qu.:140.0   3rd Qu.:3.000          \n Max.   :1.0000   Max.   :45.00   Max.   :250.0   Max.   :3.000          \n      ptl               ht                ui              ftv        \n Min.   :0.0000   Min.   :0.00000   Min.   :0.0000   Min.   :0.0000  \n 1st Qu.:0.0000   1st Qu.:0.00000   1st Qu.:0.0000   1st Qu.:0.0000  \n Median :0.0000   Median :0.00000   Median :0.0000   Median :0.0000  \n Mean   :0.1958   Mean   :0.06349   Mean   :0.1481   Mean   :0.7937  \n 3rd Qu.:0.0000   3rd Qu.:0.00000   3rd Qu.:0.0000   3rd Qu.:1.0000  \n Max.   :3.0000   Max.   :1.00000   Max.   :1.0000   Max.   :6.0000  \n      bwt       ftvFac           visits   \n Min.   : 709   0:100   Never       :100  \n 1st Qu.:2414   1: 47   Once        : 47  \n Median :2977   2: 30   MoreThanOnce: 42  \n Mean   :2945   3:  7                     \n 3rd Qu.:3487   4:  4                     \n Max.   :4990   6:  1                     \n\n### Parallell boxplots\nggplot(birthData, aes(x=visits, y=bwt)) + geom_boxplot() \n\n\n\n\n\n\n\nggplot(birthData, aes(x=smoke, y=bwt)) + geom_boxplot() \n\n\n\n\n\n\n\n# Groupwise boxplots\nggplot(birthData, aes(x=smoke:visits, y=bwt, col=smoke)) + geom_boxplot() \n\n\n\n\n\n\n\n### Scatterplot\nggplot(birthData, aes(x=lwt, y=bwt)) + geom_point() \n\n\n\n\n\n\n\n### Scatter plot with points coloured after visits, and point types after smoke status\nggplot(birthData, aes(x=lwt, y=bwt, col=visits)) + geom_point() \n\n\n\n\n\n\n\nggplot(birthData, aes(x=lwt, y=bwt, col=visits, pch=smoke)) + geom_point()",
    "crumbs": [
      "Course Material",
      "Solutions 💃🏻",
      "Exercise 4, Part 2 - Solutions"
    ]
  },
  {
    "objectID": "Solutions/exercise4_PART2_solutions.html#regression",
    "href": "Solutions/exercise4_PART2_solutions.html#regression",
    "title": "Exercise 4, Part 2: Applied Statistics in R - Solutions",
    "section": "Regression",
    "text": "Regression\n\n### Simple linear regression\nreg1 &lt;- lm(bwt ~ lwt, data=birthData) \nsummary(reg1)\n\n\nCall:\nlm(formula = bwt ~ lwt, data = birthData)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-2192.12  -497.97    -3.84   508.32  2075.60 \n\nCoefficients:\n            Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept) 2369.624    228.493  10.371   &lt;2e-16 ***\nlwt            4.429      1.713   2.585   0.0105 *  \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 718.4 on 187 degrees of freedom\nMultiple R-squared:  0.0345,    Adjusted R-squared:  0.02933 \nF-statistic: 6.681 on 1 and 187 DF,  p-value: 0.0105\n\nconfint(reg1)\n\n                  2.5 %     97.5 %\n(Intercept) 1918.867879 2820.37916\nlwt            1.048845    7.80937\n\n### Model validation\npar(mfrow=c(2,2))\nplot(reg1)\n\n\n\n\n\n\n\n### Include age and ftv as covariate\nreg2 &lt;- lm(bwt ~ lwt + age + ftv, data=birthData)\nsummary(reg2)\n\n\nCall:\nlm(formula = bwt ~ lwt + age + ftv, data = birthData)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-2218.60  -488.73    11.56   516.63  1907.42 \n\nCoefficients:\n            Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept) 2223.506    301.567   7.373  5.4e-12 ***\nlwt            4.121      1.758   2.344   0.0201 *  \nage            7.486     10.285   0.728   0.4676    \nftv           15.364     51.114   0.301   0.7641    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 720.9 on 185 degrees of freedom\nMultiple R-squared:  0.03831,   Adjusted R-squared:  0.02271 \nF-statistic: 2.457 on 3 and 185 DF,  p-value: 0.06446\n\n# Just to view the coefficients\nsummary(reg2)$coefficients\n\n               Estimate Std. Error   t value     Pr(&gt;|t|)\n(Intercept) 2223.505618 301.567140 7.3731694 5.402210e-12\nlwt            4.120744   1.757787 2.3442798 2.012498e-02\nage            7.485748  10.285178 0.7278189 4.676446e-01\nftv           15.363944  51.113921 0.3005824 7.640705e-01\n\n### Prediction\nnewData &lt;- data.frame(lwt=100, age=25, ftv=0)\nnewData\n\n  lwt age ftv\n1 100  25   0\n\npredict(reg2, newData)\n\n       1 \n2822.724 \n\npredict(reg2, newData, interval=\"prediction\")\n\n       fit      lwr      upr\n1 2822.724 1390.148 4255.299\n\n### Use only data from mothers with weight below 160\nreg3 &lt;- lm(bwt ~ lwt + age + ftv, data=filter(birthData, lwt&lt;160))\nsummary(reg3)\n\n\nCall:\nlm(formula = bwt ~ lwt + age + ftv, data = filter(birthData, \n    lwt &lt; 160))\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-2233.9  -487.0    25.7   476.2  1852.5 \n\nCoefficients:\n            Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept) 1824.063    444.508   4.104 6.52e-05 ***\nlwt            7.182      3.342   2.149   0.0332 *  \nage            9.179     11.624   0.790   0.4310    \nftv           16.986     60.012   0.283   0.7775    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 716.3 on 157 degrees of freedom\nMultiple R-squared:  0.03956,   Adjusted R-squared:  0.0212 \nF-statistic: 2.155 on 3 and 157 DF,  p-value: 0.09549\n\n# Just to view the coefficients\nsummary(reg3)$coefficients\n\n               Estimate Std. Error   t value     Pr(&gt;|t|)\n(Intercept) 1824.063262 444.508301 4.1035528 0.0000651941\nlwt            7.182184   3.341787 2.1492047 0.0331503757\nage            9.178577  11.624301 0.7896024 0.4309508695\nftv           16.986307  60.011783 0.2830495 0.7775117320",
    "crumbs": [
      "Course Material",
      "Solutions 💃🏻",
      "Exercise 4, Part 2 - Solutions"
    ]
  },
  {
    "objectID": "Solutions/exercise4_PART2_solutions.html#anova",
    "href": "Solutions/exercise4_PART2_solutions.html#anova",
    "title": "Exercise 4, Part 2: Applied Statistics in R - Solutions",
    "section": "ANOVA",
    "text": "ANOVA\n\n### Oneway ANOVA against smoke\noneway1 &lt;- lm(bwt ~ smoke, data=birthData)\nsummary(oneway1)\n\n\nCall:\nlm(formula = bwt ~ smoke, data = birthData)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-2062.9  -475.9    34.3   545.1  1934.3 \n\nCoefficients:\n            Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)  3055.70      66.93  45.653  &lt; 2e-16 ***\nsmoke1       -283.78     106.97  -2.653  0.00867 ** \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 717.8 on 187 degrees of freedom\nMultiple R-squared:  0.03627,   Adjusted R-squared:  0.03112 \nF-statistic: 7.038 on 1 and 187 DF,  p-value: 0.008667\n\nsummary(oneway1)$coefficients\n\n             Estimate Std. Error   t value      Pr(&gt;|t|)\n(Intercept) 3055.6957   66.93326 45.652875 2.463035e-103\nsmoke1      -283.7767  106.96877 -2.652893  8.666726e-03\n\nemmeans(oneway1,~smoke)\n\n smoke emmean   SE  df lower.CL upper.CL\n 0       3056 66.9 187     2924     3188\n 1       2772 83.4 187     2607     2937\n\nConfidence level used: 0.95 \n\npairs(emmeans(oneway1,~smoke))\n\n contrast        estimate  SE  df t.ratio p.value\n smoke0 - smoke1      284 107 187   2.653  0.0087\n\n### Oneway ANOVA against visits\noneway2 &lt;- lm(bwt ~ visits, data=birthData)\nsummary(oneway2)\n\n\nCall:\nlm(formula = bwt ~ visits, data = birthData)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-2156.14  -484.88    26.12   578.86  1882.00 \n\nCoefficients:\n                   Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)         2865.14      72.62  39.456   &lt;2e-16 ***\nvisitsOnce           242.86     128.42   1.891   0.0602 .  \nvisitsMoreThanOnce    85.74     133.52   0.642   0.5216    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 726.2 on 186 degrees of freedom\nMultiple R-squared:  0.01888,   Adjusted R-squared:  0.008335 \nF-statistic:  1.79 on 2 and 186 DF,  p-value: 0.1698\n\nemmeans(oneway2,~visits)\n\n visits       emmean    SE  df lower.CL upper.CL\n Never          2865  72.6 186     2722     3008\n Once           3108 105.9 186     2899     3317\n MoreThanOnce   2951 112.1 186     2730     3172\n\nConfidence level used: 0.95 \n\npairs(emmeans(oneway2,~visits))\n\n contrast             estimate  SE  df t.ratio p.value\n Never - Once           -242.9 128 186  -1.891  0.1441\n Never - MoreThanOnce    -85.7 134 186  -0.642  0.7970\n Once - MoreThanOnce     157.1 154 186   1.019  0.5658\n\nP value adjustment: tukey method for comparing a family of 3 estimates \n\ndrop1(oneway2,test=\"F\")\n\nSingle term deletions\n\nModel:\nbwt ~ visits\n       Df Sum of Sq      RSS    AIC F value Pr(&gt;F)\n&lt;none&gt;              98081730 2493.2               \nvisits  2   1887925 99969656 2492.8  1.7901 0.1698\n\n### Twoway ANOVA without interaction\ntwoway1 &lt;- lm(bwt ~ visits + smoke, data=birthData)\nsummary(twoway1)\n\n\nCall:\nlm(formula = bwt ~ visits + smoke, data = birthData)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-2034.02  -504.02    34.98   536.36  1816.31 \n\nCoefficients:\n                   Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)         2980.92      86.74  34.367   &lt;2e-16 ***\nvisitsOnce           192.77     128.60   1.499   0.1356    \nvisitsMoreThanOnce    74.10     131.98   0.561   0.5752    \nsmoke1              -257.28     108.37  -2.374   0.0186 *  \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 717.3 on 185 degrees of freedom\nMultiple R-squared:  0.04789,   Adjusted R-squared:  0.03245 \nF-statistic: 3.102 on 3 and 185 DF,  p-value: 0.02795\n\nsummary(twoway1)$coefficients    \n\n                     Estimate Std. Error    t value     Pr(&gt;|t|)\n(Intercept)        2980.91672   86.73734 34.3671676 3.021284e-82\nvisitsOnce          192.77220  128.59583  1.4990548 1.355639e-01\nvisitsMoreThanOnce   74.10202  131.98092  0.5614601 5.751634e-01\nsmoke1             -257.28159  108.37493 -2.3739954 1.862096e-02\n\n### Twoway ANOVA with interaction, test for interaction in two ways\ntwoway2 &lt;- lm(bwt ~ visits * smoke, data=birthData)\nsummary(twoway2)\n\n\nCall:\nlm(formula = bwt ~ visits * smoke, data = birthData)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-2045.82  -460.29    50.71   505.18  1713.77 \n\nCoefficients:\n                          Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)                2955.40      96.22  30.714   &lt;2e-16 ***\nvisitsOnce                  320.83     154.30   2.079    0.039 *  \nvisitsMoreThanOnce           12.20     172.13   0.071    0.944    \nsmoke1                     -200.58     143.44  -1.398    0.164    \nvisitsOnce:smoke1          -458.32     278.50  -1.646    0.102    \nvisitsMoreThanOnce:smoke1   159.27     266.27   0.598    0.550    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 713.6 on 183 degrees of freedom\nMultiple R-squared:  0.06783,   Adjusted R-squared:  0.04236 \nF-statistic: 2.663 on 5 and 183 DF,  p-value: 0.02378\n\nanova(twoway2, twoway1)\n\nAnalysis of Variance Table\n\nModel 1: bwt ~ visits * smoke\nModel 2: bwt ~ visits + smoke\n  Res.Df      RSS Df Sum of Sq      F Pr(&gt;F)\n1    183 93189162                           \n2    185 95182096 -2  -1992934 1.9568 0.1443\n\ndrop1(twoway2,test=\"F\")\n\nSingle term deletions\n\nModel:\nbwt ~ visits * smoke\n             Df Sum of Sq      RSS    AIC F value Pr(&gt;F)\n&lt;none&gt;                    93189162 2489.5               \nvisits:smoke  2   1992934 95182096 2489.5  1.9568 0.1443\n\n# Compute the expected birth weight of infants for smokers and non-smokers, respectively, on average over the three levels of `visits`\nemmeans(twoway2, ~smoke)\n\nNOTE: Results may be misleading due to involvement in interactions\n\n\n smoke emmean   SE  df lower.CL upper.CL\n 0       3066 70.1 183     2928     3205\n 1       2766 96.4 183     2576     2956\n\nResults are averaged over the levels of: visits \nConfidence level used: 0.95",
    "crumbs": [
      "Course Material",
      "Solutions 💃🏻",
      "Exercise 4, Part 2 - Solutions"
    ]
  },
  {
    "objectID": "Solutions/exercise4_PART2_solutions.html#models-with-numerical-as-well-as-categorical-predictors",
    "href": "Solutions/exercise4_PART2_solutions.html#models-with-numerical-as-well-as-categorical-predictors",
    "title": "Exercise 4, Part 2: Applied Statistics in R - Solutions",
    "section": "Models with numerical as well as categorical predictors",
    "text": "Models with numerical as well as categorical predictors\n\n### Model with linear (lwt,bwt) association. \n### Intercept differ between smokers and non-smokers, one common slope.\nmodel1 &lt;- lm(bwt ~ lwt + smoke, data=birthData)\nsummary(model1)\n\n\nCall:\nlm(formula = bwt ~ lwt + smoke, data = birthData)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-2030.90  -445.69    29.16   521.76  1967.76 \n\nCoefficients:\n            Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept) 2501.125    230.836  10.835   &lt;2e-16 ***\nlwt            4.237      1.690   2.507   0.0130 *  \nsmoke1      -272.081    105.591  -2.577   0.0107 *  \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 707.8 on 186 degrees of freedom\nMultiple R-squared:  0.06777,   Adjusted R-squared:  0.05775 \nF-statistic: 6.761 on 2 and 186 DF,  p-value: 0.001464\n\n### Model with linear (lwt,bwt) association. Intercept and slope both differ between visit groups\nmodel2 &lt;- lm(bwt ~ lwt * smoke, data=birthData)\nsummary(model2)\n\n\nCall:\nlm(formula = bwt ~ lwt * smoke, data = birthData)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-2038.80  -454.76    28.36   530.84  1976.84 \n\nCoefficients:\n            Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept) 2350.578    312.733   7.516 2.35e-12 ***\nlwt            5.387      2.335   2.307   0.0222 *  \nsmoke1        41.384    451.187   0.092   0.9270    \nlwt:smoke1    -2.422      3.388  -0.715   0.4757    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 708.8 on 185 degrees of freedom\nMultiple R-squared:  0.07034,   Adjusted R-squared:  0.05527 \nF-statistic: 4.666 on 3 and 185 DF,  p-value: 0.003621\n\n### Test if slopes differ between visit groups\nanova(model2, model1)\n\nAnalysis of Variance Table\n\nModel 1: bwt ~ lwt * smoke\nModel 2: bwt ~ lwt + smoke\n  Res.Df      RSS Df Sum of Sq      F Pr(&gt;F)\n1    185 92937722                           \n2    186 93194298 -1   -256576 0.5107 0.4757\n\n### Model with many effects (no interactions)\nmodel3 &lt;- lm(bwt ~ lwt + smoke + age + visits, data=birthData)\npar(mfrow=c(2,2))\nplot(model3)\n\n\n\n\n\n\n\nsummary(model3)\n\n\nCall:\nlm(formula = bwt ~ lwt + smoke + age + visits, data = birthData)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-2024.13  -491.65     6.56   507.56  1753.25 \n\nCoefficients:\n                   Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)        2346.442    301.420   7.785    5e-13 ***\nlwt                   4.167      1.727   2.413   0.0168 *  \nsmoke1             -244.402    107.187  -2.280   0.0238 *  \nage                   4.300     10.252   0.419   0.6754    \nvisitsOnce          184.314    130.194   1.416   0.1586    \nvisitsMoreThanOnce   32.318    133.410   0.242   0.8089    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 708.6 on 183 degrees of freedom\nMultiple R-squared:  0.08076,   Adjusted R-squared:  0.05564 \nF-statistic: 3.215 on 5 and 183 DF,  p-value: 0.008306",
    "crumbs": [
      "Course Material",
      "Solutions 💃🏻",
      "Exercise 4, Part 2 - Solutions"
    ]
  },
  {
    "objectID": "Solutions/exercise4_PART2_solutions.html#logistic-regression",
    "href": "Solutions/exercise4_PART2_solutions.html#logistic-regression",
    "title": "Exercise 4, Part 2: Applied Statistics in R - Solutions",
    "section": "Logistic regression",
    "text": "Logistic regression\n\n### Logistic regression with many predictors (no interactions)\nlogreg1 &lt;- glm(low ~ lwt + smoke + age + visits, data=birthData, family=\"binomial\")\nsummary(logreg1)\n\n\nCall:\nglm(formula = low ~ lwt + smoke + age + visits, family = \"binomial\", \n    data = birthData)\n\nCoefficients:\n                    Estimate Std. Error z value Pr(&gt;|z|)  \n(Intercept)         1.370311   1.016623   1.348   0.1777  \nlwt                -0.012276   0.006138  -2.000   0.0455 *\nsmoke1              0.619077   0.330428   1.874   0.0610 .\nage                -0.031764   0.033933  -0.936   0.3492  \nvisitsOnce         -0.413043   0.424527  -0.973   0.3306  \nvisitsMoreThanOnce -0.148285   0.420965  -0.352   0.7247  \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n(Dispersion parameter for binomial family taken to be 1)\n\n    Null deviance: 234.67  on 188  degrees of freedom\nResidual deviance: 221.91  on 183  degrees of freedom\nAIC: 233.91\n\nNumber of Fisher Scoring iterations: 4",
    "crumbs": [
      "Course Material",
      "Solutions 💃🏻",
      "Exercise 4, Part 2 - Solutions"
    ]
  },
  {
    "objectID": "Solutions/exercise4_PART2_solutions.html#linear-mixed-models",
    "href": "Solutions/exercise4_PART2_solutions.html#linear-mixed-models",
    "title": "Exercise 4, Part 2: Applied Statistics in R - Solutions",
    "section": "Linear mixed models",
    "text": "Linear mixed models\n\n### Make artificial center variable\nset.seed(123)\ncenter &lt;- sample(rep(1:19, each=10)[1:189])\nbirthData &lt;- mutate(birthData,center=factor(center))\n\n### Remember to install lme4 before this can run\n# install.packages(\"lme4\")\nlibrary(lme4)\n\nIndlæser krævet pakke: Matrix\n\n\n\nVedhæfter pakke: 'Matrix'\n\n\nDe følgende objekter er maskerede fra 'package:tidyr':\n\n    expand, pack, unpack\n\n### Linear mixed model with random effect of center\nlmm1 &lt;- lmer(bwt ~ lwt + smoke + age + visits + (1|center), data=birthData)\n\nboundary (singular) fit: see help('isSingular')\n\nsummary(lmm1)\n\nLinear mixed model fit by REML ['lmerMod']\nFormula: bwt ~ lwt + smoke + age + visits + (1 | center)\n   Data: birthData\n\nREML criterion at convergence: 2958\n\nScaled residuals: \n     Min       1Q   Median       3Q      Max \n-2.85637 -0.69380  0.00926  0.71625  2.47412 \n\nRandom effects:\n Groups   Name        Variance  Std.Dev. \n center   (Intercept) 9.668e-12 3.109e-06\n Residual             5.022e+05 7.086e+02\nNumber of obs: 189, groups:  center, 19\n\nFixed effects:\n                   Estimate Std. Error t value\n(Intercept)        2346.442    301.420   7.785\nlwt                   4.167      1.727   2.413\nsmoke1             -244.402    107.187  -2.280\nage                   4.300     10.252   0.419\nvisitsOnce          184.314    130.194   1.416\nvisitsMoreThanOnce   32.318    133.410   0.242\n\nCorrelation of Fixed Effects:\n            (Intr) lwt    smoke1 age    vstsOn\nlwt         -0.613                            \nsmoke1      -0.196  0.046                     \nage         -0.620 -0.173  0.003              \nvisitsOnce  -0.026  0.048  0.160 -0.218       \nvstsMrThnOn  0.055 -0.058  0.031 -0.190  0.335\noptimizer (nloptwrap) convergence code: 0 (OK)\nboundary (singular) fit: see help('isSingular')",
    "crumbs": [
      "Course Material",
      "Solutions 💃🏻",
      "Exercise 4, Part 2 - Solutions"
    ]
  },
  {
    "objectID": "Solutions/exercise3_SOLUTIONS.html",
    "href": "Solutions/exercise3_SOLUTIONS.html",
    "title": "Exercise 3: ggplot2 - Solutions",
    "section": "",
    "text": "Before you proceed with the exercises in this document, make sure to run the command library(tidyverse) in order to load the core tidyverse packages (including ggplot2).\n\nlibrary(tidyverse)\nlibrary(readxl)\n\nThe data set used in these exercises, climate.xlsx1, was compiled from data downloaded in 2017 from the website of the UK’s national weather service, the Met Office.\nThe spreadsheet contains data from five UK weather stations in 2016. The following variables are included in the data set:\n\n\n\nVariable name\nExplanation\n\n\n\n\nstation\nLocation of weather station\n\n\nyear\nYear\n\n\nmonth\nMonth\n\n\naf\nDays of air frost\n\n\nrain\nRainfall in mm\n\n\nsun\nSunshine duration in hours\n\n\ndevice\nBrand of sunshine recorder / sensor\n\n\n\nThe data set is the same as the one used for the Tidyverse exercise. If you have already imported the data, there is no need to import it again, unless you have made changes to the data assigned to climate since the original data set was imported.\n\nclimate &lt;- read_xlsx('../../Data/climate.xlsx')\nhead(climate)\n\n# A tibble: 6 × 7\n  station  year month    af  rain   sun device         \n  &lt;chr&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;          \n1 armagh   2016     1     5 132.   44.5 Campbell Stokes\n2 armagh   2016     2    10  62.6  71.3 Campbell Stokes\n3 armagh   2016     3     4  43.8 117.  Campbell Stokes\n4 armagh   2016     4     5  54   140.  Campbell Stokes\n5 armagh   2016     5     0  41.4 210.  Campbell Stokes\n6 armagh   2016     6     0  75.1 114.  Campbell Stokes\n\n\nNeed a little help? Consult the ggplot2 cheatsheet here: https://rstudio.github.io/cheatsheets/data-visualization.pdf\n\n\n\nMake a scatter (point) plot of rain against sun.\n\n\nggplot(climate, \n       aes(x = rain,\n           y = sun)) +\n  geom_point()\n\n\n\n\n\n\n\n\n\nColor the points in the scatter plot according to weather station. Save the plot in an object.\n\n\nggplot(climate, \n       aes(x = rain,\n           y = sun,\n           color = station)) +\n  geom_point()\n\n\n\n\n\n\n\n\n\nAdd the segment + facet_wrap(vars(station)) to the saved plot object from above, and update the plot. What happens?\n\n\nggplot(climate, \n       aes(x = rain,\n           y = sun,\n           color = station)) +\n  geom_point() + \n  facet_wrap(vars(station))\n\n\n\n\n\n\n\n\n\nIs it necessary to have a legend in the faceted plot? How can you remove this legend? Hint: try adding a theme() with legend.position = \"none\" inside it.\n\n\nggplot(climate, \n       aes(x = rain,\n           y = sun,\n           color = station)) +\n  geom_point() + \n  facet_wrap(vars(station)) + \n  theme(legend.position = \"none\")\n\n\n\n\n\n\n\n\n\n\n\n\nUse ggsave(file=\"weather.jpeg\") to remake the last ggplot as a jpeg-file and save it. The file will be saved on your working directory. Locate this file on your computer and open it.\nUse ggsave(file=\"weather.png\", width=10, height=8, units=\"cm\") to remake the last ggplot as a png-file and save it. What do the three other options do? Look at the help page ?ggsave to get an overview of the possible options.\n\n\n\n\n\nCalculate the average and standard deviation for sunshine in each month and save it to a table called summary_stats. You will need group_by and summarize. Recall how to do this from the tidyverse exercise.\n\n\nsummary_stats &lt;- climate %&gt;%\n  group_by(month) %&gt;% \n  summarize(sun_avg = mean(sun), \n            sun_sd = sd(sun))\n\nhead(summary_stats)\n\n# A tibble: 6 × 3\n  month sun_avg sun_sd\n  &lt;dbl&gt;   &lt;dbl&gt;  &lt;dbl&gt;\n1     1    45.3   9.19\n2     2    86.2  19.5 \n3     3   113.   21.8 \n4     4   160.   16.0 \n5     5   193.   19.1 \n6     6   130.   40.3 \n\n\n\nMake a scatter plot of the summary_stats with month on the x-axis, and the average number of sunshine hours on the y-axis.\n\n\np &lt;- ggplot(summary_stats, \n       aes(x = month,\n           y = sun_avg)) + \n  geom_point()\n\np\n\n\n\n\n\n\n\n\n\nAdd error bars to the plot, which represent the average number of sunshine hours plus/minus the standard deviation of the observations. The relevant geom is called geom_errorbar.\n\n\nHint:\n\ngeom_errorbar(aes(ymin = sun_avg - sun_sd, ymax = sun_avg + sun_sd), width = 0.2)\n\nmapping: ymin = ~sun_avg - sun_sd, ymax = ~sun_avg + sun_sd \ngeom_errorbar: na.rm = FALSE, orientation = NA, width = 0.2\nstat_identity: na.rm = FALSE\nposition_identity \n\n\n\np &lt;- p + geom_errorbar(aes(ymin = sun_avg - sun_sd, ymax = sun_avg + sun_sd), width = 0.2)\n\np\n\n\n\n\n\n\n\n\n\nHow could make the plot with horizontal error bars instead? Tip: Think about which of the two variables, month and average sunshine hours, can meaningfully have an error.\n\n\np + coord_flip()\n\n\n\n\n\n\n\n\n\n\n\n\nMake a line plot (find the correct geom_ for this) of the rainfall observations over time (month), such observations from the same station are connected in one line. Put month on the x-axis. Color the lines according to weather station as well.\n\n\nggplot(climate, \n       aes(x = month,\n           y = rain, \n           color = station)) + \n  geom_line()\n\n\n\n\n\n\n\n\n\nThe month variable was read into R as a numerical variable. Convert this variable to a factor and make the scatter plot from 8 again. What has changed?\n\n\nclimate$month &lt;- as.factor(climate$month)\nstr(climate)\n\ntibble [60 × 7] (S3: tbl_df/tbl/data.frame)\n $ station: chr [1:60] \"armagh\" \"armagh\" \"armagh\" \"armagh\" ...\n $ year   : num [1:60] 2016 2016 2016 2016 2016 ...\n $ month  : Factor w/ 12 levels \"1\",\"2\",\"3\",\"4\",..: 1 2 3 4 5 6 7 8 9 10 ...\n $ af     : num [1:60] 5 10 4 5 0 0 0 0 0 0 ...\n $ rain   : num [1:60] 131.9 62.6 43.8 54 41.4 ...\n $ sun    : num [1:60] 44.5 71.3 117.3 139.7 209.6 ...\n $ device : chr [1:60] \"Campbell Stokes\" \"Campbell Stokes\" \"Campbell Stokes\" \"Campbell Stokes\" ...\n\n\n\np &lt;- ggplot(climate, \n            aes(x = month,\n            y = rain, \n            color = station,\n            group = station)) + \n  geom_line()\n\np\n\n\n\n\n\n\n\n\ngroup = station needs to be added when month is a factor.The plot now shows the individual months instead of showing them on a continuous scale.\n\nUse theme(legend.position = ???) to move the color legend to the top of the plot.\n\n\np &lt;- p + theme(legend.position = 'top')\n\np\n\n\n\n\n\n\n\n\n\n\n\nWe can add several geoms to the same plot to show several things at once.\n\n(Re)Make the line plot of monthly rainfall and add geom_point() to it.\n\n\np &lt;- p + geom_point()\np\n\n\n\n\n\n\n\n\n\nNow, add geom_hline(yintercept = mean(climate$rain), linetype = \"dashed\") at the end of your code for the line plot, and update the plot again. Have a look at the code again and understand what it does and how. What do you think ‘h’ in hline stands for?\n\nhline = horizontal line.\n\np &lt;- p + geom_hline(yintercept = mean(climate$rain), \n                    linetype = \"dashed\")\np\n\n\n\n\n\n\n\n\n\nFinally, try adding the following code and update the plot. What changed? Replace X, Y, COL, and TITLE with some more suitable (informative) text.\n\n\nlabs(x = \"X\", y = \"Y\", color = \"COL\", title = \"TITLE\")\n\n\np &lt;- p + labs(x = \"Month\", y = \"Rain\", color = \"Staion\", title = \"Rainfall over month\")\np\n\n\n\n\n\n\n\n\n\n\n\n\nMake a box plot of sunshine per weather station.\n\n\nggplot(climate, \n       aes(y = sun, \n           x = station)) + \n  geom_boxplot()\n\n\n\n\n\n\n\n\n\nColor the boxes according to weather station.\n\n\np &lt;- ggplot(climate, \n            aes(y = sun, \n                x = station,\n                fill = station)) + \n  geom_boxplot()\n\np\n\n\n\n\n\n\n\n\n\n\n\nThere are many ways in which you can manipulate the look of your plot. For this we will use the boxplot you made in the exercise above.\n\nAdd a different legend title with labs(fill = \"Custom Title\").\n\n\np &lt;- p + labs(fill = \"Station\")\np\n\n\n\n\n\n\n\n\n\nChange the theme of the ggplot grid. Suggestions: theme_minimal(), theme_bw(), theme_dark(), theme_void().\n\n\np &lt;- p + theme_minimal()\np\n\n\n\n\n\n\n\n\n\nInstead of automatically chosen colors, pick your own colors for fill = station by adding the scale_fill_manual() command. You will need five colors, one for each station. What happens if you choose too few colors?\n\n\np &lt;- p + scale_fill_manual(values = c('magenta', 'pink1', 'deeppink', 'violet', 'hotpink'))\np \n\n\n\n\n\n\n\n\n\nChange the boxplot to a violin plot. Add the sunshine observations as scatter points to the plot. Include a boxplot inside the violin plot with geom_boxplot(width=.1).\n\n\nggplot(climate, \n       aes(y = sun, \n           x = station,\n           fill = station)) + \n  geom_violin() + \n  geom_point() + \n  geom_boxplot(width=.1)\n\n\n\n\n\n\n\n\n\n\n\n\nMake a histogram (find the correct geom_ for this) of rain from the climate dataset. Interpret the plot, what does it show?\n\nThe plot shows the distribution of accumulated rainfall across stations and months. For most months, the rainfall is around 50 mm.\n\nggplot(climate,\n       aes(x = rain)) + \n  geom_histogram()\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n\n\n\nR suggests that you choose a different number of bins/bin width for the histogram. Use binwidth = inside the histogram geom to experiment with different values of bin width. Look at how the histogram changes.\n\n\nggplot(climate,\n       aes(x = rain)) + \n  geom_histogram(binwidth = 25)\n\n\n\n\n\n\n\n\n\nggplot(climate,\n       aes(x = rain)) + \n  geom_histogram(binwidth = 3)\n\n\n\n\n\n\n\n\n\nColor the entire histogram. Here we are not coloring/filling according to any attribute, just the entire thing so the argument needs to be outside aes().\n\n\nggplot(climate,\n       aes(x = rain)) + \n  geom_histogram(binwidth = 25, fill = 'hotpink')\n\n\n\n\n\n\n\n\n\n\n\n\nMake a bar chart (geom_col()) which visualizes the sunshine hours per month. If you have not done so in question 13, convert month to a factor now and remake the plot.\n\n\nggplot(climate, \n       aes(x = month, \n           y = sun)) +\n  geom_col()\n\n\n\n\n\n\n\n\n\nColor, i.e. divide the bars according to weather station.\n\n\nggplot(climate, \n       aes(x = month, \n           y = sun,\n           fill = station)) +\n  geom_col()\n\n\n\n\n\n\n\n\n\nFor better comparison, place the bars for each station next to each other instead of stacking them.\n\n\nggplot(climate, \n       aes(x = month, \n           y = sun,\n           fill = station)) +\n  geom_col(position = 'dodge')\n\n\n\n\n\n\n\n\n\nMake the axis labels, legend title, and title of the plot more informative by customizing them like you did for the line plot above.\n\n\nggplot(climate, \n       aes(x = month, \n           y = sun,\n           fill = station)) +\n  geom_col(position = 'dodge') + \n  labs(x = 'Month', \n       y = 'Sunshine', \n       fill = 'Weather station',\n       title = 'Sunshine over month')\n\n\n\n\n\n\n\n\n\n\n\n\nMake a new bar chart showing the (total) annual rainfall recorded at each weather station. You will need to calculate this first. The format we need is a dataframe with summed up rain data per station.\n\n\nrain_summary &lt;- climate %&gt;% \n  group_by(station) %&gt;% \n  summarize(rain_sum = sum(rain))\n\nrain_summary\n\n# A tibble: 5 × 2\n  station   rain_sum\n  &lt;chr&gt;        &lt;dbl&gt;\n1 armagh        737.\n2 camborne     1147.\n3 lerwick      1218.\n4 oxford        658.\n5 sheffield     788.\n\n\n\nggplot(rain_summary, \n       aes(x = station,\n           y = rain_sum)) +\n  geom_col()\n\n\n\n\n\n\n\n\n\nSort the stations in accordance to rainfall, either ascending or descending. This was shown in the ggplot lecture. Sort your rain dataframe from the question above by sum, then re-arrange the factor-levels of the ‘station’ as shown in the lecture.\n\n\n# Arrange\nrain_summary &lt;- rain_summary %&gt;% \n  arrange(desc(rain_sum)) \n  \n# Change station to factor\nrain_summary$station &lt;- factor(rain_summary$station, \n                               levels = rain_summary$station)\n\n# Plot \np &lt;- rain_summary %&gt;% \n  ggplot(aes(x = station,\n             y = rain_sum)) +\n  geom_col()\n\np\n\n\n\n\n\n\n\n\n\nAdd labels to each bar that state the sum of the rainfall. You can do this by adding the label keyword to the aes() and adding geom_label() to the plot. Just like geoms like geom_scatter look at the aes() for knowing what to plot on the x and y axis, geom_label looks at it to know what to use for labels.\n\n\np + geom_label(aes(label = sum(rain_sum)))\n\n\n\n\n\n\n\n\n\nAdjust the label positions so that the labels are positioned above the bars instead of inside them.\n\n\np + geom_label(aes(label = rain_sum), \n               position = position_nudge(y = 35))\n\n\n\n\n\n\n\n\n\nTo alter size of figure in report: {r, fig.width=10, fig.height=10}",
    "crumbs": [
      "Course Material",
      "Solutions 💃🏻",
      "Exercise 3 - Solution"
    ]
  },
  {
    "objectID": "Solutions/exercise3_SOLUTIONS.html#getting-started",
    "href": "Solutions/exercise3_SOLUTIONS.html#getting-started",
    "title": "Exercise 3: ggplot2 - Solutions",
    "section": "",
    "text": "Before you proceed with the exercises in this document, make sure to run the command library(tidyverse) in order to load the core tidyverse packages (including ggplot2).\n\nlibrary(tidyverse)\nlibrary(readxl)\n\nThe data set used in these exercises, climate.xlsx1, was compiled from data downloaded in 2017 from the website of the UK’s national weather service, the Met Office.\nThe spreadsheet contains data from five UK weather stations in 2016. The following variables are included in the data set:\n\n\n\nVariable name\nExplanation\n\n\n\n\nstation\nLocation of weather station\n\n\nyear\nYear\n\n\nmonth\nMonth\n\n\naf\nDays of air frost\n\n\nrain\nRainfall in mm\n\n\nsun\nSunshine duration in hours\n\n\ndevice\nBrand of sunshine recorder / sensor\n\n\n\nThe data set is the same as the one used for the Tidyverse exercise. If you have already imported the data, there is no need to import it again, unless you have made changes to the data assigned to climate since the original data set was imported.\n\nclimate &lt;- read_xlsx('../../Data/climate.xlsx')\nhead(climate)\n\n# A tibble: 6 × 7\n  station  year month    af  rain   sun device         \n  &lt;chr&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;          \n1 armagh   2016     1     5 132.   44.5 Campbell Stokes\n2 armagh   2016     2    10  62.6  71.3 Campbell Stokes\n3 armagh   2016     3     4  43.8 117.  Campbell Stokes\n4 armagh   2016     4     5  54   140.  Campbell Stokes\n5 armagh   2016     5     0  41.4 210.  Campbell Stokes\n6 armagh   2016     6     0  75.1 114.  Campbell Stokes\n\n\nNeed a little help? Consult the ggplot2 cheatsheet here: https://rstudio.github.io/cheatsheets/data-visualization.pdf\n\n\n\nMake a scatter (point) plot of rain against sun.\n\n\nggplot(climate, \n       aes(x = rain,\n           y = sun)) +\n  geom_point()\n\n\n\n\n\n\n\n\n\nColor the points in the scatter plot according to weather station. Save the plot in an object.\n\n\nggplot(climate, \n       aes(x = rain,\n           y = sun,\n           color = station)) +\n  geom_point()\n\n\n\n\n\n\n\n\n\nAdd the segment + facet_wrap(vars(station)) to the saved plot object from above, and update the plot. What happens?\n\n\nggplot(climate, \n       aes(x = rain,\n           y = sun,\n           color = station)) +\n  geom_point() + \n  facet_wrap(vars(station))\n\n\n\n\n\n\n\n\n\nIs it necessary to have a legend in the faceted plot? How can you remove this legend? Hint: try adding a theme() with legend.position = \"none\" inside it.\n\n\nggplot(climate, \n       aes(x = rain,\n           y = sun,\n           color = station)) +\n  geom_point() + \n  facet_wrap(vars(station)) + \n  theme(legend.position = \"none\")\n\n\n\n\n\n\n\n\n\n\n\n\nUse ggsave(file=\"weather.jpeg\") to remake the last ggplot as a jpeg-file and save it. The file will be saved on your working directory. Locate this file on your computer and open it.\nUse ggsave(file=\"weather.png\", width=10, height=8, units=\"cm\") to remake the last ggplot as a png-file and save it. What do the three other options do? Look at the help page ?ggsave to get an overview of the possible options.\n\n\n\n\n\nCalculate the average and standard deviation for sunshine in each month and save it to a table called summary_stats. You will need group_by and summarize. Recall how to do this from the tidyverse exercise.\n\n\nsummary_stats &lt;- climate %&gt;%\n  group_by(month) %&gt;% \n  summarize(sun_avg = mean(sun), \n            sun_sd = sd(sun))\n\nhead(summary_stats)\n\n# A tibble: 6 × 3\n  month sun_avg sun_sd\n  &lt;dbl&gt;   &lt;dbl&gt;  &lt;dbl&gt;\n1     1    45.3   9.19\n2     2    86.2  19.5 \n3     3   113.   21.8 \n4     4   160.   16.0 \n5     5   193.   19.1 \n6     6   130.   40.3 \n\n\n\nMake a scatter plot of the summary_stats with month on the x-axis, and the average number of sunshine hours on the y-axis.\n\n\np &lt;- ggplot(summary_stats, \n       aes(x = month,\n           y = sun_avg)) + \n  geom_point()\n\np\n\n\n\n\n\n\n\n\n\nAdd error bars to the plot, which represent the average number of sunshine hours plus/minus the standard deviation of the observations. The relevant geom is called geom_errorbar.\n\n\nHint:\n\ngeom_errorbar(aes(ymin = sun_avg - sun_sd, ymax = sun_avg + sun_sd), width = 0.2)\n\nmapping: ymin = ~sun_avg - sun_sd, ymax = ~sun_avg + sun_sd \ngeom_errorbar: na.rm = FALSE, orientation = NA, width = 0.2\nstat_identity: na.rm = FALSE\nposition_identity \n\n\n\np &lt;- p + geom_errorbar(aes(ymin = sun_avg - sun_sd, ymax = sun_avg + sun_sd), width = 0.2)\n\np\n\n\n\n\n\n\n\n\n\nHow could make the plot with horizontal error bars instead? Tip: Think about which of the two variables, month and average sunshine hours, can meaningfully have an error.\n\n\np + coord_flip()\n\n\n\n\n\n\n\n\n\n\n\n\nMake a line plot (find the correct geom_ for this) of the rainfall observations over time (month), such observations from the same station are connected in one line. Put month on the x-axis. Color the lines according to weather station as well.\n\n\nggplot(climate, \n       aes(x = month,\n           y = rain, \n           color = station)) + \n  geom_line()\n\n\n\n\n\n\n\n\n\nThe month variable was read into R as a numerical variable. Convert this variable to a factor and make the scatter plot from 8 again. What has changed?\n\n\nclimate$month &lt;- as.factor(climate$month)\nstr(climate)\n\ntibble [60 × 7] (S3: tbl_df/tbl/data.frame)\n $ station: chr [1:60] \"armagh\" \"armagh\" \"armagh\" \"armagh\" ...\n $ year   : num [1:60] 2016 2016 2016 2016 2016 ...\n $ month  : Factor w/ 12 levels \"1\",\"2\",\"3\",\"4\",..: 1 2 3 4 5 6 7 8 9 10 ...\n $ af     : num [1:60] 5 10 4 5 0 0 0 0 0 0 ...\n $ rain   : num [1:60] 131.9 62.6 43.8 54 41.4 ...\n $ sun    : num [1:60] 44.5 71.3 117.3 139.7 209.6 ...\n $ device : chr [1:60] \"Campbell Stokes\" \"Campbell Stokes\" \"Campbell Stokes\" \"Campbell Stokes\" ...\n\n\n\np &lt;- ggplot(climate, \n            aes(x = month,\n            y = rain, \n            color = station,\n            group = station)) + \n  geom_line()\n\np\n\n\n\n\n\n\n\n\ngroup = station needs to be added when month is a factor.The plot now shows the individual months instead of showing them on a continuous scale.\n\nUse theme(legend.position = ???) to move the color legend to the top of the plot.\n\n\np &lt;- p + theme(legend.position = 'top')\n\np\n\n\n\n\n\n\n\n\n\n\n\nWe can add several geoms to the same plot to show several things at once.\n\n(Re)Make the line plot of monthly rainfall and add geom_point() to it.\n\n\np &lt;- p + geom_point()\np\n\n\n\n\n\n\n\n\n\nNow, add geom_hline(yintercept = mean(climate$rain), linetype = \"dashed\") at the end of your code for the line plot, and update the plot again. Have a look at the code again and understand what it does and how. What do you think ‘h’ in hline stands for?\n\nhline = horizontal line.\n\np &lt;- p + geom_hline(yintercept = mean(climate$rain), \n                    linetype = \"dashed\")\np\n\n\n\n\n\n\n\n\n\nFinally, try adding the following code and update the plot. What changed? Replace X, Y, COL, and TITLE with some more suitable (informative) text.\n\n\nlabs(x = \"X\", y = \"Y\", color = \"COL\", title = \"TITLE\")\n\n\np &lt;- p + labs(x = \"Month\", y = \"Rain\", color = \"Staion\", title = \"Rainfall over month\")\np\n\n\n\n\n\n\n\n\n\n\n\n\nMake a box plot of sunshine per weather station.\n\n\nggplot(climate, \n       aes(y = sun, \n           x = station)) + \n  geom_boxplot()\n\n\n\n\n\n\n\n\n\nColor the boxes according to weather station.\n\n\np &lt;- ggplot(climate, \n            aes(y = sun, \n                x = station,\n                fill = station)) + \n  geom_boxplot()\n\np\n\n\n\n\n\n\n\n\n\n\n\nThere are many ways in which you can manipulate the look of your plot. For this we will use the boxplot you made in the exercise above.\n\nAdd a different legend title with labs(fill = \"Custom Title\").\n\n\np &lt;- p + labs(fill = \"Station\")\np\n\n\n\n\n\n\n\n\n\nChange the theme of the ggplot grid. Suggestions: theme_minimal(), theme_bw(), theme_dark(), theme_void().\n\n\np &lt;- p + theme_minimal()\np\n\n\n\n\n\n\n\n\n\nInstead of automatically chosen colors, pick your own colors for fill = station by adding the scale_fill_manual() command. You will need five colors, one for each station. What happens if you choose too few colors?\n\n\np &lt;- p + scale_fill_manual(values = c('magenta', 'pink1', 'deeppink', 'violet', 'hotpink'))\np \n\n\n\n\n\n\n\n\n\nChange the boxplot to a violin plot. Add the sunshine observations as scatter points to the plot. Include a boxplot inside the violin plot with geom_boxplot(width=.1).\n\n\nggplot(climate, \n       aes(y = sun, \n           x = station,\n           fill = station)) + \n  geom_violin() + \n  geom_point() + \n  geom_boxplot(width=.1)\n\n\n\n\n\n\n\n\n\n\n\n\nMake a histogram (find the correct geom_ for this) of rain from the climate dataset. Interpret the plot, what does it show?\n\nThe plot shows the distribution of accumulated rainfall across stations and months. For most months, the rainfall is around 50 mm.\n\nggplot(climate,\n       aes(x = rain)) + \n  geom_histogram()\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n\n\n\nR suggests that you choose a different number of bins/bin width for the histogram. Use binwidth = inside the histogram geom to experiment with different values of bin width. Look at how the histogram changes.\n\n\nggplot(climate,\n       aes(x = rain)) + \n  geom_histogram(binwidth = 25)\n\n\n\n\n\n\n\n\n\nggplot(climate,\n       aes(x = rain)) + \n  geom_histogram(binwidth = 3)\n\n\n\n\n\n\n\n\n\nColor the entire histogram. Here we are not coloring/filling according to any attribute, just the entire thing so the argument needs to be outside aes().\n\n\nggplot(climate,\n       aes(x = rain)) + \n  geom_histogram(binwidth = 25, fill = 'hotpink')\n\n\n\n\n\n\n\n\n\n\n\n\nMake a bar chart (geom_col()) which visualizes the sunshine hours per month. If you have not done so in question 13, convert month to a factor now and remake the plot.\n\n\nggplot(climate, \n       aes(x = month, \n           y = sun)) +\n  geom_col()\n\n\n\n\n\n\n\n\n\nColor, i.e. divide the bars according to weather station.\n\n\nggplot(climate, \n       aes(x = month, \n           y = sun,\n           fill = station)) +\n  geom_col()\n\n\n\n\n\n\n\n\n\nFor better comparison, place the bars for each station next to each other instead of stacking them.\n\n\nggplot(climate, \n       aes(x = month, \n           y = sun,\n           fill = station)) +\n  geom_col(position = 'dodge')\n\n\n\n\n\n\n\n\n\nMake the axis labels, legend title, and title of the plot more informative by customizing them like you did for the line plot above.\n\n\nggplot(climate, \n       aes(x = month, \n           y = sun,\n           fill = station)) +\n  geom_col(position = 'dodge') + \n  labs(x = 'Month', \n       y = 'Sunshine', \n       fill = 'Weather station',\n       title = 'Sunshine over month')\n\n\n\n\n\n\n\n\n\n\n\n\nMake a new bar chart showing the (total) annual rainfall recorded at each weather station. You will need to calculate this first. The format we need is a dataframe with summed up rain data per station.\n\n\nrain_summary &lt;- climate %&gt;% \n  group_by(station) %&gt;% \n  summarize(rain_sum = sum(rain))\n\nrain_summary\n\n# A tibble: 5 × 2\n  station   rain_sum\n  &lt;chr&gt;        &lt;dbl&gt;\n1 armagh        737.\n2 camborne     1147.\n3 lerwick      1218.\n4 oxford        658.\n5 sheffield     788.\n\n\n\nggplot(rain_summary, \n       aes(x = station,\n           y = rain_sum)) +\n  geom_col()\n\n\n\n\n\n\n\n\n\nSort the stations in accordance to rainfall, either ascending or descending. This was shown in the ggplot lecture. Sort your rain dataframe from the question above by sum, then re-arrange the factor-levels of the ‘station’ as shown in the lecture.\n\n\n# Arrange\nrain_summary &lt;- rain_summary %&gt;% \n  arrange(desc(rain_sum)) \n  \n# Change station to factor\nrain_summary$station &lt;- factor(rain_summary$station, \n                               levels = rain_summary$station)\n\n# Plot \np &lt;- rain_summary %&gt;% \n  ggplot(aes(x = station,\n             y = rain_sum)) +\n  geom_col()\n\np\n\n\n\n\n\n\n\n\n\nAdd labels to each bar that state the sum of the rainfall. You can do this by adding the label keyword to the aes() and adding geom_label() to the plot. Just like geoms like geom_scatter look at the aes() for knowing what to plot on the x and y axis, geom_label looks at it to know what to use for labels.\n\n\np + geom_label(aes(label = sum(rain_sum)))\n\n\n\n\n\n\n\n\n\nAdjust the label positions so that the labels are positioned above the bars instead of inside them.\n\n\np + geom_label(aes(label = rain_sum), \n               position = position_nudge(y = 35))\n\n\n\n\n\n\n\n\n\nTo alter size of figure in report: {r, fig.width=10, fig.height=10}",
    "crumbs": [
      "Course Material",
      "Solutions 💃🏻",
      "Exercise 3 - Solution"
    ]
  },
  {
    "objectID": "Solutions/exercise3_SOLUTIONS.html#optional-section",
    "href": "Solutions/exercise3_SOLUTIONS.html#optional-section",
    "title": "Exercise 3: ggplot2 - Solutions",
    "section": "Optional section",
    "text": "Optional section\n\nLoad in the climate_change data set generated in the last optional exercises.\n\n\nclimate_change &lt;- readxl::read_excel('../../Data/climate_change.xlsx')\nhead(climate_change)\n\n# A tibble: 6 × 9\n  station  year month    af  rain   sun device          month_names season\n  &lt;chr&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;           &lt;chr&gt;       &lt;chr&gt; \n1 Armagh   2016     1     5 132.   44.5 Campbell Stokes January     Winter\n2 Armagh   2016     2    10  62.6  71.3 Campbell Stokes February    Winter\n3 Armagh   2016     3     4  43.8 117.  Campbell Stokes March       Spring\n4 Armagh   2016     4     5  54   140.  Campbell Stokes April       Spring\n5 Armagh   2016     5     0  41.4 210.  Campbell Stokes May         Spring\n6 Armagh   2016     6     0  75.1 114.  Campbell Stokes June        Summer\n\n\n\nUse group_by, summarize, and facet_wrap to recreate this plot. Consider if some of the variables should change class prior to plotting.\n\n\nclimate_change$year &lt;- factor(climate_change$year, levels = c(2016, 2056))\nclimate_change$season &lt;- factor(climate_change$season, levels = c('Winter', 'Spring', 'Summer', 'Fall'))\n\nclimate_change %&gt;% \n  group_by(year, season, station) %&gt;% \n  summarize(mean_rain = mean(rain)) %&gt;% \n  ggplot(aes(x = season,\n             y = mean_rain, \n             color = year, \n             group = year)) + \n  geom_point() +\n  geom_line() + \n  facet_wrap(vars(station))\n\n`summarise()` has grouped output by 'year', 'season'. You can override using\nthe `.groups` argument.\n\n\n\n\n\n\n\n\nggsave('../Figures/exercise3_36.png')\n\nSaving 7 x 5 in image\n\n\n\nYour supervisor does not like colors. Change the stratification to not include any colors and add white background. Also, update the labels to start with capital letters and give the plot a meaningful title.\n\n\nclimate_change %&gt;% \n  group_by(year, season, station) %&gt;% \n  summarize(mean_rain = mean(rain)) %&gt;% \n  ggplot(aes(x = season,\n             y = mean_rain, \n             linetype = year,\n             group = year)) + \n  geom_point() +\n  geom_line() + \n  facet_wrap(vars(station)) + \n  theme_bw() + \n  labs(x = 'Season', \n       y = 'Mean rain', \n       linetype = 'Year')\n\n`summarise()` has grouped output by 'year', 'season'. You can override using\nthe `.groups` argument.\n\n\n\n\n\n\n\n\n\n\nRecreate this plot. Use whatever colors you like (but change them from the default coloring) and give the plot at meaningful title.\n\n\nclimate_change %&gt;% \n  ggplot(aes(x = af, \n             y = month_names,  \n             color = year)) + \n  geom_boxplot() +\n  scale_color_manual(values = c('orange2', 'blue')) + \n  theme_bw() + \n  labs(x = 'Air frost',\n       y = 'Month',\n       color = 'Year') \n\n\n\n\n\n\n\nggsave('../Figures/exercise3_38.png')\n\nSaving 7 x 5 in image\n\n\n\nRecreate this plot using geom_tile() to make a heatmap, and scale_fill_gradient2() to select custom colors.\n\n\nclimate_change %&gt;% \n  filter(year == 2016) %&gt;% \n  ggplot(aes(x = station,\n             y = month_names, \n             fill = sun)) + \n  geom_tile() + \n  scale_fill_gradient2(mid = 'white', high = 'red') + \n  theme_minimal() +\n  labs(x = 'Station', \n       y = 'Month', \n       fill = 'Sun', \n       title = 'Monthly Sunlight Distribution Across Stations in 2016'\n       ) \n\n\n\n\n\n\n\nggsave('../Figures/exercise3_39.png')\n\nSaving 7 x 5 in image\n\n\n\nMake the same plot as above for year 2056. Compare the two plots. How will the sunlight change across stations and months?\n\n\nclimate_change %&gt;% \n  filter(year == 2056) %&gt;% \n  ggplot(aes(x = station,\n             y = month_names, \n             fill = sun)) + \n  geom_tile() + \n  scale_fill_gradient2(mid = 'white', high = 'red') + \n  theme_minimal() +\n  labs(x = 'Station', \n       y = 'Month', \n       fill = 'Sun', \n       title = 'Monthly Sunlight Distribution Across Stations in 2056'\n       )",
    "crumbs": [
      "Course Material",
      "Solutions 💃🏻",
      "Exercise 3 - Solution"
    ]
  },
  {
    "objectID": "Solutions/exercise3_SOLUTIONS.html#footnotes",
    "href": "Solutions/exercise3_SOLUTIONS.html#footnotes",
    "title": "Exercise 3: ggplot2 - Solutions",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nContains public sector information licensed under the Open Government Licence v3.0.↩︎",
    "crumbs": [
      "Course Material",
      "Solutions 💃🏻",
      "Exercise 3 - Solution"
    ]
  },
  {
    "objectID": "Solutions/presentation4_solutions.html",
    "href": "Solutions/presentation4_solutions.html",
    "title": "Presentation 4: Applied Statistics in R - Solutions",
    "section": "",
    "text": "You can download the presentation4_solutions.qmd file and explore it in your RStudio. Just clink on the file link, download from GitHub and open the file in your local RStudio.\n## Structure of a biostatistical analysis in R\nThe very basic structure of an R script doing a classical statistical analysis is as follows:\nOf course there are variants of this set-up, and in practice there will often be some iterations of the steps.\nIn this manuscript we will exemplify the proposed steps in the analysis of a simple dataset:",
    "crumbs": [
      "Course Material",
      "Solutions 💃🏻",
      "Presentation 4: Applied Statistics in R - Solutions"
    ]
  },
  {
    "objectID": "Solutions/presentation4_solutions.html#example-analysis-of-variance",
    "href": "Solutions/presentation4_solutions.html#example-analysis-of-variance",
    "title": "Presentation 4: Applied Statistics in R - Solutions",
    "section": "Example: Analysis of variance",
    "text": "Example: Analysis of variance\n\nStep 1: Data\nPsoriasis is an immune-mediated disease that affects the skin. You, as a researcher, carried out a micro-array experiment with skin from 37 people in order to examine a potential association between the disease and a certain gene (IGFL4). For each of the 37 samples the gene expression was measured. Fifteen skin samples were from psoriasis patients and from a part of the body affected by the disease (psor); 15 samples were from psoriasis patients but from a part of the body not affected by the disease (psne); and 7 skin samples were from healthy individuals (healthy) included as healthy controls.\nThe data are saved in the file psoriasis.xlsx. At first the variable named type (i.e. skin sample type) is stored as a character variable, we change it to a factor (and check that indeed there are 15, 15 and 7 skin samples in the three groups).\n\n# Read in the data from Excel file and call it psoriasisData\npsoriasisData &lt;- read_excel(\"../../Data/psoriasis.xlsx\")\n\n# View the top rows of the dataset\nhead(psoriasisData)\n\n# A tibble: 6 × 12\n  type  IGFL4 GeneA GeneB GeneC  GeneD GeneE GeneF GeneG   GeneH GeneI GeneJ\n  &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 psne  0.841  2.94  3.16  4.21 -0.476  4.20 0.335  5.20  0.167   2.00  4.62\n2 psne  0.955  2.67  3.23  6.09  0.121  3.66 1.28   5.52  0.0580  2.06  4.35\n3 psne  1.07   2.53  2.80  4.48 -0.165  3.90 1.18   5.40 -0.202   1.95  2.57\n4 psne  1.11   3.56  2.53  4.97  0.139  2.92 0.744  4.98 -0.329   2.03  3.17\n5 psne  1.18   3.48  2.79  4.74 -0.102  3.04 0.513  5.48 -0.116   2.04  3.61\n6 psne  1.20   2.94  3.12  4.20 -0.200  3.46 0.472  3.95 -0.129   1.55  3.56\n\n# Extract the data of interest containing the IGFL4 expression levels and skin sample type from the dataset and call this subset psorData\npsorData  &lt;- select(psoriasisData, type, IGFL4)\n\n# View the top rows of the dataset psorData\nhead(psorData)\n\n# A tibble: 6 × 2\n  type  IGFL4\n  &lt;chr&gt; &lt;dbl&gt;\n1 psne  0.841\n2 psne  0.955\n3 psne  1.07 \n4 psne  1.11 \n5 psne  1.18 \n6 psne  1.20 \n\n# Just a bonus script in case you would like to select all data columns except for IGFL4\n# psorDataG &lt;- select(psoriasisData, -IGFL4)\n\n# Change variable named 'type' to factor so that we can use in our analysis in the next steps\n# First let's check if it is character\nis.character(psorData$type)\n\n[1] TRUE\n\n# Now change to factor\npsorData &lt;- mutate(psorData, type = factor(type))\n# Again, let's check if it is factor now\nis.factor(psorData$type)\n\n[1] TRUE\n\n# Check that there are 15, 15 and 7 skin samples in the three groups. Hint: count()\ncount(psorData, type)\n\n# A tibble: 3 × 2\n  type        n\n  &lt;fct&gt;   &lt;int&gt;\n1 healthy     7\n2 psne       15\n3 psor       15\n\n\nQUESTION 1: According to your count summary table, are there 15 (psor), 15 (psne) and 7 (healthy) skin samples in the three groups? Please share your answer here:\n\n\nStep 2: Descriptive plots and statistics\nTo get an impression of the data, we make two plots, and compute group-wise means and standard deviations. Make (1) a plot showing three groups of skin samples (healthy, psne, psor) and IGFL4 expression levels from each skin sample so that we can visually compare each group of samples with regards to IGLF4 expression levels; (2) a boxplot for the same group-wise comparison. And finally, obtain the group-wise (healthy, psne, psor) descriptive statistics (mean, median and standard deviation). Hint: Consider using ggplot and tidyverse!\n\n# (1) a plot showing three groups of skin samples (healthy, psne, psor) and IGFL4 expression levels from each skin sample\nggplot(psorData, aes(x=type, y=IGFL4)) +\n  geom_point() + \n  labs(x=\"Skin type\", y=\"IGFL4\")\n\n\n\n\n\n\n\n# (2) a boxplot for the same group-wise comparison. Hint: geom_boxplot()\nggplot(psorData, aes(x=type, y=IGFL4)) +\n  geom_boxplot() + \n  labs(x=\"Skin type\", y=\"IGFL4\")\n\n\n\n\n\n\n\n# And finally, obtain the group-wise (healthy, psne, psor) descriptive statistics (mean, median and standard deviation). Hint: group_by()\npsorData %&gt;% \n  group_by(type) %&gt;% \n  summarise(avg=mean(IGFL4), \n            median=median(IGFL4), \n            sd=sd(IGFL4))\n\n# A tibble: 3 × 4\n  type      avg median    sd\n  &lt;fct&gt;   &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt;\n1 healthy 1.34   1.27  0.230\n2 psne    1.39   1.32  0.363\n3 psor    0.955  0.909 0.255\n\n# Alternatively. Notice how the column names can be changed as seen above.\n  group_by(psorData, type) %&gt;% \n  summarise(mean(IGFL4), median(IGFL4), sd(IGFL4))\n\n# A tibble: 3 × 4\n  type    `mean(IGFL4)` `median(IGFL4)` `sd(IGFL4)`\n  &lt;fct&gt;           &lt;dbl&gt;           &lt;dbl&gt;       &lt;dbl&gt;\n1 healthy         1.34            1.27        0.230\n2 psne            1.39            1.32        0.363\n3 psor            0.955           0.909       0.255\n\n\nQUESTION 2: Please rank the three groups by their mean/average IGFL4 expression (descending order). Please share your answer here:\n\n\nStep 3: Fit of oneway ANOVA\nThe scientific question is whether the gene expression level of IGFL4 differs across the three types/groups/categories. Thus, the natural type of analysis is a oneway analysis of variance (ANOVA). The oneway ANOVA is fitted with the lm() function in R. It is a good approach to assign a name (below oneway) to the object with the fitted model. This object contains all relevant information and may be used for subsequent analysis. Note that we need to logarithmic transform the response (i.e. IGFL4 expression levels) as intensities are often on a multiplicative scale.\n\n# oneway analysis of variance (ANOVA)\noneway &lt;- lm(log(IGFL4) ~ type, data=psorData)\n\n# View the model coefficients\noneway\n\n\nCall:\nlm(formula = log(IGFL4) ~ type, data = psorData)\n\nCoefficients:\n(Intercept)     typepsne     typepsor  \n    0.27910      0.01724     -0.35794  \n\n# The intercept in this model represents the mean value (on log scale) of IGFL4 expression for healthy individuals in the dataset. \n# The coefficients represent the differences in the means for IGFL4 expression across skin type categories, [psne - healthy] and [psor - healthy], respectively.\n# Hence, the coefficients are in comparison to the reference category (i.e. reference level). Here, 'healthy' by default. The default reference level order is based on alphabetical or numerical ordering. You can use the levels() function to find the reference level. It is always the first one listed in levels(). \nlevels(psorData$type) \n\n[1] \"healthy\" \"psne\"    \"psor\"   \n\n# Thus we can say, on average, we expect IGFL4 expression to be 0.01724 more in the psne category than that in the healthy category. Similarly, on average, we expect IGFL4 expression to be 0.35794 less in the psor category than that in the healthy category.\n\n# An extra step for demonstrating an additional and useful function - you can change the reference level of the categorical explanatory (i.e. independent) variable, in our case, skin type (variable 'type' in the model). In order to do that, you can use the relevel() function. Please see the example below.\n\n# Make psor (psoriasis-affected skin sample from patients) the reference level\npsorData_relevelpsor &lt;- within(psorData, type &lt;- relevel(type, ref = \"psor\"))\noneway_relevelpsor &lt;- lm(log(IGFL4) ~ type, data=psorData_relevelpsor)\noneway_relevelpsor\n\n\nCall:\nlm(formula = log(IGFL4) ~ type, data = psorData_relevelpsor)\n\nCoefficients:\n(Intercept)  typehealthy     typepsne  \n   -0.07884      0.35794      0.37518  \n\n# Now, 'psor' is the first category in levels.\nlevels(psorData_relevelpsor$type)\n\n[1] \"psor\"    \"healthy\" \"psne\"   \n\n# Make psne (psoriasis-unaffected skin sample from patients) the reference level\npsorData_relevelpsne &lt;- within(psorData, type &lt;- relevel(type, ref = \"psne\"))\noneway_relevelpsne &lt;- lm(log(IGFL4) ~ type, data=psorData_relevelpsne)\noneway_relevelpsne\n\n\nCall:\nlm(formula = log(IGFL4) ~ type, data = psorData_relevelpsne)\n\nCoefficients:\n(Intercept)  typehealthy     typepsor  \n    0.29634     -0.01724     -0.37518  \n\n# Now, 'psor' is the first category in levels.\nlevels(psorData_relevelpsne$type)\n\n[1] \"psne\"    \"healthy\" \"psor\"   \n\n\nQUESTION 3: Are you done? Please share how you feel here:\n\n\nStep 4: Hypothesis test + Post hoc tests\nIt is standard to carry out an \\(F\\)-test for the overall effect of the explanatory (i.e. independent) variable. To be precise, the hypothesis is that the expected values are the same in all groups. The most easy way to do this test is to use drop1. The option test=\"F\" is needed to get the \\(F\\)-test using that function.\n\n# Carry out an $F$-test for the overall effect of the explanatory (i.e. independent) variable\ndrop1(oneway,test=\"F\")\n\nSingle term deletions\n\nModel:\nlog(IGFL4) ~ type\n       Df Sum of Sq    RSS      AIC F value    Pr(&gt;F)    \n&lt;none&gt;              2.0924 -100.286                      \ntype    2    1.2204 3.3128  -87.286  9.9153 0.0004052 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n\nQUESTION 4: What is your conclusion from the \\(F\\)-test result? Please share your answer here:\nThus, the overall test for homogeneity between the groups show that the groups are not all the same. But it might be that the gene expression in two of the three groups, say, are not significantly different. To investigate that we do post hoc testing. This is nicely done within the framework of estimated marginal means using the emmeans package. Here emmeans makes the estimated marginal means (that is the predicted gene expression IGFL4 on the log scale), and the pairs() command provide post hoc pairwise comparisons (package automatically adjusts for multiple comparisons using the default tukey method):\n\n# Run emmeans\nemmeans(oneway,~type)\n\n type     emmean     SE df lower.CL upper.CL\n healthy  0.2791 0.0938 34   0.0885   0.4696\n psne     0.2963 0.0641 34   0.1662   0.4265\n psor    -0.0788 0.0641 34  -0.2090   0.0513\n\nResults are given on the log (not the response) scale. \nConfidence level used: 0.95 \n\n# Perform post hoc pairwise comparisons\npairs(emmeans(oneway,~type))\n\n contrast       estimate     SE df t.ratio p.value\n healthy - psne  -0.0172 0.1136 34  -0.152  0.9874\n healthy - psor   0.3579 0.1136 34   3.152  0.0092\n psne - psor      0.3752 0.0906 34   4.142  0.0006\n\nResults are given on the log (not the response) scale. \nP value adjustment: tukey method for comparing a family of 3 estimates \n\n\nQUESTION 5: What is your conclusion from the pairwise comparisons? Please share your answer here:\nIGFL4 gene expression levels are not significantly different between healthy/control skin samples (healthy) and psoriasis-free patient skin samples (psne; healthy - psne; p-value &gt; 0.05).\nIGFL4 gene expression levels are significantly different between healthy/control skin samples (healthy), psoriasis-free patient skin samples (psne) and psoriasis-affected patient skin samples (psor; healthy - psor and psne - psor; both p-values &lt; 0.05)",
    "crumbs": [
      "Course Material",
      "Solutions 💃🏻",
      "Presentation 4: Applied Statistics in R - Solutions"
    ]
  },
  {
    "objectID": "Solutions/presentation4_solutions.html#outlook-other-analyses",
    "href": "Solutions/presentation4_solutions.html#outlook-other-analyses",
    "title": "Presentation 4: Applied Statistics in R - Solutions",
    "section": "Outlook: Other analyses",
    "text": "Outlook: Other analyses\nThe lm function is used for linear models, that is, models where data points are assumed to be independent with a Gaussian (i.e. normal) distribution (and typically also with the same variance). Obviously, these models are not always appropriate, and there exists functions for many, many more situations and data types. Here, we just mention a few functions corresponding to common data types and statistical problems.\n\nglm: For independent, but non-Gaussian data. Examples are binary outcomes (logistic regression) and outcomes that are counts (Poisson regression). glm is short for generalized linear models, and the glm function is part of the base installation of R.\nlmer and glmer: For data with dependence structures that can be described by random effects, e.g., block designs. lme is short for linear mixed effects (Gaussian data), glmer is short for generalized linear mixed effects (binary or count data). Both functions are part of the lme4 package.\nnls: For non-linear regression, e.g., dose-response analysis. nls is short for non-linear least squares. The function is included in the base installation of R.\n\nThe functions mentioned above are used in a similar way as lm: a model is fitted with the function in question, and the model object subsequently examined with respect to model validation, estimation, computation of confidence limits, hypothesis tests, prediction, etc. with functions summary, confint, drop1, emmeans, pairs as mostly indicated above.",
    "crumbs": [
      "Course Material",
      "Solutions 💃🏻",
      "Presentation 4: Applied Statistics in R - Solutions"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "FromExceltoR",
    "section": "",
    "text": "This 2 day course serves as an introduction to the statistical programming language R for researchers at the Faculty of Health and Medical Sciences, University of Copenhagen. The course is build on code-along presentations and exercises in Quarto documents.\n\nThe course goes through the following topics:\n\nThe basics of R, Rstudio and Quarto\nData wrangling with tidyverse\nPlotting with ggplot2\nBasic applied data science and statistics\n\nThe material in this repository is for teaching purposes only and not to be distributed commercially.\n\nWe will use Quarto for the tutorials of this course. Please see more about Quarto following the links below.\nQuarto website\n“Get started with Quarto” tutorial for RStudio\n“Get started with Quarto” video for RStudio\nComprehensive guides to Quarto basics\n\nFinally… Dear course participants, it would greatly help us if you could complete our feedback form."
  },
  {
    "objectID": "index.html#welcome-to-the-main-page-of-from-excel-to-r",
    "href": "index.html#welcome-to-the-main-page-of-from-excel-to-r",
    "title": "FromExceltoR",
    "section": "",
    "text": "This 2 day course serves as an introduction to the statistical programming language R for researchers at the Faculty of Health and Medical Sciences, University of Copenhagen. The course is build on code-along presentations and exercises in Quarto documents.\n\nThe course goes through the following topics:\n\nThe basics of R, Rstudio and Quarto\nData wrangling with tidyverse\nPlotting with ggplot2\nBasic applied data science and statistics\n\nThe material in this repository is for teaching purposes only and not to be distributed commercially.\n\nWe will use Quarto for the tutorials of this course. Please see more about Quarto following the links below.\nQuarto website\n“Get started with Quarto” tutorial for RStudio\n“Get started with Quarto” video for RStudio\nComprehensive guides to Quarto basics\n\nFinally… Dear course participants, it would greatly help us if you could complete our feedback form."
  },
  {
    "objectID": "index.html#program",
    "href": "index.html#program",
    "title": "FromExceltoR",
    "section": "Program",
    "text": "Program"
  },
  {
    "objectID": "Presentations/presentation1A.html",
    "href": "Presentations/presentation1A.html",
    "title": "Presentation 1A: Intro to R",
    "section": "",
    "text": "R as a calculator\nAdding\n\n1+1\n\n[1] 2\n\n\nSubtracting\n\n2-1\n\n[1] 1\n\n\nMultiplication\n\n3*3\n\n[1] 9\n\n\nDivision\n\n15/3\n\n[1] 5\n\n\nExponentiation\n\n10^2\n\n[1] 100\n\n\nBase-2 logarithm\n\nlog2(20)\n\n[1] 4.321928\n\n\nBase-10 logarithm\n\nlog10(20)\n\n[1] 1.30103\n\n\n\n\nDefine variables\n\na &lt;- 5\n\nb &lt;- 3\n\n\na + b \n\n[1] 8\n\nc &lt;- a + b\n\n\nc\n\n[1] 8\n\n\n\n\nCheck objects in environment\n\nls()\n\n[1] \"a\"               \"b\"               \"c\"               \"pandoc_dir\"     \n[5] \"quarto_bin_path\"\n\n\n\n\nObject Types\nCharacter\n\nchar1 &lt;- \"Hello World!\"\nchar1\n\n[1] \"Hello World!\"\n\nclass(char1)\n\n[1] \"character\"\n\n\nNumeric\n\nnum1 &lt;- 5\nnum1\n\n[1] 5\n\nclass(num1)\n\n[1] \"numeric\"\n\n\nVector\n\nvector1 &lt;- c(1, 2, 3, 4, 5, 'hello', 'world', 7, 1)\nvector1\n\n[1] \"1\"     \"2\"     \"3\"     \"4\"     \"5\"     \"hello\" \"world\" \"7\"     \"1\"    \n\nclass(vector1)\n\n[1] \"character\"\n\n\nList\n\nlist1 &lt;- list(1, 2, 3, 4, 5, 'hello', 'world', 7, 1)\nlist1\n\n[[1]]\n[1] 1\n\n[[2]]\n[1] 2\n\n[[3]]\n[1] 3\n\n[[4]]\n[1] 4\n\n[[5]]\n[1] 5\n\n[[6]]\n[1] \"hello\"\n\n[[7]]\n[1] \"world\"\n\n[[8]]\n[1] 7\n\n[[9]]\n[1] 1\n\nclass(list1)\n\n[1] \"list\"\n\n\nVector of numeric\n\nvector2 &lt;- c(1, 2, 4, 6, 8, 2, 5, 7)\nvector2\n\n[1] 1 2 4 6 8 2 5 7\n\n\n\n\nFunctions\nSumming a vector\n\n?sum\nsum(vector2)\n\n[1] 35\n\n\nMean of vector\n\n?mean\nmean(vector2)\n\n[1] 4.375\n\n\n\nmean(vector2) # mean/average\n\n[1] 4.375\n\nmedian(vector2) # median\n\n[1] 4.5\n\nsd(vector2) # standard deviation\n\n[1] 2.559994\n\nsum(vector2) # sum\n\n[1] 35\n\nmin(vector2) # minimum value\n\n[1] 1\n\nmax(vector2) # maximum value\n\n[1] 8\n\nlength(vector2) # length of vector\n\n[1] 8\n\n\n\n\nWorking directory (Exclude/Move)\nThe term path refers to the trajectory you need to follow from the place you are ‘located’ on your computer to the place you want to work from. When working with Quarto your working directory (wd) is always the same locations as your Quarto document (is not true for .R scripts!). The wd becomes important when we start loading data in from other places (presentation 2).\nNB: These paths are specefic to my computer and the they will be different on your computer.\nSee current working directory.\n\ngetwd()\n\n\"/Users/kgx936/Desktop/HeaDS/GitHub_repos/FromExceltoR/Teachers/Presentations\"\nChange working directory.\n\nsetwd(\"/Users/kgx936/Desktop/HeaDS/GitHub_repos/FromExceltoR\")\n\nRead excel file from path relative to working directory.\n\nlibrary(readxl)\nread_excel(\"/Data/climate.xlsx\")\n\nRead excel file from absolute path.\n\nread_excel(\"~/Users/kgx936/Desktop/HeaDS/GitHub_repos/FromExceltoR/Data/climate.xlsx\")",
    "crumbs": [
      "Course Material",
      "Presentations 👩🏽‍🏫",
      "Presentation 1A: Introduction to R"
    ]
  },
  {
    "objectID": "Presentations/presentation2.html",
    "href": "Presentations/presentation2.html",
    "title": "Presentation 2: Tidyverse",
    "section": "",
    "text": "# Load tidyverse package\nlibrary(tidyverse)\n\nWarning: pakke 'ggplot2' blev bygget under R version 4.2.3\n\n\nWarning: pakke 'tibble' blev bygget under R version 4.2.3\n\n\nWarning: pakke 'dplyr' blev bygget under R version 4.2.3\n\n# Load a package that can read excel files\nlibrary(readxl)\n\nWarning: pakke 'readxl' blev bygget under R version 4.2.3\n\nlibrary(readr)",
    "crumbs": [
      "Course Material",
      "Presentations 👩🏽‍🏫",
      "Presentation 2: Tidyverse"
    ]
  },
  {
    "objectID": "Presentations/presentation2.html#load-packages",
    "href": "Presentations/presentation2.html#load-packages",
    "title": "Presentation 2: Tidyverse",
    "section": "",
    "text": "# Load tidyverse package\nlibrary(tidyverse)\n\nWarning: pakke 'ggplot2' blev bygget under R version 4.2.3\n\n\nWarning: pakke 'tibble' blev bygget under R version 4.2.3\n\n\nWarning: pakke 'dplyr' blev bygget under R version 4.2.3\n\n# Load a package that can read excel files\nlibrary(readxl)\n\nWarning: pakke 'readxl' blev bygget under R version 4.2.3\n\nlibrary(readr)",
    "crumbs": [
      "Course Material",
      "Presentations 👩🏽‍🏫",
      "Presentation 2: Tidyverse"
    ]
  },
  {
    "objectID": "Presentations/presentation2.html#check-working-directory",
    "href": "Presentations/presentation2.html#check-working-directory",
    "title": "Presentation 2: Tidyverse",
    "section": "Check working directory",
    "text": "Check working directory\nCheck working directory so you know from where you work.\n\ngetwd()\n\n[1] \"C:/Users/pnv719/Documents/HeaDS/Courses/Excel_to_R/2025/Mar_2025/FromExceltoR/Teachers/Presentations\"",
    "crumbs": [
      "Course Material",
      "Presentations 👩🏽‍🏫",
      "Presentation 2: Tidyverse"
    ]
  },
  {
    "objectID": "Presentations/presentation2.html#importing-data",
    "href": "Presentations/presentation2.html#importing-data",
    "title": "Presentation 2: Tidyverse",
    "section": "Importing data",
    "text": "Importing data\nOften we will work with large datasets that already exist in i.e. an excel sheet or a tab separated file (.tsv). We can easily load that data into R, either with the read_excel function or by clicking on ‘Import Dataset’ in the Environment tab (right). We can also load data in via a command. Let’s do this now. Navigate to the data from your working directory. Use the tap-button to check what your options are.\n\ncrohns &lt;- read_excel(\"../../Data/crohns_disease.xlsx\")",
    "crumbs": [
      "Course Material",
      "Presentations 👩🏽‍🏫",
      "Presentation 2: Tidyverse"
    ]
  },
  {
    "objectID": "Presentations/presentation2.html#a-first-look-at-the-data",
    "href": "Presentations/presentation2.html#a-first-look-at-the-data",
    "title": "Presentation 2: Tidyverse",
    "section": "A first look at the data",
    "text": "A first look at the data\nPrint first few lines of your dataset\n\nhead(crohns) \n\n# A tibble: 6 × 9\n     ID nrAdvE   BMI height country sex     age weight treat  \n  &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;chr&gt;   &lt;chr&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;chr&gt;  \n1 19908      4  25.2    163 c1      F        47     67 placebo\n2 19909      4  23.8    164 c1      F        53     64 d1     \n3 19910      1  23.0    164 c1      F        68     62 placebo\n4 20908      1  25.7    165 c1      F        48     70 d2     \n5 20909      2  26.0    170 c1      F        67     75 placebo\n6 20910      2  28.7    168 c1      F        54     81 d1     \n\n\nGet the dimension of your dataset\n\ndim(crohns)\n\n[1] 117   9\n\n\nHow many observations (rows) do have?\n\nnrow(crohns)\n\n[1] 117\n\n\nHow many data columns are there and what are their types? Both ‘str’ and ‘summary’ will you what column types you have. Summary has some extra summary stats on numeric columns.\n\nsummary(crohns)\n\n       ID            nrAdvE            BMI            height     \n Min.   :19908   Min.   : 0.000   Min.   :16.00   Min.   :124.0  \n 1st Qu.:23909   1st Qu.: 0.000   1st Qu.:23.05   1st Qu.:157.0  \n Median :25919   Median : 1.000   Median :25.15   Median :162.0  \n Mean   :34103   Mean   : 2.034   Mean   :26.06   Mean   :162.7  \n 3rd Qu.:51909   3rd Qu.: 3.000   3rd Qu.:28.40   3rd Qu.:166.0  \n Max.   :54937   Max.   :12.000   Max.   :44.06   Max.   :182.0  \n   country              sex                 age            weight      \n Length:117         Length:117         Min.   :19.00   Min.   : 36.00  \n Class :character   Class :character   1st Qu.:48.00   1st Qu.: 59.00  \n Mode  :character   Mode  :character   Median :56.00   Median : 68.00  \n                                       Mean   :54.66   Mean   : 69.03  \n                                       3rd Qu.:62.00   3rd Qu.: 76.00  \n                                       Max.   :75.00   Max.   :117.00  \n    treat          \n Length:117        \n Class :character  \n Mode  :character  \n                   \n                   \n                   \n\nstr(crohns)\n\ntibble [117 × 9] (S3: tbl_df/tbl/data.frame)\n $ ID     : num [1:117] 19908 19909 19910 20908 20909 ...\n $ nrAdvE : num [1:117] 4 4 1 1 2 2 3 0 1 0 ...\n $ BMI    : num [1:117] 25.2 23.8 23.1 25.7 25.9 ...\n $ height : num [1:117] 163 164 164 165 170 168 161 168 154 157 ...\n $ country: chr [1:117] \"c1\" \"c1\" \"c1\" \"c1\" ...\n $ sex    : chr [1:117] \"F\" \"F\" \"F\" \"F\" ...\n $ age    : num [1:117] 47 53 68 48 67 54 53 53 47 58 ...\n $ weight : num [1:117] 67 64 62 70 75 81 69 74 76 82 ...\n $ treat  : chr [1:117] \"placebo\" \"d1\" \"placebo\" \"d2\" ...",
    "crumbs": [
      "Course Material",
      "Presentations 👩🏽‍🏫",
      "Presentation 2: Tidyverse"
    ]
  },
  {
    "objectID": "Presentations/presentation2.html#the-anatomy-of-tidyverse",
    "href": "Presentations/presentation2.html#the-anatomy-of-tidyverse",
    "title": "Presentation 2: Tidyverse",
    "section": "The anatomy of tidyverse",
    "text": "The anatomy of tidyverse\nTidyverse is a collection of R packages that are great for data wrangling and visualizations. Data wrangling with functions from the Tidyverse are often used with a specific syntax:\n\nThe name of the variable you are creating. Can omit if you don’t want to save the result.\nThe name of the dataset we are working on.\nThe function you want to apply on the dataset (and whatever arguments must be provided to the function).\n\nIn tidyverse we use the pipe symbol %&gt;% to chain multiple functions together. The term pipe comes from the fact that we pipe the output from one function into another function as the input.\nIt is a good idea to make a new line after each pipe symbol.\n\n# new_object &lt;- dataset %&gt;%\n#   function1(arguments...) %&gt;% \n#   function2(arguments...)",
    "crumbs": [
      "Course Material",
      "Presentations 👩🏽‍🏫",
      "Presentation 2: Tidyverse"
    ]
  },
  {
    "objectID": "Presentations/presentation2.html#count-distinct-sort",
    "href": "Presentations/presentation2.html#count-distinct-sort",
    "title": "Presentation 2: Tidyverse",
    "section": "Count, distinct, sort",
    "text": "Count, distinct, sort\nCount and distinct are very useful to get information about your dataset!\nVariables (columns) can be numeric or categorical (characters, factors). Use the str() function to see the structure of your dataset.\n\ncrohns %&gt;%\n  str()\n\ntibble [117 × 9] (S3: tbl_df/tbl/data.frame)\n $ ID     : num [1:117] 19908 19909 19910 20908 20909 ...\n $ nrAdvE : num [1:117] 4 4 1 1 2 2 3 0 1 0 ...\n $ BMI    : num [1:117] 25.2 23.8 23.1 25.7 25.9 ...\n $ height : num [1:117] 163 164 164 165 170 168 161 168 154 157 ...\n $ country: chr [1:117] \"c1\" \"c1\" \"c1\" \"c1\" ...\n $ sex    : chr [1:117] \"F\" \"F\" \"F\" \"F\" ...\n $ age    : num [1:117] 47 53 68 48 67 54 53 53 47 58 ...\n $ weight : num [1:117] 67 64 62 70 75 81 69 74 76 82 ...\n $ treat  : chr [1:117] \"placebo\" \"d1\" \"placebo\" \"d2\" ...\n\n\ndistinct() tells us how many different levels a categorical variable has.\n\n# How many different treatments do we have? \ncrohns %&gt;% \n  distinct(treat)\n\n# A tibble: 3 × 1\n  treat  \n  &lt;chr&gt;  \n1 placebo\n2 d1     \n3 d2     \n\n#From how many different countries do we have data?\ncrohns %&gt;% \n  distinct(country)\n\n# A tibble: 2 × 1\n  country\n  &lt;chr&gt;  \n1 c1     \n2 c2     \n\n\ncount() does tabulation of categorical variables. Total number of lines, i.e. patients in the current dataset. Observe, this matches with the number of lines you can see in the Environment tab.\n\ncrohns %&gt;% \n  count()\n\n# A tibble: 1 × 1\n      n\n  &lt;int&gt;\n1   117\n\n\n\n# How many lines, i.e. patients do we have per treatment?\ncrohns %&gt;% \n  count(treat)\n\n# A tibble: 3 × 2\n  treat       n\n  &lt;chr&gt;   &lt;int&gt;\n1 d1         39\n2 d2         39\n3 placebo    39\n\n# Is our dataset balanced?\n\n# How many patients do we have for each age?\ncrohns %&gt;% \n  count(age)\n\n# A tibble: 43 × 2\n     age     n\n   &lt;dbl&gt; &lt;int&gt;\n 1    19     1\n 2    28     1\n 3    29     1\n 4    30     1\n 5    33     1\n 6    35     1\n 7    36     1\n 8    38     1\n 9    39     3\n10    40     2\n# ℹ 33 more rows\n\n# Perhaps this is more useful: How many patients are older than 65?\ncrohns %&gt;% \n  count(age &gt; 65)\n\n# A tibble: 2 × 2\n  `age &gt; 65`     n\n  &lt;lgl&gt;      &lt;int&gt;\n1 FALSE         96\n2 TRUE          21\n\n\nNote we haven’t saved anything here, we just get output to the console sorted in a certain way. This helps us to check if the data looks correct and get an impression.\narrange is used to impose a sort on the passed column\n\ncrohns %&gt;% \n  arrange(age)\n\n# A tibble: 117 × 9\n      ID nrAdvE   BMI height country sex     age weight treat  \n   &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;chr&gt;   &lt;chr&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;chr&gt;  \n 1 28912      0  24.0    166 c1      F        19     66 d1     \n 2 23912      0  16      150 c1      F        28     36 d1     \n 3 22915      3  25.3    164 c1      F        29     68 d2     \n 4 54924      0  22.8    161 c2      F        30     59 d2     \n 5 28909      0  24.3    172 c1      F        33     72 d1     \n 6 53909      3  23.7    172 c2      M        35     70 placebo\n 7 22912      2  21.0    162 c1      F        36     55 placebo\n 8 51908      0  23.7    172 c2      M        38     70 d2     \n 9 24908      1  27.1    173 c1      F        39     81 placebo\n10 25911      8  21.1    154 c1      F        39     50 d2     \n# ℹ 107 more rows\n\n\n\n#reverse sort\ncrohns %&gt;% \n  arrange(desc(age))\n\n# A tibble: 117 × 9\n      ID nrAdvE   BMI height country sex     age weight treat  \n   &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;chr&gt;   &lt;chr&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;chr&gt;  \n 1 22914      3  25.2    157 c1      F        75     62 d2     \n 2 54926      0  20.5    153 c2      F        74     48 placebo\n 3 26908      0  25.8    150 c1      F        73     58 d1     \n 4 54933      2  26.4    165 c2      F        73     72 placebo\n 5 22909      8  30.8    156 c1      M        71     75 placebo\n 6 53910      6  24.8    162 c2      F        70     65 d1     \n 7 54929      1  25.5    152 c2      F        70     59 d2     \n 8 24912      0  25.2    162 c1      F        69     66 placebo\n 9 25920      1  27.9    164 c1      F        69     75 d1     \n10 53908      1  31.2    152 c2      F        69     72 placebo\n# ℹ 107 more rows\n\n\n\n#sort by two (or more!) columns\ncrohns %&gt;% \n  arrange(sex, desc(age))\n\n# A tibble: 117 × 9\n      ID nrAdvE   BMI height country sex     age weight treat  \n   &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;chr&gt;   &lt;chr&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;chr&gt;  \n 1 22914      3  25.2    157 c1      F        75     62 d2     \n 2 54926      0  20.5    153 c2      F        74     48 placebo\n 3 26908      0  25.8    150 c1      F        73     58 d1     \n 4 54933      2  26.4    165 c2      F        73     72 placebo\n 5 53910      6  24.8    162 c2      F        70     65 d1     \n 6 54929      1  25.5    152 c2      F        70     59 d2     \n 7 24912      0  25.2    162 c1      F        69     66 placebo\n 8 25920      1  27.9    164 c1      F        69     75 d1     \n 9 53908      1  31.2    152 c2      F        69     72 placebo\n10 19910      1  23.0    164 c1      F        68     62 placebo\n# ℹ 107 more rows\n\n\nJust like with count earlier this is not a permanent sort and does not change the order of rows in the original tibble, crohns. Without assignment (&lt;-) tidyverse commands only display the result, not save it.",
    "crumbs": [
      "Course Material",
      "Presentations 👩🏽‍🏫",
      "Presentation 2: Tidyverse"
    ]
  },
  {
    "objectID": "Presentations/presentation2.html#filtering-data-selecting-rows-with-filter",
    "href": "Presentations/presentation2.html#filtering-data-selecting-rows-with-filter",
    "title": "Presentation 2: Tidyverse",
    "section": "Filtering data (selecting rows) with filter()",
    "text": "Filtering data (selecting rows) with filter()\nHow we subset dataset into subsets we find interesting. For example only female patients:\n\ncrohns %&gt;% \n  filter(sex == 'F') # processed from left to right\n\n# A tibble: 100 × 9\n      ID nrAdvE   BMI height country sex     age weight treat  \n   &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;chr&gt;   &lt;chr&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;chr&gt;  \n 1 19908      4  25.2    163 c1      F        47     67 placebo\n 2 19909      4  23.8    164 c1      F        53     64 d1     \n 3 19910      1  23.0    164 c1      F        68     62 placebo\n 4 20908      1  25.7    165 c1      F        48     70 d2     \n 5 20909      2  26.0    170 c1      F        67     75 placebo\n 6 20910      2  28.7    168 c1      F        54     81 d1     \n 7 21908      3  26.6    161 c1      F        53     69 d1     \n 8 21909      0  26.2    168 c1      F        53     74 placebo\n 9 21910      1  32.0    154 c1      F        47     76 d2     \n10 21911      0  33.3    157 c1      F        58     82 placebo\n# ℹ 90 more rows\n\n\nA great about tidyverse: write code the way you think. You always filter by defining conditions. If the condition evaluates to ‘TRUE’ the line is included. See only data lines for patients over 65:\n\ncrohns %&gt;% \n  filter(age &gt; 65)\n\n# A tibble: 21 × 9\n      ID nrAdvE   BMI height country sex     age weight treat  \n   &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;chr&gt;   &lt;chr&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;chr&gt;  \n 1 19910      1  23.0    164 c1      F        68     62 placebo\n 2 20909      2  26.0    170 c1      F        67     75 placebo\n 3 22908      5  18.2    159 c1      F        66     46 d2     \n 4 22909      8  30.8    156 c1      M        71     75 placebo\n 5 22911      3  24.8    182 c1      M        68     82 d2     \n 6 22914      3  25.2    157 c1      F        75     62 d2     \n 7 24912      0  25.2    162 c1      F        69     66 placebo\n 8 25920      1  27.9    164 c1      F        69     75 d1     \n 9 26908      0  25.8    150 c1      F        73     58 d1     \n10 26910      0  19.1    165 c1      F        66     52 d1     \n# ℹ 11 more rows\n\n\nFrom the above commands we are getting the result printed to the console. This is useful to check something. To save the result, we need to re-assign:\n\nseniors &lt;- crohns %&gt;% \n  filter(age &gt; 65)\n\nView newly created data frame:\n\nseniors\n\n# A tibble: 21 × 9\n      ID nrAdvE   BMI height country sex     age weight treat  \n   &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;chr&gt;   &lt;chr&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;chr&gt;  \n 1 19910      1  23.0    164 c1      F        68     62 placebo\n 2 20909      2  26.0    170 c1      F        67     75 placebo\n 3 22908      5  18.2    159 c1      F        66     46 d2     \n 4 22909      8  30.8    156 c1      M        71     75 placebo\n 5 22911      3  24.8    182 c1      M        68     82 d2     \n 6 22914      3  25.2    157 c1      F        75     62 d2     \n 7 24912      0  25.2    162 c1      F        69     66 placebo\n 8 25920      1  27.9    164 c1      F        69     75 d1     \n 9 26908      0  25.8    150 c1      F        73     58 d1     \n10 26910      0  19.1    165 c1      F        66     52 d1     \n# ℹ 11 more rows\n\n\nDo we still have all three treatment groups in our subset?\n\nseniors %&gt;%\n  count(treat)\n\n# A tibble: 3 × 2\n  treat       n\n  &lt;chr&gt;   &lt;int&gt;\n1 d1          6\n2 d2          5\n3 placebo    10",
    "crumbs": [
      "Course Material",
      "Presentations 👩🏽‍🏫",
      "Presentation 2: Tidyverse"
    ]
  },
  {
    "objectID": "Presentations/presentation2.html#the-world-of-conditional-operators",
    "href": "Presentations/presentation2.html#the-world-of-conditional-operators",
    "title": "Presentation 2: Tidyverse",
    "section": "The world of conditional operators",
    "text": "The world of conditional operators\nNow we get lines that fit certain conditions but what if I want to filter on more than one condition? Enter conditional operators!\nThe ‘and’ operator: &\nWe can also subset on several conditions. Here are younger patients who received drug 1:\n\ncrohns %&gt;% \n  filter(age &lt;= 65 & treat == 'd1')\n\n# A tibble: 33 × 9\n      ID nrAdvE   BMI height country sex     age weight treat\n   &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;chr&gt;   &lt;chr&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;chr&gt;\n 1 19909      4  23.8    164 c1      F        53     64 d1   \n 2 20910      2  28.7    168 c1      F        54     81 d1   \n 3 21908      3  26.6    161 c1      F        53     69 d1   \n 4 21916      0  23.9    177 c1      M        56     75 d1   \n 5 22916      2  30.9    163 c1      F        53     82 d1   \n 6 23908      0  30.4    158 c1      F        55     76 d1   \n 7 23909      0  23.4    156 c1      F        44     57 d1   \n 8 23910      0  26.7    156 c1      F        59     65 d1   \n 9 23912      0  16      150 c1      F        28     36 d1   \n10 24909      0  22.5    155 c1      F        52     54 d1   \n# ℹ 23 more rows\n\n\nThe ‘or’ operator: |\nGet patients that were treated with either drug 1 or the placebo:\n\ncrohns %&gt;% \n  filter(treat == 'placebo' | treat == 'd1')\n\n# A tibble: 78 × 9\n      ID nrAdvE   BMI height country sex     age weight treat  \n   &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;chr&gt;   &lt;chr&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;chr&gt;  \n 1 19908      4  25.2    163 c1      F        47     67 placebo\n 2 19909      4  23.8    164 c1      F        53     64 d1     \n 3 19910      1  23.0    164 c1      F        68     62 placebo\n 4 20909      2  26.0    170 c1      F        67     75 placebo\n 5 20910      2  28.7    168 c1      F        54     81 d1     \n 6 21908      3  26.6    161 c1      F        53     69 d1     \n 7 21909      0  26.2    168 c1      F        53     74 placebo\n 8 21911      0  33.3    157 c1      F        58     82 placebo\n 9 21914      6  28.4    170 c1      M        58     82 placebo\n10 21916      0  23.9    177 c1      M        56     75 d1     \n# ℹ 68 more rows\n\n\nThe ‘not’ operator: !\n\ncrohns %&gt;% \n  filter(treat != 'placebo')\n\n# A tibble: 78 × 9\n      ID nrAdvE   BMI height country sex     age weight treat\n   &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;chr&gt;   &lt;chr&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;chr&gt;\n 1 19909      4  23.8    164 c1      F        53     64 d1   \n 2 20908      1  25.7    165 c1      F        48     70 d2   \n 3 20910      2  28.7    168 c1      F        54     81 d1   \n 4 21908      3  26.6    161 c1      F        53     69 d1   \n 5 21910      1  32.0    154 c1      F        47     76 d2   \n 6 21912      5  32.5    152 c1      F        63     75 d2   \n 7 21913      2  37.6    159 c1      F        54     95 d2   \n 8 21915      0  23.0    160 c1      F        54     59 d2   \n 9 21916      0  23.9    177 c1      M        56     75 d1   \n10 21917      0  36.4    164 c1      F        51     98 d2   \n# ℹ 68 more rows\n\n\nOther conditional operators can be found in the first presentation or when querying the function (or just google it).\n\n?dplyr::filter\n\nstarting httpd help server ... done\n\n\nYou can also allow multiple arguments in a variable. Here are the young patients who got treatment with either drug 1 or 2:\n\ncrohns %&gt;% \n  filter(age &lt;= 65 & treat %in% c(\"d1\",\"d2\"))\n\n# A tibble: 67 × 9\n      ID nrAdvE   BMI height country sex     age weight treat\n   &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;chr&gt;   &lt;chr&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;chr&gt;\n 1 19909      4  23.8    164 c1      F        53     64 d1   \n 2 20908      1  25.7    165 c1      F        48     70 d2   \n 3 20910      2  28.7    168 c1      F        54     81 d1   \n 4 21908      3  26.6    161 c1      F        53     69 d1   \n 5 21910      1  32.0    154 c1      F        47     76 d2   \n 6 21912      5  32.5    152 c1      F        63     75 d2   \n 7 21913      2  37.6    159 c1      F        54     95 d2   \n 8 21915      0  23.0    160 c1      F        54     59 d2   \n 9 21916      0  23.9    177 c1      M        56     75 d1   \n10 21917      0  36.4    164 c1      F        51     98 d2   \n# ℹ 57 more rows",
    "crumbs": [
      "Course Material",
      "Presentations 👩🏽‍🏫",
      "Presentation 2: Tidyverse"
    ]
  },
  {
    "objectID": "Presentations/presentation2.html#selecting-variables-columns-with-select",
    "href": "Presentations/presentation2.html#selecting-variables-columns-with-select",
    "title": "Presentation 2: Tidyverse",
    "section": "Selecting variables (columns) with select()",
    "text": "Selecting variables (columns) with select()\nWe can choose to only include certain columns. Here, we select only BMI, age and the number of adverse events:\n\ncrohns %&gt;% \n  select(nrAdvE, BMI, age)\n\n# A tibble: 117 × 3\n   nrAdvE   BMI   age\n    &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n 1      4  25.2    47\n 2      4  23.8    53\n 3      1  23.0    68\n 4      1  25.7    48\n 5      2  26.0    67\n 6      2  28.7    54\n 7      3  26.6    53\n 8      0  26.2    53\n 9      1  32.0    47\n10      0  33.3    58\n# ℹ 107 more rows\n\n\nWe can also make a negative selection that excludes the named column(s). The ID doesn’t give us any information since the data is anonymized:\n\nwithout_id &lt;- crohns %&gt;% \n  select(-ID)\n\nWe have saved the dataset without the ID column in at new variable. Let’s have a look at this:\n\nwithout_id\n\n# A tibble: 117 × 8\n   nrAdvE   BMI height country sex     age weight treat  \n    &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;chr&gt;   &lt;chr&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;chr&gt;  \n 1      4  25.2    163 c1      F        47     67 placebo\n 2      4  23.8    164 c1      F        53     64 d1     \n 3      1  23.0    164 c1      F        68     62 placebo\n 4      1  25.7    165 c1      F        48     70 d2     \n 5      2  26.0    170 c1      F        67     75 placebo\n 6      2  28.7    168 c1      F        54     81 d1     \n 7      3  26.6    161 c1      F        53     69 d1     \n 8      0  26.2    168 c1      F        53     74 placebo\n 9      1  32.0    154 c1      F        47     76 d2     \n10      0  33.3    157 c1      F        58     82 placebo\n# ℹ 107 more rows",
    "crumbs": [
      "Course Material",
      "Presentations 👩🏽‍🏫",
      "Presentation 2: Tidyverse"
    ]
  },
  {
    "objectID": "Presentations/presentation2.html#transformation-of-data-with-mutate",
    "href": "Presentations/presentation2.html#transformation-of-data-with-mutate",
    "title": "Presentation 2: Tidyverse",
    "section": "Transformation of data with mutate()",
    "text": "Transformation of data with mutate()\nWe can create new columns based on other columns with the mutate() function.\nThis is our original tibble:\n\ncrohns\n\n# A tibble: 117 × 9\n      ID nrAdvE   BMI height country sex     age weight treat  \n   &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;chr&gt;   &lt;chr&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;chr&gt;  \n 1 19908      4  25.2    163 c1      F        47     67 placebo\n 2 19909      4  23.8    164 c1      F        53     64 d1     \n 3 19910      1  23.0    164 c1      F        68     62 placebo\n 4 20908      1  25.7    165 c1      F        48     70 d2     \n 5 20909      2  26.0    170 c1      F        67     75 placebo\n 6 20910      2  28.7    168 c1      F        54     81 d1     \n 7 21908      3  26.6    161 c1      F        53     69 d1     \n 8 21909      0  26.2    168 c1      F        53     74 placebo\n 9 21910      1  32.0    154 c1      F        47     76 d2     \n10 21911      0  33.3    157 c1      F        58     82 placebo\n# ℹ 107 more rows\n\n\nWe want to add height in meters in a new column. It is important to reassign the dataframe if you want to save the new column.\n\ncrohns &lt;- crohns %&gt;% \n  mutate(height_m = height/100)\n\ncrohns\n\n# A tibble: 117 × 10\n      ID nrAdvE   BMI height country sex     age weight treat   height_m\n   &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;chr&gt;   &lt;chr&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;chr&gt;      &lt;dbl&gt;\n 1 19908      4  25.2    163 c1      F        47     67 placebo     1.63\n 2 19909      4  23.8    164 c1      F        53     64 d1          1.64\n 3 19910      1  23.0    164 c1      F        68     62 placebo     1.64\n 4 20908      1  25.7    165 c1      F        48     70 d2          1.65\n 5 20909      2  26.0    170 c1      F        67     75 placebo     1.7 \n 6 20910      2  28.7    168 c1      F        54     81 d1          1.68\n 7 21908      3  26.6    161 c1      F        53     69 d1          1.61\n 8 21909      0  26.2    168 c1      F        53     74 placebo     1.68\n 9 21910      1  32.0    154 c1      F        47     76 d2          1.54\n10 21911      0  33.3    157 c1      F        58     82 placebo     1.57\n# ℹ 107 more rows\n\n\nWe can also create columns based on TRUE/FALSE conditions. According to the CDC, a person with a BMI &lt; 18.5 is underweight:\n\ncrohns &lt;- crohns %&gt;% \n  mutate(underweight = ifelse(BMI &lt; 18.5, \"Yes\", \"No\"))\n\ncrohns\n\n# A tibble: 117 × 11\n      ID nrAdvE   BMI height country sex     age weight treat   height_m\n   &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;chr&gt;   &lt;chr&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;chr&gt;      &lt;dbl&gt;\n 1 19908      4  25.2    163 c1      F        47     67 placebo     1.63\n 2 19909      4  23.8    164 c1      F        53     64 d1          1.64\n 3 19910      1  23.0    164 c1      F        68     62 placebo     1.64\n 4 20908      1  25.7    165 c1      F        48     70 d2          1.65\n 5 20909      2  26.0    170 c1      F        67     75 placebo     1.7 \n 6 20910      2  28.7    168 c1      F        54     81 d1          1.68\n 7 21908      3  26.6    161 c1      F        53     69 d1          1.61\n 8 21909      0  26.2    168 c1      F        53     74 placebo     1.68\n 9 21910      1  32.0    154 c1      F        47     76 d2          1.54\n10 21911      0  33.3    157 c1      F        58     82 placebo     1.57\n# ℹ 107 more rows\n# ℹ 1 more variable: underweight &lt;chr&gt;\n\n\nHow many patients are underweight?\n\ncrohns %&gt;%\n  count(underweight)\n\n# A tibble: 2 × 2\n  underweight     n\n  &lt;chr&gt;       &lt;int&gt;\n1 No            113\n2 Yes             4\n\n\nHave a look at the mutate() function:\n\n?mutate",
    "crumbs": [
      "Course Material",
      "Presentations 👩🏽‍🏫",
      "Presentation 2: Tidyverse"
    ]
  },
  {
    "objectID": "Presentations/presentation2.html#summary-statistics-revisited-with-summarize",
    "href": "Presentations/presentation2.html#summary-statistics-revisited-with-summarize",
    "title": "Presentation 2: Tidyverse",
    "section": "Summary statistics, revisited with summarize()",
    "text": "Summary statistics, revisited with summarize()\nMethods from before:\n\nmean(crohns$age)\n\n[1] 54.65812\n\nmax(crohns$age)\n\n[1] 75\n\nsummary(crohns)\n\n       ID            nrAdvE            BMI            height     \n Min.   :19908   Min.   : 0.000   Min.   :16.00   Min.   :124.0  \n 1st Qu.:23909   1st Qu.: 0.000   1st Qu.:23.05   1st Qu.:157.0  \n Median :25919   Median : 1.000   Median :25.15   Median :162.0  \n Mean   :34103   Mean   : 2.034   Mean   :26.06   Mean   :162.7  \n 3rd Qu.:51909   3rd Qu.: 3.000   3rd Qu.:28.40   3rd Qu.:166.0  \n Max.   :54937   Max.   :12.000   Max.   :44.06   Max.   :182.0  \n   country              sex                 age            weight      \n Length:117         Length:117         Min.   :19.00   Min.   : 36.00  \n Class :character   Class :character   1st Qu.:48.00   1st Qu.: 59.00  \n Mode  :character   Mode  :character   Median :56.00   Median : 68.00  \n                                       Mean   :54.66   Mean   : 69.03  \n                                       3rd Qu.:62.00   3rd Qu.: 76.00  \n                                       Max.   :75.00   Max.   :117.00  \n    treat              height_m     underweight       \n Length:117         Min.   :1.240   Length:117        \n Class :character   1st Qu.:1.570   Class :character  \n Mode  :character   Median :1.620   Mode  :character  \n                    Mean   :1.627                     \n                    3rd Qu.:1.660                     \n                    Max.   :1.820                     \n\n\nThe summarize() function does the same but in a tidyverse way and gives the result in a table which you can export and send to your colleagues.\n\ncrohns %&gt;% \n  summarize(mean(age),\n            max(age))\n\n# A tibble: 1 × 2\n  `mean(age)` `max(age)`\n        &lt;dbl&gt;      &lt;dbl&gt;\n1        54.7         75\n\n\nWe can also specify names for the new columns:\n\ncrohns %&gt;% \n  summarize(mean_age = mean(age),\n            max_age = max(age))\n\n# A tibble: 1 × 2\n  mean_age max_age\n     &lt;dbl&gt;   &lt;dbl&gt;\n1     54.7      75\n\n\nWhat kind of things can you summarize? Have a look at the help by typing ?summarize into the console, or ‘summarize’ into the help panel and scroll down to ‘Useful functions’.\nA useful summarize function is n() which counts the number of lines.\n\ncrohns %&gt;% \n  summarize(mean_age = mean(age),\n            max_age = max(age),\n            number_lines = n())\n\n# A tibble: 1 × 3\n  mean_age max_age number_lines\n     &lt;dbl&gt;   &lt;dbl&gt;        &lt;int&gt;\n1     54.7      75          117\n\n\nNote that R is tolerant of BE/AE spelling differences. summarise() and summarize() are the same function, likewise with color and colour.",
    "crumbs": [
      "Course Material",
      "Presentations 👩🏽‍🏫",
      "Presentation 2: Tidyverse"
    ]
  },
  {
    "objectID": "Presentations/presentation2.html#grouping-with-group_by",
    "href": "Presentations/presentation2.html#grouping-with-group_by",
    "title": "Presentation 2: Tidyverse",
    "section": "Grouping with group_by()",
    "text": "Grouping with group_by()\nThe function group_by() imposes a grouping on a tibble. Group according to sex:\n\ncrohns %&gt;%\n  group_by(sex)\n\n# A tibble: 117 × 11\n# Groups:   sex [2]\n      ID nrAdvE   BMI height country sex     age weight treat   height_m\n   &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;chr&gt;   &lt;chr&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;chr&gt;      &lt;dbl&gt;\n 1 19908      4  25.2    163 c1      F        47     67 placebo     1.63\n 2 19909      4  23.8    164 c1      F        53     64 d1          1.64\n 3 19910      1  23.0    164 c1      F        68     62 placebo     1.64\n 4 20908      1  25.7    165 c1      F        48     70 d2          1.65\n 5 20909      2  26.0    170 c1      F        67     75 placebo     1.7 \n 6 20910      2  28.7    168 c1      F        54     81 d1          1.68\n 7 21908      3  26.6    161 c1      F        53     69 d1          1.61\n 8 21909      0  26.2    168 c1      F        53     74 placebo     1.68\n 9 21910      1  32.0    154 c1      F        47     76 d2          1.54\n10 21911      0  33.3    157 c1      F        58     82 placebo     1.57\n# ℹ 107 more rows\n# ℹ 1 more variable: underweight &lt;chr&gt;\n\n\nWe can also group according to several variables. How many groups will we get?\n\ncrohns %&gt;%\n  group_by(sex, treat)\n\n# A tibble: 117 × 11\n# Groups:   sex, treat [6]\n      ID nrAdvE   BMI height country sex     age weight treat   height_m\n   &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;chr&gt;   &lt;chr&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;chr&gt;      &lt;dbl&gt;\n 1 19908      4  25.2    163 c1      F        47     67 placebo     1.63\n 2 19909      4  23.8    164 c1      F        53     64 d1          1.64\n 3 19910      1  23.0    164 c1      F        68     62 placebo     1.64\n 4 20908      1  25.7    165 c1      F        48     70 d2          1.65\n 5 20909      2  26.0    170 c1      F        67     75 placebo     1.7 \n 6 20910      2  28.7    168 c1      F        54     81 d1          1.68\n 7 21908      3  26.6    161 c1      F        53     69 d1          1.61\n 8 21909      0  26.2    168 c1      F        53     74 placebo     1.68\n 9 21910      1  32.0    154 c1      F        47     76 d2          1.54\n10 21911      0  33.3    157 c1      F        58     82 placebo     1.57\n# ℹ 107 more rows\n# ℹ 1 more variable: underweight &lt;chr&gt;\n\n\nBy itself, group_by does nothing, we still get the same dataset returned. But it is very useful in combination with other commands! The reason we want to do it this is way is that we can first impose grouping with group_by() and then pipe, %&gt;%, the resulting tibble into summarize which will respect our grouping. So smart!\n\ncrohns %&gt;%                      # the dataset\n  group_by(sex) %&gt;%             # grouped by sex\n  summarise(avg = mean(age),    # calculate mean of the age\n            med = median(age),  # calc median\n            stdev = sd(age),    # calc standard dev.\n            n = n())            # get the number of observations\n\n# A tibble: 2 × 5\n  sex     avg   med stdev     n\n  &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt;\n1 F      54.7    55  10.8   100\n2 M      54.3    56  10.4    17\n\n\nNow we see why n() is useful: It tells us how many lines, i.e. patients are in each group.\nGroup by sex and treatment, and calculate stats for the number of adverse events.\n\ncrohns %&gt;%                              # the dataset\n  group_by(sex, treat) %&gt;%              # grouped by sex\n  summarise(avg = mean(nrAdvE),         # calculate mean number of adverse events\n            med = median(nrAdvE),       # calc median\n            max = max(nrAdvE),          # calc max \n            stdev = sd(nrAdvE),         # calc standard dev.\n            total_events = sum(nrAdvE), # calc cumulative sum \n            n = n())                    # get the number of observations\n\n# A tibble: 6 × 8\n# Groups:   sex [2]\n  sex   treat     avg   med   max stdev total_events     n\n  &lt;chr&gt; &lt;chr&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;        &lt;dbl&gt; &lt;int&gt;\n1 F     d1       1.5      0     7  2.08           51    34\n2 F     d2       2.12     1     9  2.71           72    34\n3 F     placebo  2.16     1    12  3.09           69    32\n4 M     d1       2        0     9  3.94           10     5\n5 M     d2       2.2      2     6  2.49           11     5\n6 M     placebo  3.57     3     8  3.41           25     7",
    "crumbs": [
      "Course Material",
      "Presentations 👩🏽‍🏫",
      "Presentation 2: Tidyverse"
    ]
  },
  {
    "objectID": "Presentations/presentation2.html#the-might-of-the-pipe-operator",
    "href": "Presentations/presentation2.html#the-might-of-the-pipe-operator",
    "title": "Presentation 2: Tidyverse",
    "section": "The might of the pipe operator: %>%",
    "text": "The might of the pipe operator: %&gt;%\nMany commands can be combined with the pipe operator to pipe data through an analysis workflow.\n\ncrohns %&gt;%                              # the dataset\n  filter(age &gt; 65) %&gt;%                  # filtered to only people over 65\n  group_by(sex, treat) %&gt;%              # Grouping \n  summarise(avg = mean(nrAdvE),         # calculate mean number of adverse events\n            med = median(nrAdvE),       # calc median\n            max = max(nrAdvE),          # calc max \n            stdev = sd(nrAdvE),         # calc standard dev.\n            total_events = sum(nrAdvE), # calc cumulative sum \n            n = n()) %&gt;%                # get the number of observations\n  arrange(avg)                          # Sort output by the mean\n\n# A tibble: 5 × 8\n# Groups:   sex [2]\n  sex   treat     avg   med   max stdev total_events     n\n  &lt;chr&gt; &lt;chr&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;        &lt;dbl&gt; &lt;int&gt;\n1 F     d1       1.83   0.5     6  2.56           11     6\n2 F     placebo  2.22   1      12  3.73           20     9\n3 F     d2       3      3       5  2               9     3\n4 M     d2       4.5    4.5     6  2.12            9     2\n5 M     placebo  8      8       8 NA               8     1\n\n\nWhat if I want to do the same analysis but with only obese patients? The CDC lists a BMI of &gt; 30 as obese.",
    "crumbs": [
      "Course Material",
      "Presentations 👩🏽‍🏫",
      "Presentation 2: Tidyverse"
    ]
  },
  {
    "objectID": "Presentations/presentation4.html",
    "href": "Presentations/presentation4.html",
    "title": "Presentation 4: Applied Statistics in R",
    "section": "",
    "text": "We will use the following presentation4.qmd file for this presentation. Please clink on the link, download and open the file in your RStudio.",
    "crumbs": [
      "Course Material",
      "Presentations 👩🏽‍🏫",
      "Presentation 4: Applied Statistics in R"
    ]
  },
  {
    "objectID": "Presentations/presentation4.html#structure-of-a-biostatistical-analysis-in-r",
    "href": "Presentations/presentation4.html#structure-of-a-biostatistical-analysis-in-r",
    "title": "Presentation 4: Applied Statistics in R",
    "section": "Structure of a biostatistical analysis in R",
    "text": "Structure of a biostatistical analysis in R\nThe very basic structure of an R script doing a classical statistical analysis is as follows:\n\nLoad packages that you will be using.\n\nRead the dataset to be analyzed. Possibly also do some data cleaning and manipulation.\n\nVisualize the dataset by graphics and other descriptive statistics.\n\nFit and validate a statistical model.\n\nHypothesis testing. Possibly also post hoc testing.\n\nOf course there are variants of this set-up, and in practice there will often be some iterations of the steps.\nIn this manuscript, we will exemplify the proposed steps in the analysis of a simple dataset:\n\nIn our current scenario, you are a researcher investigating psoriasis, an inflammatory skin disease. You have data on the expression of a number genes that are suspected to have something to do with the disease, but you cannot be sure until you perform some formal statistical analysis.\nThis is a great example where R skills would come very handy!\nYou will start with your gene of special interest IGFL4. IGFL4 belongs to the insulin-like growth factor family of signaling molecules that play critical roles in cellular energy metabolism as well as in growth and development.\nYou decide that your analysis approach will be one-way ANOVA of the expression of the IGFL4 gene against the skin type in psoriasis patients.\n\n\nLoad packages\nWe will use ggplot2 to make plots, and to be prepared for data manipulations, we simply load this together with the rest of the tidyverse.\nThe psoriasis data are provided in an Excel sheet, so we also load readxl. Finally, we will use the package emmeans to make post hoc tests.\nRemember that you should install the wanted packages before they can be used (but you only need to install the packages once!).\nThus,\n\n#install.packages(\"tidyverse\")\n#install.packages(\"readxl\")\n#install.packages(\"emmeans\")\nlibrary(tidyverse)\nlibrary(readxl)\nlibrary(emmeans)\n\nNow, we are done preparing for our analyses. Next, we will look specifically at the possible association between IGFL4 gene expression and psoriasis.\nPlease refer to the ‘STATS CHEAT SHEET’ provided in the slides for hints as well as other cheat sheets provided in other sessions where necessary.",
    "crumbs": [
      "Course Material",
      "Presentations 👩🏽‍🏫",
      "Presentation 4: Applied Statistics in R"
    ]
  },
  {
    "objectID": "Presentations/presentation4.html#example-analysis-of-variance",
    "href": "Presentations/presentation4.html#example-analysis-of-variance",
    "title": "Presentation 4: Applied Statistics in R",
    "section": "Example: Analysis of variance",
    "text": "Example: Analysis of variance\n\nStep 1: Data\nPsoriasis is an immune-mediated disease that affects the skin. You, as a researcher, carried out a micro-array experiment with skin from 37 people in order to examine a potential association between the disease and a certain gene (IGFL4). For each of the 37 samples the gene expression was measured. Fifteen skin samples were from psoriasis patients and from a part of the body affected by the disease (psor); 15 samples were from psoriasis patients but from a part of the body not affected by the disease (psne); and 7 skin samples were from healthy people (control).\nThe data are saved in the file psoriasis.xlsx. At first the variable named type (i.e. skin sample type) is stored as a character variable, we change it to a factor (and check that indeed there are 15, 15 and 7 skin samples in the three groups).\n\n# Read in the data from Excel file and call it psoriasisData\npsoriasisData &lt;- read_excel(\"../../Data/psoriasis.xlsx\")\n\n# View the top rows of the dataset\nhead(psoriasisData)\n\n# A tibble: 6 × 12\n  type  IGFL4 GeneA GeneB GeneC  GeneD GeneE GeneF GeneG   GeneH GeneI GeneJ\n  &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 psne  0.841  2.94  3.16  4.21 -0.476  4.20 0.335  5.20  0.167   2.00  4.62\n2 psne  0.955  2.67  3.23  6.09  0.121  3.66 1.28   5.52  0.0580  2.06  4.35\n3 psne  1.07   2.53  2.80  4.48 -0.165  3.90 1.18   5.40 -0.202   1.95  2.57\n4 psne  1.11   3.56  2.53  4.97  0.139  2.92 0.744  4.98 -0.329   2.03  3.17\n5 psne  1.18   3.48  2.79  4.74 -0.102  3.04 0.513  5.48 -0.116   2.04  3.61\n6 psne  1.20   2.94  3.12  4.20 -0.200  3.46 0.472  3.95 -0.129   1.55  3.56\n\n# Extract the data of interest containing the IGFL4 expression levels and skin sample type from the dataset and call this subset psorData\npsorData  &lt;- select(psoriasisData, type, IGFL4)\n\n# View the top rows of the dataset psorData\n\n\n# Change variable named 'type' to factor so that we can use in our analysis in the next steps\n# First let's check if it is character\nis.character(psorData$type)\n\n[1] TRUE\n\n# Now change to factor\npsorData &lt;- mutate(psorData, type = factor(type))\n# Again, let's check if it is factor now\n\n\n# Check that there are 15, 15 and 7 skin samples in the three groups. Hint: count()\n\nQUESTION 1: According to your count summary table, are there 15 (psor), 15 (psne) and 7 (healthy) skin samples in the three groups? Please share your answer here: https://www.menti.com/alhf674h4r88\n\n\nStep 2: Descriptive plots and statistics\nTo get an impression of the data, we make two plots, and compute group-wise means and standard deviations. Make (1) a plot showing three groups of skin samples (healthy, psne, psor) and IGFL4 expression levels from each skin sample so that we can visually compare each group of samples with regards to IGLF4 expression levels; (2) a boxplot for the same group-wise comparison. And finally, obtain the group-wise (healthy, psne, psor) descriptive statistics (mean, median and standard deviation). Hint: Consider using ggplot and tidyverse!\n\n# (1) a plot showing three groups of skin samples (healthy, psne, psor) and IGFL4 expression levels from each skin sample\nggplot(psorData, aes(x=type, y=IGFL4)) +\n  geom_point() + \n  labs(x=\"Skin type\", y=\"IGFL4\")\n\n\n\n\n\n\n\n# (2) a boxplot for the same group-wise comparison. Hint: geom_boxplot()\n\n\n# And finally, obtain the group-wise (healthy, psne, psor) descriptive statistics (mean, median and standard deviation). Hint: group_by()\n\nQUESTION 2: Please rank the three groups by their mean/average IGFL4 expression (descending order). Just visually assess the values and write down the order of the groups. Please share your answer here: https://www.menti.com/alhf674h4r88\n\n\nStep 3: Fit of oneway ANOVA\nThe scientific question is whether the gene expression level of IGFL4 differs between the three types/groups. Thus, the natural type of analysis is a oneway analysis of variance (ANOVA). The oneway ANOVA is fitted with the lm() function in R. It is a good approach to assign a name (below oneway) to the object with the fitted model. This object contains all relevant information and may be used for subsequent analysis. Note that we need to logarithmic transform the response (i.e. IGFL4 expression levels) as intensities are often on a multiplicative scale.\n\n# oneway analysis of variance (ANOVA)\noneway &lt;- lm(log(IGFL4) ~ type, data=psorData)\n\n# View the model coefficients\n\nQUESTION 3: Are you done? Please share how you feel here: https://www.menti.com/aldoypm5u6wr\n\n\nStep 4: Hypothesis test + Post hoc tests\nIt is standard to carry out an \\(F\\)-test for the overall effect of the explanatory (i.e. independent) variable. To be precise, the hypothesis is that the expected values are the same in all groups. The most easy way to do this test is to use drop1. The option test=\"F\" is needed to get the \\(F\\)-test using that function:\n\n# Carry out an $F$-test for the overall effect of the explanatory (i.e. independent) variable\n\nQUESTION 4: What is your conclusion from the \\(F\\)-test result? Please share your answer here: https://www.menti.com/ali6bnwoiky7\nIt might be that the gene expression in two of the three groups may or may not be significantly different. To investigate that we do post hoc testing. This is nicely done within the framework of estimated marginal means using the emmeans package. Here emmeans makes the estimated marginal means (that is the predicted gene expression IGFL4 on the log scale), and the pairs() command provide post hoc pairwise comparisons (package automatically adjusts for multiple comparisons using the default tukey method):\n\n# Run emmeans\nemmeans(oneway,~type)\n\n type     emmean     SE df lower.CL upper.CL\n healthy  0.2791 0.0938 34   0.0885   0.4696\n psne     0.2963 0.0641 34   0.1662   0.4265\n psor    -0.0788 0.0641 34  -0.2090   0.0513\n\nResults are given on the log (not the response) scale. \nConfidence level used: 0.95 \n\n# Perform post hoc pairwise comparisons\n\nQUESTION 5: What is your conclusion from the pairwise comparisons? Please share your answer here: https://www.menti.com/ali6bnwoiky7",
    "crumbs": [
      "Course Material",
      "Presentations 👩🏽‍🏫",
      "Presentation 4: Applied Statistics in R"
    ]
  },
  {
    "objectID": "Exercises/exercise4_PART1.html",
    "href": "Exercises/exercise4_PART1.html",
    "title": "Exercise 4, part 1: Applied Statistics in R",
    "section": "",
    "text": "This part is easier to follow from the Quarto document. You will use the following exercise4_PART1.qmd file. Please clink on the link, download and open the file in your RStudio.",
    "crumbs": [
      "Course Material",
      "Exercises 🏋🏽",
      "Exercise 4, Part 1: Applied Statistics"
    ]
  },
  {
    "objectID": "Exercises/exercise4_PART1.html#applied-statistics-in-r---group-exercise-part-1",
    "href": "Exercises/exercise4_PART1.html#applied-statistics-in-r---group-exercise-part-1",
    "title": "Exercise 4, part 1: Applied Statistics in R",
    "section": "Applied Statistics in R - Group Exercise (PART 1)",
    "text": "Applied Statistics in R - Group Exercise (PART 1)",
    "crumbs": [
      "Course Material",
      "Exercises 🏋🏽",
      "Exercise 4, Part 1: Applied Statistics"
    ]
  },
  {
    "objectID": "Exercises/exercise4_PART1.html#structure-of-a-biostatistical-analysis-in-r",
    "href": "Exercises/exercise4_PART1.html#structure-of-a-biostatistical-analysis-in-r",
    "title": "Exercise 4, part 1: Applied Statistics in R",
    "section": "Structure of a biostatistical analysis in R",
    "text": "Structure of a biostatistical analysis in R\nThe very basic structure of an R script doing a classical statistical analysis is as follows:\n\nLoad packages that you will be using.\n\nRead the dataset to be analyzed. Possibly also do some data cleaning and manipulation.\n\nVisualize the dataset by graphics and other descriptive statistics.\n\nFit and validate a statistical model.\n\nHypothesis testing. Possibly also post hoc testing.\n\nOf course there are variants of this set-up, and in practice there will often be some iterations of the steps.\nIn this manuscript we will exemplify the proposed steps in the analysis of a simple dataset:\n\nIn our current scenario, you are a researcher investigating psoriasis, an inflammatory skin disease. You have data on the expression of a number genes that are suspected to have something to do with the disease, but you cannot be sure until you perform some formal statistical analysis.\nThis is a great example where R skills would come very handy!\nYou will investigate your gene of special interest GeneD (a hypothetical gene in this case).\nYou decide that your analysis approach will be one-way ANOVA of the expression of GeneD against the skin type in psoriasis patients.\n\n\nLoad packages\nWe will use ggplot2 to make plots, and to be prepared for data manipulations, we simply load this together with the rest of the tidyverse.\nThe psoriasis data are provided in an Excel sheet, so we also load readxl. Finally, we will use the package emmeans to make post hoc tests.\nRemember that you should install the wanted packages before they can be used (but you only need to install the packages once!).\nThus,\n\n#install.packages(\"tidyverse\")\n#install.packages(\"readxl\")\n#install.packages(\"emmeans\")\nlibrary(tidyverse)\nlibrary(readxl)\nlibrary(emmeans)\n\nNow, we are done preparing for our analyses. Next, we will look specifically at the possible association between GeneD expression and psoriasis.\nPlease refer to the ‘STATS CHEAT SHEET’ provided in the slides for hints as well as other cheat sheets provided in other sessions where necessary.",
    "crumbs": [
      "Course Material",
      "Exercises 🏋🏽",
      "Exercise 4, Part 1: Applied Statistics"
    ]
  },
  {
    "objectID": "Exercises/exercise4_PART1.html#example-analysis-of-variance",
    "href": "Exercises/exercise4_PART1.html#example-analysis-of-variance",
    "title": "Exercise 4, part 1: Applied Statistics in R",
    "section": "Example: Analysis of variance",
    "text": "Example: Analysis of variance\n\nStep 1: Data\nPsoriasis is an immune-mediated disease that affects the skin. You, as a researcher, carried out a micro-array experiment with skin from 37 people in order to examine a potential association between the disease and a certain gene (GeneD). For each of the 37 samples the gene expression was measured. 15 skin samples were from psoriasis patients and from a part of the body affected by the disease (psor); 15 samples were from psoriasis patients but from a part of the body not affected by the disease (psne); and 7 skin samples were from healthy people (control).\nThe data are saved in the file psoriasis.xlsx. At first the variable named type (i.e. skin sample type) is stored as a character variable, we change it to a factor (and check that indeed there are 15, 15 and 7 skin samples in the three groups).\n\n# Read in the data from Excel file and call it psoriasisData\n\n\n# View the top rows of the dataset\n\n\n# Extract the data of interest containing GeneD expression levels and skin sample type from the dataset and call this subset psorData\n\n\n# View the top rows of the dataset psorData\n\n\n# Change variable named 'type' to factor so that we can use in our analysis in the next steps\n# First let's check if it is character\n\n# Now change to factor\n\n# Again, let's check if it is factor now\n\n\n# Check that there are 15, 15 and 7 skin samples in the three groups. Hint: summary()\n\nQUESTION 1: Are there 15, 15 and 7 skin samples in the three groups?\n\n\nStep 2: Descriptive plots and statistics\nTo get an impression of the data, we make two plots, and compute group-wise means and standard deviations. Make (1) a plot showing three groups of skin samples (healthy, psne, psor) and GeneD expression levels from each skin sample so that we can visually compare each group of samples with regards to GeneD expression levels; (2) a boxplot for the same group-wise comparison. And finally, obtain the group-wise (healthy, psne, psor) descriptive statistics (mean, median and standard deviation). Hint: Consider using ggplot and tidyverse!\n\n# (1) a plot showing three groups of skin samples (healthy, psne, psor) and GeneD expression levels from each skin sample\n\n\n# (2) a boxplot for the same group-wise comparison. Hint: geom_boxplot()\n\n\n# And finally, obtain the group-wise (healthy, psne, psor) descriptive statistics (mean, median and standard deviation). Hint: group_by()\n\nQUESTION 2: Please rank the three groups by their mean/average GeneD expression (descending order). Just visually assess the values and write down the order of the groups.\n\n\nStep 3: Fit of oneway ANOVA, model validation\nThe scientific question is whether the gene expression level of GeneD differs between the three types/groups. Thus, the natural type of analysis is a oneway analysis of variance (ANOVA). The oneway ANOVA is fitted with the lm() function in R. It is a good approach to assign a name (below oneway) to the object with the fitted model. This object contains all relevant information and may be used for subsequent analysis. Note that we need to logarithmic transform the response (i.e. GeneD expression levels) as intensities are often on a multiplicative scale.\n\n# oneway analysis of variance (ANOVA)\n\n\n# View the model coefficients\n\nQUESTION 3: Are you done? Please share how you feel with your group!\n\n\nStep 4: Hypothesis test + Post hoc tests\nIt is standard to carry out an \\(F\\)-test for the overall effect of the explanatory (i.e. independent) variable. To be precise, the hypothesis is that the expected values are the same in all groups. The most easy way to do this test is to use drop1. The option test=\"F\" is needed to get the \\(F\\)-test using that function:\n\n# Carry out an $F$-test for the overall effect of the explanatory (i.e. independent) variable\n\nQUESTION 4: What is your conclusion from the \\(F\\)-test result?\nIt might be that the gene expression in two of the three groups may or may not be significantly different. To investigate that we do post hoc testing. This is nicely done within the framework of estimated marginal means using the emmeans package. Here emmeans makes the estimated marginal means (that is the predicted gene expression GeneD on the log scale), and the pairs() command provide post hoc pairwise comparisons (package automatically adjusts for multiple comparisons using the default tukey method):\n\n# Run emmeans\n\n\n# Perform post hoc pairwise comparisons\n\nQUESTION 5: What is your conclusion from the pairwise comparisons?",
    "crumbs": [
      "Course Material",
      "Exercises 🏋🏽",
      "Exercise 4, Part 1: Applied Statistics"
    ]
  },
  {
    "objectID": "Exercises/exercise2.html",
    "href": "Exercises/exercise2.html",
    "title": "Exercise 2: Tidyverse",
    "section": "",
    "text": "Create new Quarto document. For working on the exercise, create a new Quarto document with a descriptive name and save it where you can find it again, i.e. in the folder where you downloaded the teaching material. You can use the commands shown in presentation2.qmd to solve this exercise. There is no shame in outright copying from the presentation2.qmd script, provided you understand what the command is doing.\nLoad packages. You will need to load the packages tidyverse and readxl for this exercise.",
    "crumbs": [
      "Course Material",
      "Exercises 🏋🏽",
      "Exercise 2: Tidyverse"
    ]
  },
  {
    "objectID": "Exercises/exercise2.html#setting-up",
    "href": "Exercises/exercise2.html#setting-up",
    "title": "Exercise 2: Tidyverse",
    "section": "",
    "text": "Create new Quarto document. For working on the exercise, create a new Quarto document with a descriptive name and save it where you can find it again, i.e. in the folder where you downloaded the teaching material. You can use the commands shown in presentation2.qmd to solve this exercise. There is no shame in outright copying from the presentation2.qmd script, provided you understand what the command is doing.\nLoad packages. You will need to load the packages tidyverse and readxl for this exercise.",
    "crumbs": [
      "Course Material",
      "Exercises 🏋🏽",
      "Exercise 2: Tidyverse"
    ]
  },
  {
    "objectID": "Exercises/exercise2.html#importing-data-and-a-first-look-at-the-dataset",
    "href": "Exercises/exercise2.html#importing-data-and-a-first-look-at-the-dataset",
    "title": "Exercise 2: Tidyverse",
    "section": "Importing data and a first look at the dataset",
    "text": "Importing data and a first look at the dataset\nThe data set used in these exercises was compiled from data downloaded from the website of the UK’s national weather service, the Met Office. It is saved in the file climate.xlsx1 which can be found in the folder Exercises/Data/. The spreadsheet contains monthly data from five UK weather stations for the following variables:\n\n\n\nVariable name\nExplanation\n\n\n\n\nstation\nLocation of weather station\n\n\nyear\nYear\n\n\nmonth\nMonth\n\n\naf\nDays of air frost\n\n\nrain\nRainfall in mm\n\n\nsun\nSunshine duration in hours\n\n\ndevice\nBrand of sunshine recorder / sensor\n\n\n\n\nLoad data. Start by importing the dataset using either the read_excel() function or the Import Dataset button and name it climate. If you load with Import Dataset it is a good idea to copy the command into your script so that the next time you run your script you can just execute that line instead of having to find the file again.\nFirst look at data. Write the name of the dataframe, i.e. climate, into the console and press enter to see the first rows of the dataset. You can also click on the climate object in the Environment panel.\nExplore your dataset and understand what data you have.\n\nHow many observations, i.e. rows are there?\nHow many data columns are there and what are their types?\nWhat is the information in each row and column?\nHow many different stations are there?\nHow many rows per station?",
    "crumbs": [
      "Course Material",
      "Exercises 🏋🏽",
      "Exercise 2: Tidyverse"
    ]
  },
  {
    "objectID": "Exercises/exercise2.html#working-with-the-data",
    "href": "Exercises/exercise2.html#working-with-the-data",
    "title": "Exercise 2: Tidyverse",
    "section": "Working with the data",
    "text": "Working with the data\nBefore you proceed with the exercises in this document, make sure you load the tidyverse in order to use the functions from this package.\n\nCount the number of rows that did not have any days with air frost.\nCount the number of rows per station that did not have any days with air frost.\nSelect from the climate dataset (remember to filter rows and select columns):\n\nall rows from the station in Oxford\nall rows from the station in Oxford when there were at least 100 hours of sunlight\nall rows from the stations in Oxford and Camborne when there were at least 100 hours of sunlight\na subset that only contains the station, year and rain columns\n\n\nThe next few questions build on each other, each adding a piece of code:\n\nCompute the average rainfall over the full dataset by using the summarize function. You can look at the examples we did at the end of presentation 2.\nNow, compute the average rainfall, standard deviation of the rainfall and the total rainfall (the sum) on the full dataset. I.e. all three measures should be inside the same resulting table. Have a look at the tidyverse lecture if you have trouble with this.\nNow, use group_by before summarize in order to compute group summary statistics (average, standard deviation, and sum) but split up into each of the five weather stations.\nInclude a column in the summary statistics which shows how many observations, i.e. rows, the data set contains for each station.\nSort the rows in the output in descending order according to average annual rainfall.",
    "crumbs": [
      "Course Material",
      "Exercises 🏋🏽",
      "Exercise 2: Tidyverse"
    ]
  },
  {
    "objectID": "Exercises/exercise2.html#manipulating-the-data",
    "href": "Exercises/exercise2.html#manipulating-the-data",
    "title": "Exercise 2: Tidyverse",
    "section": "Manipulating the data",
    "text": "Manipulating the data\n\nCreate a new column in climate and save the new dataset in a different variable so you don’t overwrite your original climate data. The new column should count the number of days in each month without air frost, based on the existing af column. For this exercise, assume each month has 30 days. To find the number of days without air frost, subtract the value in the af column from 30.\nAdd another column to your new dataset that says whether the weather this month was good. We consider a month to be good if it had at least 100 hours of sunshine and less than 100 mm of rain. Otherwise the weather was bad.\nHow many months are there with good weather (use the column you made in 14) for each station? Find the station that has the most months with good weather.",
    "crumbs": [
      "Course Material",
      "Exercises 🏋🏽",
      "Exercise 2: Tidyverse"
    ]
  },
  {
    "objectID": "Exercises/exercise2.html#complex-operations",
    "href": "Exercises/exercise2.html#complex-operations",
    "title": "Exercise 2: Tidyverse",
    "section": "Complex operations",
    "text": "Complex operations\nThe final questions require that you combine commands and variables of the type above.\n\nFor each weather station apart from the one in Armagh, compute the total rainfall and sunshine duration for months that had no days of air frost. Present the totals in centimetres and days, respectively.\nIdentify the weather station for which the median number of monthly sunshine hours over the months April to September was largest.",
    "crumbs": [
      "Course Material",
      "Exercises 🏋🏽",
      "Exercise 2: Tidyverse"
    ]
  },
  {
    "objectID": "Exercises/exercise2.html#wrapping-up",
    "href": "Exercises/exercise2.html#wrapping-up",
    "title": "Exercise 2: Tidyverse",
    "section": "Wrapping up",
    "text": "Wrapping up\n\nLike in the last exercise; imagine you need to send your code to a collaborator. Review your code to ensure it is clear and well-structured, so your collaborator can easily understand and follow your work. Render your Quarto document and look at the result.",
    "crumbs": [
      "Course Material",
      "Exercises 🏋🏽",
      "Exercise 2: Tidyverse"
    ]
  },
  {
    "objectID": "Exercises/exercise2.html#optional-section",
    "href": "Exercises/exercise2.html#optional-section",
    "title": "Exercise 2: Tidyverse",
    "section": "Optional section",
    "text": "Optional section\nIf you went through the exercises above and are ready for more challenges - you have come to the right place. You have not learn all the operations you are asked to do, so feel free to search for help online. If you are a bit overwhelmed and need a break, by all means chill!\nLet’s simulate some climate data for year 2056 and merge it with the original climate data set from 2016.\n\nclimate_fake &lt;- climate\n\nclimate_fake$year &lt;- 2056\nset.seed(101)\nclimate_fake$af &lt;- sample(0:11, nrow(climate_fake), replace = TRUE)\nclimate_fake$rain &lt;- rnorm(nrow(climate_fake), mean = mean(climate$rain)+150, sd = sd(climate$rain)+50)\nclimate_fake$sun &lt;- rnorm(nrow(climate_fake), mean = mean(climate$sun), sd = sd(climate$sun))\nclimate_fake$device &lt;- paste(climate_fake$device, ', New and Improved')\n\nclimate_change &lt;- rbind(climate, climate_fake)\nhead(climate_change)\n\n\nChange the station names to begin with capital letters.\nCreate a new column that contain the months in names. Could someone using R have needed the month names before you?\nAdd a column that tells the season of the month (Winter, Spring, Summer, Fall). Have a look at the case_when function.\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nHave a look at the case_when function.\n\n\n\n\nSummarize the mean rain fall, air frost, and sun for each year. Evaluate the results.\nSummarize the mean rain fall, air frost, and sun for each season and year. Compare the seasons across the years. How will the seasons be different in year 2056?\nSummarize the mean rain fall, air frost, and sun for each station, season and year. Is this a good way to get an overview of the weather changes?\n\nWe can get a better overview of the weather changes from three plots. We are learning the ggplot method in the next presentation.\n\nExport your data\n\nIf you’re up for more, we can try some things that might not totally fit this dataset but will take you through some useful tidyverse operations\n\nExtract the unique stations and save it as a vector.\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nThe unlist function will convert a one-column dataframe to a vector.\n\n\n\n\nCount the number of A’s in each station.\nCount the number of A’s and a’s in each station.\nIn the climate change dataframe, add a column for each word in the device column.\nChange one of the new columns to only include lower case letter and the other to only include upper case.\nAdd a new columns that contains the first three letters of each month in upper case.\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nHave a look at the str_sub function.",
    "crumbs": [
      "Course Material",
      "Exercises 🏋🏽",
      "Exercise 2: Tidyverse"
    ]
  },
  {
    "objectID": "Exercises/exercise2.html#footnotes",
    "href": "Exercises/exercise2.html#footnotes",
    "title": "Exercise 2: Tidyverse",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nContains public sector information licensed under the Open Government Licence v3.0.↩︎",
    "crumbs": [
      "Course Material",
      "Exercises 🏋🏽",
      "Exercise 2: Tidyverse"
    ]
  },
  {
    "objectID": "Exercises/exercise1B.html",
    "href": "Exercises/exercise1B.html",
    "title": "Exercise 1B: Introduction to R",
    "section": "",
    "text": "Start RStudio.\nMake a new Quarto document. Go to the menu bar and click File → New file… → Quarto document…. Give the Quarto document a title that makes sense to you. NB! The document is not saved yet.\nSave your document. Go to the menu bar and click File → Save as….\nCheck the working directory. Let’s check which working directory we are in with the getwd() function. When working with Quarto documents the working directory is always the same as where the file is located (where you saved it).",
    "crumbs": [
      "Course Material",
      "Exercises 🏋🏽",
      "Exercise 1B: Introduction to R"
    ]
  },
  {
    "objectID": "Exercises/exercise1B.html#getting-started",
    "href": "Exercises/exercise1B.html#getting-started",
    "title": "Exercise 1B: Introduction to R",
    "section": "",
    "text": "Start RStudio.\nMake a new Quarto document. Go to the menu bar and click File → New file… → Quarto document…. Give the Quarto document a title that makes sense to you. NB! The document is not saved yet.\nSave your document. Go to the menu bar and click File → Save as….\nCheck the working directory. Let’s check which working directory we are in with the getwd() function. When working with Quarto documents the working directory is always the same as where the file is located (where you saved it).",
    "crumbs": [
      "Course Material",
      "Exercises 🏋🏽",
      "Exercise 1B: Introduction to R"
    ]
  },
  {
    "objectID": "Exercises/exercise1B.html#write-commands-at-the-prompt",
    "href": "Exercises/exercise1B.html#write-commands-at-the-prompt",
    "title": "Exercise 1B: Introduction to R",
    "section": "Write commands at the prompt",
    "text": "Write commands at the prompt\n\nGo to the R console (lower left window) and write a few commands, one at a time. You could for example try these commands:\n\n\n6*12\nx &lt;- 100\nx + 7\n\nNotice how a new object, x, appears in the Global Environment window (upper right window) and can be used for new computations.\nCommands written at the prompt are not saved for later use! It is fine to write commands that should never be used again at the prompt, and it is fine “to play at the prompt”, but in general you must organize your commands in R scripts (or Quarto files, which will be introduced in Lesson IV).",
    "crumbs": [
      "Course Material",
      "Exercises 🏋🏽",
      "Exercise 1B: Introduction to R"
    ]
  },
  {
    "objectID": "Exercises/exercise1B.html#working-with-quarto-documents",
    "href": "Exercises/exercise1B.html#working-with-quarto-documents",
    "title": "Exercise 1B: Introduction to R",
    "section": "Working with Quarto Documents",
    "text": "Working with Quarto Documents\nTo save your code, you need to store it in a file. There are several file formats available for this purpose, and in this course, we are using Quarto, the latest format in the code reproducibility domain.\n\nCreate code chunk. In the Quarto document you just made, create a code chuck by pressing the green box with the white ‘C’ in the right of the panel.\nWrite code. Write a command in the code chunk, similar to one of those from above.\nRun code. Click on the green button in the top right of the code chunk - or simply type Ctrl + Enter/option + Enter. Then the command is transferred to the prompt in the console and executed, just as if you had written the command directly at the prompt. Try with a new command in a new line.\nCreate a comment. Put a hashtag (#) before one of the commands in the code chunk and run it. Nothing happens! Hence, you can use hashtags for writing comments in your code chunks.\nSave your files often. It happens that you ask R for something so weird that it shuts down, and then it is a pity to have lost your work.",
    "crumbs": [
      "Course Material",
      "Exercises 🏋🏽",
      "Exercise 1B: Introduction to R"
    ]
  },
  {
    "objectID": "Exercises/exercise1B.html#r-packages",
    "href": "Exercises/exercise1B.html#r-packages",
    "title": "Exercise 1B: Introduction to R",
    "section": "R Packages",
    "text": "R Packages\nR is born with a lot of functionalities, but the enormous community of R users also contributes to R all the time by developing code and sharing it in R packages. An R package is simply a collection of R functions and/or datasets (including documentation). As of September 20, 2024, there are 21,361 packaged available at the CRAN repository (and there are many other repositories).\nAn R package needs be installed and loaded before you can use its functionalities. You only have to install a package once (until you re-install R), whereas you have to load it in every R session you want to use it. As an example, let’s install the package ContaminatedMixt.\n\nInstall. Choose one of the two installation methods:\n\n\n\nUsing the command line:\n\n\ninstall.packages(\"ContaminatedMixt\")\n\nNote that for this approach you need to know the name of the package and spell it correctly, including capitalization!\n\nUsing the graphical interface:\nLook at lower right of your Rstudio window where you have a window with several tabs. Click on Packages. You will see a list of your currently installed packages and their versions. To install ContaminatedMixt, click on Install and start to type the name. You will notice a drop down list appears from which you can select the correct package. This is useful if you are not quite sure of the correct spelling.\n\nA lot of red text will be written in the console while the installation goes on. This usually does not mean there was a problem, unless the text reads ‘error’ or ‘exit’. In the end, the package is installed, or you will see an explanation of what went wrong.\n\nLoading. Load the package you just installed with the command library(ContaminatedMixt). If everything went well, you should now able to run the command data(package = 'ContaminatedMixt') which will show you an overview of the datasets included in the package.",
    "crumbs": [
      "Course Material",
      "Exercises 🏋🏽",
      "Exercise 1B: Introduction to R"
    ]
  },
  {
    "objectID": "Exercises/exercise1B.html#basic-r-commands",
    "href": "Exercises/exercise1B.html#basic-r-commands",
    "title": "Exercise 1B: Introduction to R",
    "section": "Basic R commands",
    "text": "Basic R commands\nWe will now have a look at basic commands in R that you just learned about. We will use an in-build dataset of R called trees. Copy-paste the commands into your document or write them yourself to get a hang of the coding! Start thinking about the structure of you document and when to create new code chunks.\n\nTo start with, load the tidyverse package.\n\n\nlibrary(tidyverse)\n\n\nNow, load the trees dataset by copying and executing the following commands:\n\n\ndata(\"trees\")\nview(trees)\n?trees\n\n\nCheck what information is contained in the trees dataset by calling the summary function on it:\n\n\nsummary(trees)\n\n\nHow many trees do we have data for?\nNow, extract the column called Volume from the dataset and assign it to a new variable called volume_col.\nDisplay the volume of the first 10 trees.\nFind the minimum, maximum and mean volume from the column you just extracted. Does it match what was stated in the summary?\nWhat class of data structure is trees? Make it into a tibble.",
    "crumbs": [
      "Course Material",
      "Exercises 🏋🏽",
      "Exercise 1B: Introduction to R"
    ]
  },
  {
    "objectID": "Exercises/exercise1B.html#making-some-graphics",
    "href": "Exercises/exercise1B.html#making-some-graphics",
    "title": "Exercise 1B: Introduction to R",
    "section": "Making some graphics",
    "text": "Making some graphics\nNext, let’s also try to make some plots using the base graphics system in R (in Presentation III you will learn to make graphics using the ggplot2-package). We will continue to use the trees dataset.\n\nThe dataset trees contains 31 observations of 3 variables (diameter, height and volume of black cherry trees). Insert the following two commands in a code chunk, and execute them to make two plots.\n\n\nplot(Volume~Height, data=trees)\nplot(Volume~Height, data=trees, log=\"y\")",
    "crumbs": [
      "Course Material",
      "Exercises 🏋🏽",
      "Exercise 1B: Introduction to R"
    ]
  },
  {
    "objectID": "Exercises/exercise1B.html#shut-down-r",
    "href": "Exercises/exercise1B.html#shut-down-r",
    "title": "Exercise 1B: Introduction to R",
    "section": "Shut down R",
    "text": "Shut down R\n\nClose RStudio. If changes were made either to the Quarto document (shown in the upper-left window) or to the workspace (called ‘Global Environment’ in the upper-right window) you will be prompted if you like to save those. Answer Yes to that; in particular it is important that you save your documents as they contain all relevant commands to reproduce your output and plots.\nReopen file. Locate the Quarto document that you saved in question 3 (and question 10!). Start RStudio again, and open the file (via the File menu). Check that you can run it again.\n\nRemark - You can also start RStudio by double clicking on a file with the .qmd extension (or other R-readable formats). One advantage of this is that the workspace and the R history will be saved to the same folder as the Quarto document when you later close RStudio, since the working directory will be set to the map where the file is located.",
    "crumbs": [
      "Course Material",
      "Exercises 🏋🏽",
      "Exercise 1B: Introduction to R"
    ]
  },
  {
    "objectID": "Exercises/exercise1B.html#getting-help-in-r",
    "href": "Exercises/exercise1B.html#getting-help-in-r",
    "title": "Exercise 1B: Introduction to R",
    "section": "Getting help in R",
    "text": "Getting help in R\nEvery R function comes with a help page, that gives a brief description of the function and describes its usage (input/arguments and output/value). Let’s use the function median() as example. It is, no surprise, computing the median from a vector of numbers.\n\nTry these commands:\n\n\nx &lt;- c(1, 3, 8, 9, 100, NA)\nx\nmedian(x)\n\nThe first command defines a vector with six elements, but where the last number is missing (NA = Not Available). Since the last number is missing, median returns NA. However, could we make median find the median of the remaining numbers. Perhaps the help page can help out!\n\nLook at the help for the median function:\n\n\n?median\n\nThe help page for median appears in the lower right window. If we read it carefully, then we realize that the extra argument (input) na.rm may help us. We therefore try this:\n\nmedian(x, na.rm=TRUE)\n\nAdmittedly, R help pages are often quite difficult to read, but be aware that there are examples of commands in the bottom of each help page. For more complicated functions, these examples can be very useful while trying to get to know the function and its functionalities.\nIn order to use the help pages as above, you need to know the name of the function, which obviously may not be the case: You want to compute the median but have no idea what function to use. The best way to proceed: Google! Use “R whatever-you-want-to-search-for”, and you often get exactly what you need.\nWhile working with R, you will get a lot of error messages. Some are easy to understand, and you will readily be able to fix the problems, while others… Again, the best answer is: Google and ChatGPT! Copy the error message into Google or ChatGPT, and you will often find help.",
    "crumbs": [
      "Course Material",
      "Exercises 🏋🏽",
      "Exercise 1B: Introduction to R"
    ]
  },
  {
    "objectID": "Exercises/exercise1B.html#wrapping-up",
    "href": "Exercises/exercise1B.html#wrapping-up",
    "title": "Exercise 1B: Introduction to R",
    "section": "Wrapping up",
    "text": "Wrapping up\n\nImagine you need to send your code to a collaborator. Review your code to ensure it is clear and well-structured, so your collaborator can easily understand and follow your work. You might consider emphasizing important points by making text bold, underlined or blue.\nRender your Quarto document by clicking the Render button with the blue arrow in the toolbar. Once the HTML file is generated, open it in a web browser. Does the document look as you expected? Iterate on your document until it meets your desired format and appearance.",
    "crumbs": [
      "Course Material",
      "Exercises 🏋🏽",
      "Exercise 1B: Introduction to R"
    ]
  },
  {
    "objectID": "Exercises/exercise1B.html#extra",
    "href": "Exercises/exercise1B.html#extra",
    "title": "Exercise 1B: Introduction to R",
    "section": "Extra",
    "text": "Extra\n\nMac If you want to render your document to a PDF you need to install tinyex.\n\nGo to https://quarto.org/docs/download/ and install Quarto.\nIn the top of your console window, switch to Terminal. (If the Terminal is not there go to Tools → Terminal → New Terminal.) Write quarto install tinytex in the terminal and press enter. When it has completed and gives the message Installation successful, change the YAML in the every top of your Quarto document from format: html to format: pdf. Save and render your Quarto document again and review the PDF file.",
    "crumbs": [
      "Course Material",
      "Exercises 🏋🏽",
      "Exercise 1B: Introduction to R"
    ]
  },
  {
    "objectID": "Exercises/exercise1B.html#lessons-learnt",
    "href": "Exercises/exercise1B.html#lessons-learnt",
    "title": "Exercise 1B: Introduction to R",
    "section": "Lessons learnt",
    "text": "Lessons learnt\n\nYou must write you code in a document, like the Quarto document, such that you can save the work and return to it some other day.\nSave your files often.\nIf you forget to save your files before you close RStudio, then RStudio will prompt you if you want to save your work.\nHave structure in your document by using headers, text, and code chunks (maybe with comments).",
    "crumbs": [
      "Course Material",
      "Exercises 🏋🏽",
      "Exercise 1B: Introduction to R"
    ]
  },
  {
    "objectID": "Slideshow/material_for_slides.html",
    "href": "Slideshow/material_for_slides.html",
    "title": "Presentation 4",
    "section": "",
    "text": "library(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\n\nggplot2 additive structure\n\nset.seed(123)\n\ndf = data.frame(Sample = sample(x = c('A','B','C','D'), size = 100, replace = T), \n                Measure = sample(x = 1:20, size = 100, replace = T))\n\nhead(df)\n\n  Sample Measure\n1      C      20\n2      C      14\n3      C       3\n4      B       8\n5      C      16\n6      B      12\n\n\n\nggplot(df, \n       aes(x = Sample, \n           y = Measure))\n\n\n\n\n\n\n\nggsave('material_for_slides/ggplot2_additive_structure_plot1.png')\n\nSaving 7 x 5 in image\n\n\n\nggplot(df, \n       aes(x = Sample, \n           y = Measure)) +\n  geom_boxplot()\n\n\n\n\n\n\n\nggsave('material_for_slides/ggplot2_additive_structure_plot2.png')\n\nSaving 7 x 5 in image\n\n\n\nggplot(df, \n       aes(x = Sample, \n           y = Measure,\n           fill = Sample)) +\n  geom_boxplot()\n\n\n\n\n\n\n\nggsave('material_for_slides/ggplot2_additive_structure_plot3.png')\n\nSaving 7 x 5 in image\n\n\n\nggplot(df, \n       aes(x = Sample, \n           y = Measure,\n           fill = Sample)) +\n  geom_boxplot() + \n  labs(title = 'Boxplots of measurements stratified by sample')\n\n\n\n\n\n\n\nggsave('material_for_slides/ggplot2_additive_structure_plot4.png')\n\nSaving 7 x 5 in image\n\n\n\nggplot(df, \n       aes(x = Sample, \n           y = Measure,\n           fill = Sample)) +\n  geom_boxplot() + \n  labs(title = 'Boxplots of measurements stratified by sample') + \n  scale_fill_manual(values = c(\"pink\", \"lightgreen\", \"lavender\", \"lightblue\"))\n\n\n\n\n\n\n\nggsave('material_for_slides/ggplot2_additive_structure_plot5.png')\n\nSaving 7 x 5 in image\n\n\n\nggplot(df, \n       aes(x = Sample, \n           y = Measure,\n           fill = Sample)) +\n  geom_boxplot() + \n  labs(title = 'Boxplots of measurements stratified by sample') + \n  scale_fill_manual(values = c(\"pink\", \"lightgreen\", \"lavender\", \"lightblue\")) + \n  theme_bw() \n\n\n\n\n\n\n\nggsave('material_for_slides/ggplot2_additive_structure_plot6.png')\n\nSaving 7 x 5 in image\n\n\n\n\nggplot basic structure\n\nlibrary(ContaminatedMixt)\ndata('wine')\n\nset.seed(123)\ncountry &lt;- sample(x = c('France', 'Italy'), size = nrow(wine), replace = TRUE)\nwine$Country &lt;- country\n\nhead(wine)\n\n    Type Alcohol Malic  Ash Alcalinity Magnesium Phenols Flavanoids\n1 Barolo   14.23  1.71 2.43       15.6       127    2.80       3.06\n2 Barolo   13.20  1.78 2.14       11.2       100    2.65       2.76\n3 Barolo   13.16  2.36 2.67       18.6       101    2.80       3.24\n4 Barolo   14.37  1.95 2.50       16.8       113    3.85       3.49\n5 Barolo   13.24  2.59 2.87       21.0       118    2.80       2.69\n6 Barolo   14.20  1.76 2.45       15.2       112    3.27       3.39\n  Nonflavanoid Proanthocyanins Color  Hue Dilution Proline Country\n1         0.28            2.29  5.64 1.04     3.92    1065  France\n2         0.26            1.28  4.38 1.05     3.40    1050  France\n3         0.30            2.81  5.68 1.03     3.17    1185  France\n4         0.24            2.18  7.80 0.86     3.45    1480   Italy\n5         0.39            1.82  4.32 1.04     2.93     735  France\n6         0.34            1.97  6.75 1.05     2.85    1450   Italy\n\nwine %&gt;% select(Type, Alcohol, Country, Magnesium, Phenols) %&gt;% head()\n\n    Type Alcohol Country Magnesium Phenols\n1 Barolo   14.23  France       127    2.80\n2 Barolo   13.20  France       100    2.65\n3 Barolo   13.16  France       101    2.80\n4 Barolo   14.37   Italy       113    3.85\n5 Barolo   13.24  France       118    2.80\n6 Barolo   14.20   Italy       112    3.27\n\n\n\nggplot(wine,\n       aes(x = Type, \n           y = Alcohol,\n           fill = Country)) + \n  geom_col()\n\n\n\n\n\n\n\nggsave('material_for_slides/ggplot2_basic_structure_plot1.png')\n\nSaving 7 x 5 in image\n\n\n\nggplot(wine,\n       aes(x = Type, \n           y = Alcohol)) + \n  geom_col(fill = 'hotpink')\n\n\n\n\n\n\n\nggsave('material_for_slides/ggplot2_basic_structure_plot2.png')\n\nSaving 7 x 5 in image"
  }
]